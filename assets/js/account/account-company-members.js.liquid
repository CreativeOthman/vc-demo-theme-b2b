angular.module('storefront.account')
.component('vcAccountCompanyMembers', {
    templateUrl: "themes/assets/account-company-members.tpl.liquid",
    $routeConfig: [
     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },
     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }
    ],
    controller: ['storefront.accountApi', function (accountApi) {
        var $ctrl = this;
    }]
})

.component('vcAccountCompanyMembersList', {
    templateUrl: "account-company-members-list.tpl",
    bindings: { $router: '<' },
    controller: ['storefrontApp.mainContext', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, corporateAccountApi, corporateRegisterApi, loader, confirmService, $location, $translate) {
        var $ctrl = this;
        $ctrl.newMemberComponent = null;
        $ctrl.newRolesComponent = null;
        $ctrl.loader = loader;
        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };
        $ctrl.pageSettings.pageChanged = function () {
            loader.wrapLoading(function () {
                return corporateAccountApi.getCompanyMembers({
                    memberId: mainContext.customer.companyId,
                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,
                    take: $ctrl.pageSettings.itemsPerPageCount,
                    sortInfos: $ctrl.sortInfos
                }, function (data) {
                    $ctrl.entries = data.results;
                    $ctrl.pageSettings.totalItems = data.totalCount;
                }).$promise;
            });
        };
        
        $ctrl.addNewMemeberFieldsConfig =[
            {
                field: 'CompanyName',
                disabled: true,
                visible: false,
                required: false
            },
            {
                field: 'UserName',
                disabled: false,
                visible: true
            },
            {
                field: 'Password',
                disabled: false,
                visible:  true
            }
        ];

        this.$routerOnActivate = function (next) {
            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;
            $ctrl.pageSettings.pageChanged();
        };

        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\r|\r\n|\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*))+$/);
        $ctrl.invite = function () {
            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\r|\r\n|\n/g);
            loader.wrapLoading(function(){
              return corporateAccountApi.invite({
                storeId: "{{shop.id}}",
                companyId: mainContext.customer.companyId,
                emails: $ctrl.inviteInfo.emails,
                adminName: mainContext.customer.fullName,
                adminEmail: mainContext.customer.email,
                message: $ctrl.inviteInfo.message,
                callbackUrl: $location.protocol() + "://" + $location.host() + ":" + $location.port() + "{{ "/account/register" | absolute_url }}"
              }).$promise;
            }).then($ctrl.cancel()).then($ctrl.pageSettings.pageChanged);
        };

        $ctrl.addNewMember = function () {
            if ($ctrl.newMemberComponent.validate()) {
                $ctrl.newMember.companyId = mainContext.customer.companyId;
                $ctrl.newMember.roles = _.map(_.filter($ctrl.newRolesComponent.roles, function (role) { return role.assigned === true; }), function(role) { return role.name });
                $ctrl.newMember.storeId = "{{shop.id}}";

                $ctrl.registerCompanyMember($ctrl.newMember).then($ctrl.cancel).then(function () {
                    $ctrl.pageSettings.currentPage = 1;
                    $ctrl.pageSettings.pageChanged();
                });
            }
        };

        $ctrl.registerCompanyMember = function (registerData) {
            return loader.wrapLoading(function () {
                return corporateRegisterApi.registerMember(registerData).$promise;
            });
        };

        $ctrl.updateCompanyMember = function (companyMember) {
            return loader.wrapLoading(function () {
                return corporateAccountApi.updateCompanyMember(companyMember).$promise;
            });
        };

        //$ctrl.updateRoles = function() {
        //    angular.forEach($ctrl.logins, function(login) {
        //        authService.changeAuthData({ roles: $ctrl.rolesComponent.roles }, login);
        //    });
        //};

        $ctrl.cancel = function () {
            $ctrl.inviteInfo = null;
            $ctrl.newMember = null;
        };

        $ctrl.changeStatus = function (memberId) {
            loader.wrapLoading(function () {
                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {
                    member.isActive = !member.isActive;
                    $ctrl.updateCompanyMember(member).then($ctrl.pageSettings.pageChanged);
                }).$promise;
            });
        };

        $ctrl.edit = function (memberId) {
            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);
        }

        $ctrl.delete = function (memberId) {
            var showDialog = function (text) {
                confirmService.confirm(text).then(function (confirmed) {
                    if (confirmed) {
                        loader.wrapLoading(function () {
                            return corporateAccountApi.deleteCompanyMember({ ids: memberId },
                                function () {
                                    $ctrl.pageSettings.pageChanged();
                                }).$promise;
                        });
                    }
                });
            };

            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);
        };

        $ctrl.validate = function (){
            $ctrl.inviteForm.$setSubmitted();
            return $ctrl.inviteForm.valid;
        };
    }]
})

.component('vcAccountCompanyMemberDetail', {
    templateUrl: "account-company-members-detail.tpl",
    require: {
        accountManager: '^vcAccountManager'
    },
    controller: ['storefront.corporateAccountApi', '$rootScope', '$window', 'authService', 'loadingIndicatorService', 'confirmService', function (corporateAccountApi, $rootScope, $window, authService, loader, confirmService) {
        var $ctrl = this;
        $ctrl.loader = loader;
        $ctrl.fieldsConfig =[
            {
                field: 'CompanyName',
                disabled: true,
                visible: false,
                required: false
            },
            {
                field: 'UserName',
                disabled: true,
                visible: false
            },
            {
                field: 'Password',
                disabled: true,
                visible: false
            }
        ];

        $ctrl.memberComponent = null;
        $ctrl.rolesComponent = null;

        function refresh() {
            loader.wrapLoading(function () {
                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {
                    $ctrl.member = {
                        id: member.id,
                        firstName: member.firstName,
                        lastName: member.lastName,
                        email: _.first(member.emails),
                        organizations: member.organizations
                    };
                    $ctrl.logins = _.map(_.filter(member.securityAccounts, function(account) { return account.storeId === "{{shop.id}}"; }), function(account) { return account.userName });
                }).$promise;
            });
        }

        this.$routerOnActivate = function (next) {
            $ctrl.pageNumber = next.params.pageNumber || 1;
            $ctrl.memberNumber = next.params.member;

            refresh();
        };

        $ctrl.submitMember = function () {
            if ($ctrl.memberComponent.validate()) {
                loader.wrapLoading(function () {
                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;
                    $ctrl.member.emails = [ $ctrl.member.email ];
                    return corporateAccountApi.updateCompanyMember($ctrl.member).$promise;
                });
            }
        };

        $ctrl.submitRoles = function () {
            angular.forEach($ctrl.logins, function(login) {
                authService.changeAuthData({ roles: $ctrl.rolesComponent.roles }, login);
            });
        };
    }]
});
