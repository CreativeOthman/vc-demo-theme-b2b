{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/collection.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/inventory.js","../../../assets/js/list.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/product-compare.js","../../../assets/js/product-list.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/searchBar.js","../../../assets/js/services.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/dropdown-close.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/toggle-on-hover.js","../../../assets/js/common-components/totals.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-lists.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","console","log","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","split","some","permissionWithScope","constant","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","parse","data","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","protocol","host","parseFloat","get","now","storefrontApp","controller","$scope","cartService","catalogService","getCart","cartIsUpdating","then","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","changeLineItemQuantity","lineItemId","quantity","lineItem","find","$invalid","initialQuantity","cancel","changeLineItemPrice","newPrice","initialItems","removeLineItem","copy","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","outerRedirect","baseUrl","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","criteria","keyword","start","pageSize","search","products","selectSearchedProduct","product","selectedSearchedProduct","addProductToCart","addLineItem","getCartItemsCount","cartItemsCount","$on","$uibModalInstance","dialogData","close","redirect","url","$ctrl","sortModes","manual","best-selling","title-ascending","title-descending","price-ascending","price-descending","createddate-descending","createddate-ascending","view","generatePageSizes","capacity","steps","page_size","pageSizes","range","directive","$compile","marketingService","restrict","link","scope","element","attrs","getDynamicContent","html","replace","ctrl","onKeyPress","keyCode","click","on","off","require","$parse","$httpParamSerializer","compile","tElem","tAttr","xlinkHref","toLowerCase","toString","call","prop","$watch","vcQuery","query","extend","URL","absUrl","attr","errorHandler","fallbackSrc","filter","input","extention","pop","suffix","dialogService","commerceService","selectFulfillmentCenter","showDialog","searchFulfillmentCenters","searchPhrase","fulfillmentCenters","listService","$translate","availableLists","selectedList","inProgress","itemAdded","addProductToList","selectList","list","initialize","lists","forEach","titleKey","descriptionKey","translations","description","translationIds","contains","customerService","currentPath","$$path","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","getCurrentCustomer","addressId","each","addresses","isContact","memberType","orderService","orderNumber","getOrder","order","authService","toggleVisibilityBasedOnPermission","permissionValue","show","hide","vaPermission","$localStorage","formatNumber","number","float","isNaN","isInProductCompareList","productId","p","addProductToCompareList","preventDefault","existingProduct","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","pricingService","loaded","prices","getActualProductPrices","productList","object","price","quoteRequestService","toDialogDataModel","toDialogDataModelMock","rejection","dialogDataModel","errorMessage","message","errors","modelState","getFlatternDistinctPropertiesMap","variations","retVal","variation","propertyMap","getVariationPropertyMap","keys","union","groupBy","variationProperties","getSelectedPropsMap","variationPropsMap","selected","comparePropertyMaps","propMap1","propMap2","every","findVariationBySelectedProps","selectedPropMap","compareProductInLists","buttonInvalid","listNames","listName","allVariations","selectedVariation","allVariationPropsMap","productPrice","productPriceLoaded","addProductsToCartMock","Test","imageUrl","actualPrice","formattedAmount","actualPriceWithTax","listPrice","listPriceWithTax","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToWishlist","addProductToActualQuoteRequest","addProductToQuoteRequest","checkProperty","productIds","concat","getQuoteRequest","quoteRequest","billingAddress","countryCode","getCountryRegions","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","getCountries","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","amount","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","a","submitQuoteRequest","email","isRegisteredUser","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","updated","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","isString","match","values","getRecommendedProducts","startRecordInteraction","searchQuery","getSuggestions","searching","categorySuggestions","productSuggestions","searchCriteria","skip","take","suggestionsLimit","searchCategories","categories","first","$uibModal","templateUrl","resolve","$http","postFeedback","post","model","getTime","placeName","put","delete","clearCart","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","getWishlist","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","component","bindings","validationContainer","editMode","onUpdate","checkoutStep","populateRegionalDataForAddress","findWhere","regions","setAddressRegion","region","undefined","types","$onInit","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","card","$filter","val","bankCardHolderName","ctrls","dropdownCtrl","closeDropdown","hasClass","disabled","$apply","toggle","level","placeholder","required","requiredError","autofocus","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","label","pattern","member","memberComponent","fieldsConfig","getFieldConfig","field","configItem","visible","rolesComponent","showField","disableField","requiredField","elem","$parsers","unshift","isValid","$$parentForm","Password","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","method","accounts","roleService","loader","available","availableRoles","availableRole","getRole","$onChanges","selectRole","role","assigned","autoClose","dropdownToggleCtrl","addClass","openDropdown","moduleName","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","$templateCache","$routeConfig","useAsDefault","accountApi","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","getCompanyMember","companyId","organizations","emails","parent","prev","$q","confirm","when","isLoading","func","accountManager","confirmService","corporateApiErrorHelper","currentMember","addNewAddress","last","components","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirmed","splice","companyMember","handler","clearErrors","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","entries","totalItems","totalCount","securityAccounts","addNewMemberFieldsConfig","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","adminName","adminEmail","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","submitMember","all","addToCart","productAdded","$event","querySelector","orderHelper","orderApi","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","showPayment","preselectedMaymentMethod","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","join","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","getParams","param","substring","decodeURIComponent","registerMemberFieldsConfig","complete","getRegisterInfoByInvite","reject","companyName","register","registerByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","updateUser","getRoles"],"mappings":"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","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('collectionController', ['$scope', '$location', function ($scope, $location) {\r\n    var $ctrl = this;\r\n    $ctrl.sortModes = {\r\n        'manual': 'collections.sorting.featured',\r\n        'best-selling': 'collections.sorting.best_selling',\r\n        'title-ascending': 'collections.sorting.az',\r\n        'title-descending': 'collections.sorting.za',\r\n        'price-ascending': 'collections.sorting.price_ascending',\r\n        'price-descending': 'collections.sorting.price_descending',\r\n        'createddate-descending': 'collections.sorting.date_descending',\r\n        'createddate-ascending': 'collections.sorting.date_ascending'\r\n    };\r\n    $ctrl.view = $location.search().view || 'grid';\r\n    $ctrl.generatePageSizes = function (capacity, steps) {\r\n        // for example            start: 16 stop: 16 * 3 + 1 = 49 step: 16\r\n        $ctrl.pageSize = $location.search().page_size || capacity;\r\n        $ctrl.pageSizes = _.range(capacity, capacity * steps + 1, capacity);\r\n    }\r\n    $ctrl.keyword = $location.search().keyword;\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['$compile', 'marketingService', function ($compile, marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html($compile(response.data)(scope));\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterSource', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        controller: function() { },\r\n        link: function (scope, element, attrs, ctrl) {\r\n            var onKeyPress = function (event) {\r\n                if (event.keyCode === 13) { // Enter\r\n                    ctrl.element[0].click();\r\n                }\r\n            };\r\n            element.on('keypress', onKeyPress);\r\n            scope.$on('$destroy', function () {\r\n                element.off('keypress', onKeyPress);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterTarget', [function () {\r\n    return {\r\n        restrict: \"A\",\r\n        require: \"^vcEnterSource\",\r\n        link: function (scope, element, attrs, ctrl) {\r\n            ctrl.element = element;\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcQuery', ['$parse', '$location', '$httpParamSerializer', function ($parse, $location, $httpParamSerializer) {\r\n    return {\r\n        restrict: \"A\",\r\n        compile: function (tElem, tAttr) {\r\n            if (!tAttr.href && !tAttr.xlinkHref) {\r\n                return function(scope, element, attrs) {\r\n                    // If the linked element is not an anchor tag anymore, do nothing\r\n                    if (element[0].nodeName.toLowerCase() !== 'a') return;\r\n\r\n                    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\r\n                    var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?\r\n                        'xlink:href' : 'href';\r\n                    \r\n                    // get query from current url, replace query parts with specified parts and set href\r\n                    scope.$watch($parse(attrs.vcQuery), function (value) {\r\n                        var query = $location.search();\r\n                        query = angular.extend({}, query, value);\r\n                        var url = new URL($location.absUrl());\r\n                        url.search = $httpParamSerializer(query);\r\n                        element.attr(href, url.href);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('inventoryController', ['dialogService', 'commerceService', function (dialogService, commerceService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.selectFulfillmentCenter = function() {\r\n        dialogService.showDialog(null, 'inventoryController', 'select-fulfillment-center-dialog.tpl');\r\n    };\r\n\r\n    $ctrl.searchFulfillmentCenters = function() {\r\n        commerceService.searchFulfillmentCenters({ searchPhrase: $ctrl.searchPhrase }).then(function(response) {\r\n            $ctrl.fulfillmentCenters = response.data.results;\r\n        });\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    $scope.dialogData = dialogData;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        listService.addLineItem(dialogData.id, $scope.selectedList.name).then(function (response) {\r\n            if (response.data) {\r\n                $scope.inProgress = false;\r\n                $scope.itemAdded = true;\r\n            }\r\n        })\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {        \r\n        $scope.lists = lists;\r\n        angular.forEach($scope.lists, function (list) {\r\n            var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n            var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n            $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                list.title = translations[titleKey];\r\n                list.description = translations[descriptionKey];\r\n            }, function (translationIds) {\r\n                list.title = translationIds[titleKey];\r\n                list.description = translationIds[descriptionKey];\r\n                });\r\n            listService.contains(dialogData.id, list.name).then(function (response) {\r\n                list.contains = response.data.contains;\r\n            });            \r\n        });\r\n      \r\n    };\r\n\r\n\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productListController', ['$scope', '$window', 'pricingService', function ($scope, $window, pricingService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.loaded = false;\r\n    $ctrl.prices = {};\r\n\r\n    pricingService.getActualProductPrices($window.productList).then(function (response) {\r\n        var prices = response.data;\r\n        $ctrl.prices = _.object(_.map(prices, function(price) {\r\n            return [price.productId, price];\r\n        }));\r\n        $ctrl.loaded = !!prices.length;\r\n    });\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService', 'customerService', 'listService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService, customerService, listService) {\r\n    //TODO: prevent add to cart not selected variation\r\n    // display validator please select property\r\n    // display price range\r\n\r\n    var allVariations = [];\r\n  \r\n    $scope.selectedVariation = {};\r\n    $scope.allVariationPropsMap = {};\r\n    $scope.productPrice = null;\r\n    $scope.productPriceLoaded = false;\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        var dialogData = toDialogDataModel(product, quantity);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    // TODO: Replace mock with real function\r\n    $scope.addProductsToCartMock = function () {\r\n        var rejection = {\r\n            data: {\r\n                message: \"The 1 product(s) below was not added to cart:\",\r\n                modelState: {\r\n                    \"Test\": \"Test\"\r\n                }\r\n            }\r\n        };\r\n        var items = [\r\n            {\r\n                id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                price: {\r\n                    actualPrice: {\r\n                        formattedAmount: \"$896.39\"\r\n                    },\r\n                    actualPriceWithTax: {\r\n                        formattedAmount: \"$1,075.67\"\r\n                    },\r\n                    listPrice: {\r\n                        formattedAmount: \"$995.99\"\r\n                    },\r\n                    listPriceWithTax: {\r\n                        formattedAmount: \"$1,195.19\"\r\n                    },\r\n                    extendedPrice: {\r\n                        formattedAmount: \"$1,792.78\"\r\n                    },\r\n                    extendedPriceWithTax: {\r\n                        formattedAmount: \"$2,151.34\"\r\n                    }\r\n                },\r\n                quantity: 2,\r\n                url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n            },\r\n            {\r\n                id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                price: {\r\n                    actualPrice: {\r\n                        formattedAmount: \"$530.99\"\r\n                    },\r\n                    actualPriceWithTax: {\r\n                        formattedAmount: \"$637.19\"\r\n                    },\r\n                    listPrice: {\r\n                        formattedAmount: \"$589.99\"\r\n                    },\r\n                    listPriceWithTax: {\r\n                        formattedAmount: \"$707.99\"\r\n                    },\r\n                    extendedPrice: {\r\n                        formattedAmount: \"$1,592.97\"\r\n                    },\r\n                    extendedPriceWithTax: {\r\n                        formattedAmount: \"$1,911.57\"\r\n                    }\r\n                },\r\n                quantity: 5,\r\n                url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n            }\r\n        ];\r\n        var dialogData = toDialogDataModelMock(items, rejection);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n    }\r\n\r\n    $scope.addProductToCartById = function (productId, quantity, event) {\r\n        event.preventDefault();\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                $scope.addProductToCart(product, quantity);\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.addProductToWishlist = function (product) {\r\n        var dialogData = toDialogDataModel(product, 1);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n    }\r\n\r\n    $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n        var dialogData = toDialogDataModel(product, quantity);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n        quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        });\r\n    }\r\n\r\n    function toDialogDataModel(product, quantity) {\r\n        return { items: [angular.extend({ }, product, { quantity: quantity })] };\r\n        //     return {\r\n        //         id: product.id,\r\n        //         name: product.name,\r\n        //         imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n        //         listPrice: product.price.listPrice,\r\n        //listPriceWithTax: product.price.listPriceWithTax,\r\n        //         placedPrice: product.price.actualPrice,\r\n        //         placedPriceWithTax: product.price.actualPriceWithTax,\r\n        //         quantity: quantity,\r\n        //         updated: false\r\n        //     }\r\n    }\r\n\r\n    function toDialogDataModelMock(items, rejection) {\r\n        var dialogDataModel = {};\r\n        if (rejection) {\r\n            dialogDataModel.errorMessage = rejection.data.message;\r\n            dialogDataModel.errors = rejection.data.modelState;\r\n        }\r\n        dialogDataModel.items = items;\r\n        return dialogDataModel;\r\n    }\r\n\r\n    function initialize() {\r\n        var productIds = _.map($window.products, function (product) { return product.id });\r\n        if (!productIds || !productIds.length) {\r\n            return;\r\n        }\r\n        catalogService.getProduct(productIds).then(function (response) {\r\n            var product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                allVariations = [product].concat(product.variations || []);\r\n                $scope.allVariationPropsMap = getFlatternDistinctPropertiesMap(allVariations);\r\n\r\n            //Auto select initial product as default variation  (its possible because all our products is variations)\r\n            var propertyMap = getVariationPropertyMap(product);\r\n            _.each(_.keys(propertyMap), function (x) {\r\n                $scope.checkProperty(propertyMap[x][0])\r\n            });\r\n            $scope.selectedVariation = product;\r\n            compareProductInLists(product.id);\r\n        });        \r\n    };\r\n\r\n    function getFlatternDistinctPropertiesMap(variations) {\r\n        var retVal = {};\r\n        _.each(variations, function (variation) {\r\n            var propertyMap = getVariationPropertyMap(variation);\r\n            //merge\r\n            _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n            });\r\n        });\r\n        return retVal;\r\n    };\r\n\r\n    function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n    function getSelectedPropsMap(variationPropsMap) {\r\n        var retVal = {};\r\n        _.each(_.keys(variationPropsMap), function (x) {\r\n            var property = _.find(variationPropsMap[x], function (y) {\r\n                return y.selected;\r\n            });\r\n            if (property) {\r\n                retVal[x] = [property];\r\n            }\r\n        });\r\n        return retVal;\r\n        }\r\n\r\n    function comparePropertyMaps(propMap1, propMap2) {\r\n        return _.every(_.keys(propMap1), function (x) {\r\n            var retVal = propMap2.hasOwnProperty(x);\r\n            if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n            }\r\n            return retVal;\r\n        });\r\n    };\r\n\r\n    function findVariationBySelectedProps(variations, selectedPropMap) {\r\n            return _.find(variations, function (x) {\r\n                return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        });\r\n    }\r\n\r\n    function compareProductInLists(productId) {\r\n        $scope.buttonInvalid = true;\r\n        var listNames = [{ title: 'shopping' }, { title: 'wish' }];\r\n        angular.forEach(listNames, function (listName) {\r\n            listService.contains(productId, listName.title).then(function (result) {\r\n                if (result && (result.data.contains == false)) {\r\n                    $scope.buttonInvalid = false;\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n        //Method called from View when user clicks one property value\r\n    $scope.checkProperty = function (property) {\r\n            //Select appropriate property and unselect previous selection\r\n            _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n            x.selected = x != property ? false : !x.selected;\r\n        });\r\n\r\n            //try to find the best variation match for selected properties\r\n            $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n    };  \r\n\r\n    initialize();\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('searchBarController', ['$scope', '$timeout', '$window', 'catalogService', function ($scope, $timeout, $window, catalogService) {\r\n    var timer;\r\n\r\n    $scope.query = $window.searchQuery;\r\n\r\n    $scope.getSuggestions = function () {\r\n        if (!$scope.query) {\r\n            return;\r\n        }\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.searching = true;\r\n            $scope.categorySuggestions = [];\r\n            $scope.productSuggestions = [];\r\n            var searchCriteria = {\r\n                keyword: $scope.query,\r\n                skip: 0,\r\n                take: $window.suggestionsLimit\r\n            }\r\n            catalogService.searchCategories(searchCriteria).then(function (response) {\r\n                var categories = response.data.categories;\r\n                if (categories.length > 5) {\r\n                    searchCriteria.take = $window.suggestionsLimit - 5;\r\n                    $scope.categorySuggestions = _.first(categories, 5);\r\n                } else {\r\n                    searchCriteria.take = $window.suggestionsLimit - categories.length;\r\n                    $scope.categorySuggestions = categories;\r\n                }\r\n                catalogService.search(searchCriteria).then(function (response) {\r\n                    var products = response.data.products;\r\n                    $scope.productSuggestions = products;\r\n                    $scope.searching = false;\r\n                });\r\n            });\r\n        }, 300);\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('commerceService', ['$http', 'apiBaseUrl', function($http, apiBaseUrl) {\r\n    return {\r\n        searchFulfillmentCenters: function (criteria) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/fulfillment/centers/search', { searchCriteria: criteria });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', { products: products });\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', { searchCriteria: criteria });\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', { searchCriteria: criteria });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$http', function ($http) {\r\n    return {\r\n        getWishlist: function (listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '?t=' + new Date().getTime());\r\n        },\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName +'/items/'+ productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n        removeLineItem: function (lineItemId, listName) {\r\n            return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('dropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function() {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function() {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n\r\nstorefrontApp.directive('toggleOnMouseEnter', function() {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            var dropdownToggleCtrl = ctrls[1];\r\n            if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                return;\r\n            }\r\n\r\n            element.addClass('toggle-on-mouse-enter');\r\n\r\n            var openDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(true);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('mouseenter', openDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('mouseenter', openDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<'\r\n\t}\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'storefrontApp', 'satellizer'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/wishlist', name: 'WishList', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"themes/assets/js/account/account-lists.tpl.liquid\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'WishList', component: 'vcAccountLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', function (listService, $rootScope, cartService, $translate, loader, $timeout) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n            $ctrl.selectedList = {};\r\n\r\n            $ctrl.initialize = function (lists) {\r\n                if (lists && lists.length > 0) {\r\n                    $ctrl.lists = lists;\r\n                    $ctrl.selectList(lists[0]);\r\n                    angular.forEach($ctrl.lists, function (list) {\r\n                        var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n                        var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n                        $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                            list.title = translations[titleKey];\r\n                            list.description = translations[descriptionKey];\r\n                        }, function (translationIds) {\r\n                            list.title = translationIds[titleKey];\r\n                            list.description = translationIds[descriptionKey];\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n                loader.wrapLoading(function () {\r\n                    return listService.getWishlist(list.name).then(function (response) {\r\n                        $ctrl.selectedList.items = response.data.items;                     \r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem, list) {  \r\n                loader.wrapLoading(function () {\r\n                    return listService.removeLineItem(lineItem.id, list.name).then(function (response) {\r\n                        $ctrl.selectList(list);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            }\r\n        }]\r\n    });\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, loader) {\r\n\r\n    $scope.loader = loader;\r\n    $scope.memberComponent = null;\r\n    $scope.newMember = null;\r\n\r\n    $scope.registerMemberFieldsConfig = [\r\n        {\r\n            field: 'CompanyName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Email',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'UserName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Password',\r\n            disabled: false,\r\n            visible:  true,\r\n            required: true\r\n        }\r\n    ];\r\n\r\n    function getParams() {\r\n        var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n        for (i in params) {\r\n            if (params.hasOwnProperty(i)) {\r\n                if (params[i] === \"\") continue;\r\n\r\n                param = params[i].split(\"=\");\r\n                result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    $scope.init = function (storeId) {\r\n        $scope.newMember = {};\r\n        $scope.newMember.storeId = storeId;\r\n\r\n        $scope.complete = false;\r\n\r\n        var invite = getParams().invite;\r\n        if (invite) {\r\n            $scope.registerMemberFieldsConfig[0] = {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n            $scope.registerMemberFieldsConfig[1] = {\r\n                field: 'Email',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n\r\n            $scope.newMember.invite = invite;\r\n            $scope.loader.wrapLoading(function() {\r\n                return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                    .then(function(result) {\r\n                        if (result.message) {\r\n                            $scope.error = result.message;\r\n                            return $q.reject(\"Invite is invalid\");\r\n                        }\r\n                        $scope.newMember.companyName = result.companyName;\r\n                        $scope.newMember.email = result.email;\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.register = function () {\r\n        $scope.error = null;\r\n\r\n        if (this.memberComponent.validate()) {\r\n            if ($scope.newMember.invite) {\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerByInvite({ invite: $scope.newMember.invite }, $scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            } else {\r\n                $scope.loader.wrapLoading(function() {\r\n                    return corporateRegisterApi.register($scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { url: apiBaseUrl + 'api/b2b/register', method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);"]}