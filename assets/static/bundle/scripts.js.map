{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/directives.js","../../../assets/js/errors.js","../../../assets/js/filtres.js","../../../assets/js/list.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/product-compare.js","../../../assets/js/product-list.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/searchBar.js","../../../assets/js/services.js","../../../assets/js/theme.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/totals.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-lists.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","console","log","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","split","some","permissionWithScope","constant","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","parse","data","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","protocol","host","parseFloat","get","now","storefrontApp","controller","$scope","cartService","catalogService","getCart","cartIsUpdating","then","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","changeLineItemQuantity","lineItemId","quantity","lineItem","find","$invalid","initialQuantity","cancel","changeLineItemPrice","newPrice","initialItems","removeLineItem","copy","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","outerRedirect","baseUrl","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","criteria","keyword","start","pageSize","search","products","selectSearchedProduct","product","selectedSearchedProduct","addProductToCart","addLineItem","getCartItemsCount","cartItemsCount","$on","$uibModalInstance","dialogData","updated","close","redirect","url","directive","marketingService","restrict","link","scope","element","attrs","getDynamicContent","html","replace","errorHandler","attr","fallbackSrc","off","on","component","templateUrl","bindings","message","errors","filter","input","extention","pop","suffix","listService","$translate","availableLists","selectedList","inProgress","itemAdded","addProductToList","selectList","list","initialize","lists","forEach","titleKey","descriptionKey","translations","description","translationIds","contains","customerService","$watch","currentPath","$$path","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","absUrl","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","getCurrentCustomer","addressId","each","addresses","isContact","memberType","orderService","orderNumber","getOrder","order","authService","toggleVisibilityBasedOnPermission","permissionValue","show","hide","vaPermission","$localStorage","dialogService","formatNumber","number","float","isNaN","isInProductCompareList","productId","p","addProductToCompareList","preventDefault","existingProduct","showDialog","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","toLowerCase","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","pricingService","productListPricesLoaded","productListPrices","getActualProductPrices","productList","prices","productListPricesSize","quoteRequestService","toDialogDataModel","imageUrl","primaryImage","listPrice","price","listPriceWithTax","placedPrice","actualPrice","placedPriceWithTax","actualPriceWithTax","getFlatternDistinctPropertiesMap","variations","retVal","variation","propertyMap","getVariationPropertyMap","keys","union","groupBy","variationProperties","getSelectedPropsMap","variationPropsMap","selected","comparePropertyMaps","propMap1","propMap2","every","findVariationBySelectedProps","selectedPropMap","compareProductInLists","buttonInvalid","listNames","listName","allVariations","selectedVariation","allVariationPropsMap","productPrice","productPriceLoaded","addProductToCartById","addProductToWishlist","addProductToActualQuoteRequest","addProductToQuoteRequest","checkProperty","productIds","concat","getQuoteRequest","quoteRequest","billingAddress","countryCode","getCountryRegions","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","getCountries","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","amount","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","a","submitQuoteRequest","email","isRegisteredUser","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","isString","match","values","getRecommendedProducts","startRecordInteraction","query","searchQuery","getSuggestions","searching","categorySuggestions","productSuggestions","searchCriteria","skip","take","suggestionsLimit","searchCategories","categories","first","$uibModal","resolve","$http","postFeedback","post","model","getTime","placeName","put","delete","clearCart","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","getWishlist","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","mouseOverDropdownSelector","fn","dropdown","Constructor","toggle","dropdownToggle","parents","blur","validationContainer","editMode","onUpdate","require","checkoutStep","populateRegionalDataForAddress","findWhere","ctrl","regions","setAddressRegion","region","undefined","types","$onInit","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","card","$filter","val","bankCardHolderName","placeholder","required","requiredError","autofocus","disabled","$ctrl","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","label","pattern","member","memberComponent","fieldsConfig","getFieldConfig","field","configItem","visible","extend","rolesComponent","showField","disableField","requiredField","elem","$parsers","unshift","isValid","$$parentForm","Password","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","method","accounts","roleService","loader","available","availableRoles","availableRole","getRole","$onChanges","selectRole","role","assigned","moduleName","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","$templateCache","$routeConfig","useAsDefault","accountApi","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","getCompanyMember","companyId","organizations","emails","parent","prev","$q","confirm","when","isLoading","func","accountManager","confirmService","corporateApiErrorHelper","currentMember","addNewAddress","last","components","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirmed","splice","companyMember","handler","clearErrors","getCompanyById","company","updateCompanyInfo","updateCompany","rejection","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","entries","totalItems","totalCount","securityAccounts","addNewMemberFieldsConfig","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","adminName","adminEmail","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","submitMember","all","addToCart","productAdded","$event","keyCode","querySelector","orderHelper","orderApi","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","showPayment","preselectedMaymentMethod","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","join","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","getParams","param","substring","decodeURIComponent","registerMemberFieldsConfig","complete","getRegisterInfoByInvite","reject","companyName","register","registerByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","updateUser","getRoles","errorMessage","modelState"],"mappings":"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","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['marketingService', function (marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html(response.data);\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    $scope.dialogData = dialogData;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        listService.addLineItem(dialogData.id, $scope.selectedList.name).then(function (response) {\r\n            if (response.data) {\r\n                $scope.inProgress = false;\r\n                $scope.itemAdded = true;\r\n            }\r\n        })\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {        \r\n        $scope.lists = lists;\r\n        angular.forEach($scope.lists, function (list) {\r\n            var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n            var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n            $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                list.title = translations[titleKey];\r\n                list.description = translations[descriptionKey];\r\n            }, function (translationIds) {\r\n                list.title = translationIds[titleKey];\r\n                list.description = translationIds[descriptionKey];\r\n                });\r\n            listService.contains(dialogData.id, list.name).then(function (response) {\r\n                list.contains = response.data.contains;\r\n            });            \r\n        });\r\n      \r\n    };\r\n\r\n\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productListController', ['$scope', '$window', 'pricingService', function ($scope, $window, pricingService) {\r\n    $scope.productListPricesLoaded = false;\r\n    $scope.productListPrices = [];\r\n\r\n    pricingService.getActualProductPrices($window.productList).then(function (response) {\r\n        var prices = response.data;\r\n        if (prices.length) {\r\n            for (var i = 0; i < prices.length; i++) {\r\n                $scope.productListPrices[prices[i].productId] = prices[i];\r\n            }\r\n        }\r\n        var productListPricesSize = $scope.getObjectSize($scope.productListPrices);\r\n        $scope.productListPricesLoaded = productListPricesSize > 0;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService', 'customerService', 'listService',\r\n    function ($rootScope, $scope, $window, dialogService, catalogService, cartService, quoteRequestService, customerService, listService) {\r\n    //TODO: prevent add to cart not selected variation\r\n    // display validator please select property\r\n    // display price range\r\n\r\n    var allVariations = [];\r\n  \r\n    $scope.selectedVariation = {};\r\n    $scope.allVariationPropsMap = {};\r\n    $scope.productPrice = null;\r\n    $scope.productPriceLoaded = false;\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        var dialogData = toDialogDataModel(product, quantity);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    $scope.addProductToCartById = function (productId, quantity, event) {\r\n        event.preventDefault();\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                $scope.addProductToCart(product, quantity);\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.addProductToWishlist = function (product) {\r\n        var dialogData = toDialogDataModel(product, 1);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n    }\r\n\r\n    $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n        var dialogData = toDialogDataModel(product, quantity);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n        quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        });\r\n    }\r\n\r\n    function toDialogDataModel(product, quantity) {\r\n        return {\r\n            imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            listPrice: product.price.listPrice,\r\n            id:product.id,\r\n\t\t\tlistPriceWithTax: product.price.listPriceWithTax,\r\n            name: product.name,\r\n            placedPrice: product.price.actualPrice,\r\n            placedPriceWithTax: product.price.actualPriceWithTax,\r\n            quantity: quantity,\r\n            updated: false\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        var productIds = _.map($window.products, function (product) { return product.id });\r\n        if (!productIds || !productIds.length) {\r\n            return;\r\n        }\r\n        catalogService.getProduct(productIds).then(function (response) {\r\n            var product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                allVariations = [product].concat(product.variations || []);\r\n                $scope.allVariationPropsMap = getFlatternDistinctPropertiesMap(allVariations);\r\n\r\n            //Auto select initial product as default variation  (its possible because all our products is variations)\r\n            var propertyMap = getVariationPropertyMap(product);\r\n            _.each(_.keys(propertyMap), function (x) {\r\n                $scope.checkProperty(propertyMap[x][0])\r\n            });\r\n            $scope.selectedVariation = product;\r\n            compareProductInLists(product.id);\r\n        });        \r\n    };\r\n\r\n    function getFlatternDistinctPropertiesMap(variations) {\r\n        var retVal = {};\r\n        _.each(variations, function (variation) {\r\n            var propertyMap = getVariationPropertyMap(variation);\r\n            //merge\r\n            _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n            });\r\n        });\r\n        return retVal;\r\n    };\r\n\r\n    function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n    function getSelectedPropsMap(variationPropsMap) {\r\n        var retVal = {};\r\n        _.each(_.keys(variationPropsMap), function (x) {\r\n            var property = _.find(variationPropsMap[x], function (y) {\r\n                return y.selected;\r\n            });\r\n            if (property) {\r\n                retVal[x] = [property];\r\n            }\r\n        });\r\n        return retVal;\r\n        }\r\n\r\n    function comparePropertyMaps(propMap1, propMap2) {\r\n        return _.every(_.keys(propMap1), function (x) {\r\n            var retVal = propMap2.hasOwnProperty(x);\r\n            if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n            }\r\n            return retVal;\r\n        });\r\n    };\r\n\r\n    function findVariationBySelectedProps(variations, selectedPropMap) {\r\n            return _.find(variations, function (x) {\r\n                return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        });\r\n    }\r\n\r\n    function compareProductInLists(productId) {\r\n        $scope.buttonInvalid = true;\r\n        var listNames = [{ title: 'shopping' }, { title: 'wish' }];\r\n        angular.forEach(listNames, function (listName) {\r\n            listService.contains(productId, listName.title).then(function (result) {\r\n                if (result && (result.data.contains == false)) {\r\n                    $scope.buttonInvalid = false;\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n        //Method called from View when user clicks one property value\r\n    $scope.checkProperty = function (property) {\r\n            //Select appropriate property and unselect previous selection\r\n            _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n            x.selected = x != property ? false : !x.selected;\r\n        });\r\n\r\n            //try to find the best variation match for selected properties\r\n            $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n    };  \r\n\r\n    initialize();\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('searchBarController', ['$scope', '$timeout', '$window', 'catalogService', function ($scope, $timeout, $window, catalogService) {\r\n    var timer;\r\n\r\n    $scope.query = $window.searchQuery;\r\n\r\n    $scope.getSuggestions = function () {\r\n        if (!$scope.query) {\r\n            return;\r\n        }\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.searching = true;\r\n            $scope.categorySuggestions = [];\r\n            $scope.productSuggestions = [];\r\n            var searchCriteria = {\r\n                keyword: $scope.query,\r\n                skip: 0,\r\n                take: $window.suggestionsLimit\r\n            }\r\n            catalogService.searchCategories(searchCriteria).then(function (response) {\r\n                var categories = response.data.categories;\r\n                if (categories.length > 5) {\r\n                    searchCriteria.take = $window.suggestionsLimit - 5;\r\n                    $scope.categorySuggestions = _.first(categories, 5);\r\n                } else {\r\n                    searchCriteria.take = $window.suggestionsLimit - categories.length;\r\n                    $scope.categorySuggestions = categories;\r\n                }\r\n                catalogService.search(searchCriteria).then(function (response) {\r\n                    var products = response.data.products;\r\n                    $scope.productSuggestions = products;\r\n                    $scope.searching = false;\r\n                });\r\n            });\r\n        }, 300);\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', { products: products });\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', { searchCriteria: criteria });\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', { searchCriteria: criteria });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$http', function ($http) {\r\n    return {\r\n        getWishlist: function (listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '?t=' + new Date().getTime());\r\n        },\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName +'/items/'+ productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n        removeLineItem: function (lineItemId, listName) {\r\n            return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);","$(function () {\r\n    // do not close dropdown when element inside it was clicked\r\n    $(document).on('click.bs.dropdown.data-api', '.dropdown-menu', function (e) {\r\n        e.stopPropagation();\r\n    });\r\n    var mouseOverDropdownSelector = '[data-toggle=\"dropdown\"]:not([data-toggle-trigger=\"click\"])';\r\n    // show dropdown when mouse enter to dropdown\r\n    $(document).on('mouseenter.bs.dropdown.data-api', mouseOverDropdownSelector + ':not([aria-expanded=\"true\"])', $.fn.dropdown.Constructor.prototype.toggle);\r\n    $(document).on('mouseleave.bs.dropdown.data-api', '.dropdown', function (e) {\r\n        var dropdownSelector = mouseOverDropdownSelector + ':not([aria-expanded=\"false\"])';\r\n        var dropdownToggle = $(e.target).parents('.dropdown').find(dropdownSelector);\r\n        if (dropdownToggle.length) {\r\n            // hide dropdown menu when mouse leave dropdown or dropdown menu\r\n            $.fn.dropdown.Constructor.prototype.toggle(e);\r\n            // unfocus dropdown: itself or as parent of element fired event\r\n            dropdownToggle.blur();\r\n        }\r\n    });\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<'\r\n\t}\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'storefrontApp', 'satellizer'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/wishlist', name: 'WishList', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"themes/assets/js/account/account-lists.tpl.liquid\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'WishList', component: 'vcAccountLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', function (listService, $rootScope, cartService, $translate, loader, $timeout) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n            $ctrl.selectedList = {};\r\n\r\n            $ctrl.initialize = function (lists) {\r\n                if (lists && lists.length > 0) {\r\n                    $ctrl.lists = lists;\r\n                    $ctrl.selectList(lists[0]);\r\n                    angular.forEach($ctrl.lists, function (list) {\r\n                        var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n                        var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n                        $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                            list.title = translations[titleKey];\r\n                            list.description = translations[descriptionKey];\r\n                        }, function (translationIds) {\r\n                            list.title = translationIds[titleKey];\r\n                            list.description = translationIds[descriptionKey];\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n                loader.wrapLoading(function () {\r\n                    return listService.getWishlist(list.name).then(function (response) {\r\n                        $ctrl.selectedList.items = response.data.items;                     \r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem, list) {  \r\n                loader.wrapLoading(function () {\r\n                    return listService.removeLineItem(lineItem.id, list.name).then(function (response) {\r\n                        $ctrl.selectList(list);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            }\r\n        }]\r\n    });\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, loader) {\r\n\r\n    $scope.loader = loader;\r\n    $scope.memberComponent = null;\r\n    $scope.newMember = null;\r\n\r\n    $scope.registerMemberFieldsConfig = [\r\n        {\r\n            field: 'CompanyName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Email',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'UserName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Password',\r\n            disabled: false,\r\n            visible:  true,\r\n            required: true\r\n        }\r\n    ];\r\n\r\n    function getParams() {\r\n        var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n        for (i in params) {\r\n            if (params.hasOwnProperty(i)) {\r\n                if (params[i] === \"\") continue;\r\n\r\n                param = params[i].split(\"=\");\r\n                result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    $scope.init = function (storeId) {\r\n        $scope.newMember = {};\r\n        $scope.newMember.storeId = storeId;\r\n\r\n        $scope.complete = false;\r\n\r\n        var invite = getParams().invite;\r\n        if (invite) {\r\n            $scope.registerMemberFieldsConfig[0] = {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n            $scope.registerMemberFieldsConfig[1] = {\r\n                field: 'Email',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n\r\n            $scope.newMember.invite = invite;\r\n            $scope.loader.wrapLoading(function() {\r\n                return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                    .then(function(result) {\r\n                        if (result.message) {\r\n                            $scope.error = result.message;\r\n                            return $q.reject(\"Invite is invalid\");\r\n                        }\r\n                        $scope.newMember.companyName = result.companyName;\r\n                        $scope.newMember.email = result.email;\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.register = function () {\r\n        $scope.error = null;\r\n\r\n        if (this.memberComponent.validate()) {\r\n            if ($scope.newMember.invite) {\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerByInvite({ invite: $scope.newMember.invite }, $scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            } else {\r\n                $scope.loader.wrapLoading(function() {\r\n                    return corporateRegisterApi.register($scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { url: apiBaseUrl + 'api/b2b/register', method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);"]}