{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/app/app.js","../../../assets/js/account/account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/searchBar.js","../../../assets/js/checkout/checkout-email.js","../../../assets/js/checkout/checkout-shippingMethods.js","../../../assets/js/checkout/checkout-wizard-step.js","../../../assets/js/checkout/checkout-wizard.js","../../../assets/js/checkout/checkout.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js","../../../assets/js/controllers/price.js","../../../assets/js/controllers/purchase.js","../../../assets/js/directives/dropdown.js","../../../assets/js/directives/dropdownClose.js","../../../assets/js/directives/dropdownTrigger.js","../../../assets/js/directives/includeRaw.js","../../../assets/js/directives/query-source.js","../../../assets/js/directives/query-target.js","../../../assets/js/directives/scope.js","../../../assets/js/services/availability.js","../../../assets/js/services/fulfillmentCenter.js","../../../assets/js/services/loadingIndicator.js","../../../assets/js/services/searchQuery.js","../../../assets/js/components/purchase/coupon.js","../../../assets/js/components/purchase/paymentPlan.js","../../../assets/js/components/purchase/shipmentType.js","../../../assets/js/components/purchase/totals.js","../../../assets/js/controllers/dialogs/universal.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/collection.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/inventory.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/prism.js","../../../assets/js/product-compare.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/services.js","../../../assets/js/toc.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","storefrontAppDependencies","storefrontApp","angular","module","factory","$q","$rootScope","httpErrorInterceptor","responseError","rejection","data","message","$broadcast","method","url","status","statusText","join","stackTrace","reject","requestError","baseUrl","themeInterceptor","request","startsWith","when","$locationProvider","$httpProvider","$translateProvider","wizardConfigProvider","vcRecaptchaServiceProvider","html5Mode","enabled","requireBase","rewriteLinks","interceptors","useSanitizeValueStrategy","useUrlLoader","preferredLanguage","prevString","nextString","submitString","setSiteKey","run","$window","print","moduleName","undefined","$templateCache","apiBaseUrl","put","service","$uibModal","showDialog","dialogData","controller","templateUrl","resolve","component","bindings","customer","$routeConfig","path","useAsDefault","$scope","$timeout","accountApi","mainContext","authService","corporateAccountApi","loader","$ctrl","getQuotes","pageNumber","pageSize","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","getCustomer","updateAddresses","availCountries","getCountries","getCountryRegions","country","changePassword","changePasswordData","$watch","getCompanyMember","id","member","companyId","_","first","organizations","email","emails","fillAuthData","$on","$","parent","prev","find","hide","confirm","require","accountManager","confirmService","$translate","corporateApiErrorHelper","currentMember","addNewAddress","last","components","validate","addresses","newAddress","updateCompanyMember","submit","editIdx","copy","editItem","cancel","edit","$index","delete","text","then","confirmed","splice","companyMember","handler","response","clearErrors","addComponent","removeComponent","without","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","roleService","$location","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","skip","take","entries","results","totalItems","totalCount","available","forEach","role","get","securityAccounts","addNewMemberFieldsConfig","field","disabled","visible","required","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","split","adminName","fullName","adminEmail","callbackUrl","protocol","host","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","$setSubmitted","valid","showActions","refresh","memberNumber","firstName","lastName","fieldsConfig","memberComponent","submitMember","all","set","login","$event","keyCode","element","querySelector","userName","password","orderHelper","orderApi","ctrl","search","order","number","orderNumber","result","isShowPayment","lastPayment","sortBy","inPayments","billingAddress","findWhere","amountToPay","getNewPayment","sum","amount","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","payment","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","code","gatewayCode","some","shipments","hasPhysicalProducts","outerRedirect","absUrl","getInvoicePdf","BASE_URL","showPayment","getAvailPaymentMethods","preselectedMaymentMethod","paymentMethod","extend","isValid","every","bankCardInfo","card","addOrUpdatePayment","processPayment","paymentNumber","orderProcessingResult","isSuccess","error","newPaymentStatus","paymentMethodType","toLowerCase","htmlForm","redirectUrl","isRegisteredUser","cancelPayment","retVal","paidPayments","filter","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","label","passwordChangeData","errors","errorMsg","hasError","oldPassword","newPassword","newPassword2","form","$setPristine","setForm","frm","vcRecaptchaService","populateRegionalDataForAddress","address","countries","code3","countryCode","countryName","regions","setAddressRegion","region","regionId","regionName","stringifyAddress","stringifiedAddress","companyName","city","line1","line2","postalCode","getParams","param","substring","hasOwnProperty","decodeURIComponent","isOrg","registerMemberFieldsConfig","getRegisterInfoByInvite","confirmPassword","registerByInvite","register","registerPersonal","$parent","username","reload","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","getUser","updateUser","getRoles","errorMessage","modelState","closeNotification","validationContainer","editMode","onUpdate","checkoutStep","transclude","header","footer","addressType","types","organization","$onInit","$onDestroy","$valid","$filter","val","bankCardHolderName","$invalid","level","inputClass","placeholder","requiredError","autofocus","pattern","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","items","getFieldConfig","configItem","rolesComponent","showField","disableField","requiredField","directive","link","scope","elem","attr","$parsers","unshift","$$parentForm","Password","onSelectMethod","methods","availPaymentMethods","priority","selectMethod","accounts","availableRoles","map","availableRole","getRole","$onChanges","selectRole","assigned","searching","noResults","query","categoriesLabel","productsLabel","submitLabel","categoryLimit","productLimit","catalogService","hasHint","isOpen","getSuggestions","searchCriteria","keyword","start","searchCategories","process","within","suggestion","concat","index","shipment","getAvailShippingMethods","onSelectShippingMethod","getMethodId","shipmentMethodCode","optionName","availShippingMethods","selectedMethod","loading","availMethods","each","shipmentMethodOption","shippingMethod","wizard","stepDisabled","onNextStep","canEnter","final","addStep","onFinish","onInitialized","rebuildStepsLinkedList","steps","nextStep","prevStep","goToStep","step","isString","currentStep","promise","isFunction","cartService","updatePayment","checkout","reloadCart","handlePostPaymentResult","func","coupon","validateCheckout","paymentGatewayCode","isObject","cart","deliveryAddress","getCart","payments","canCartBeRecurring","isReccuring","paymentPlan","availablePaymentPlans","intervalCount","totalWithTax","getAvailableShippingMethods","getAvailablePaymentMethods","selectShippingMethod","updateShipment","validationErrors","addOrUpdateShipment","createOrder","savePaymentPlan","addOrUpdatePaymentPlan","isRecurringChanged","isRecurring","removePaymentPlan","initialize","listService","customerService","dialogService","$localStorage","selectDefault","lists","default","selected","selectList","isEmpty","getCurrentCustomer","user","selectTab","tabName","selectedList","selectedTab","getOrCreateMyLists","getSharedLists","list","addToCart","lineItem","addLineItem","productId","productAdded","removeList","listName","clearList","removeLineItem","generateLink","sharedLink","substr","lastIndexOf","permission","addToCartAllProducts","item","createList","listSettings","accountLists","listPreSetting","checkLocation","sharedCartId","toString","myLists","addSharedList","selectedVariation","compareProductInLists","buttonInvalid","containsInList","contains","toListsDialogDataModel","product","quantity","updated","addProductToWishlist","signInToProceed","$uibModalInstance","availableLists","imageUrl","primaryImage","createdDate","price","salePrice","inProgress","itemAdded","addProductToList","userId","author","modifiedBy","addItemToList","close","redirect","description","sharedLists","Math","floor","random","getWishlist","setDefault","removeFromFriendsLists","submitSettings","pricingService","getActualProductPrices","products","prices","object","fulfillmentCenterService","loadPaymentPlan","objectType","objectId","paymentPlanType","updatePaymentPlan","shipmentType","shipmentAddress","shipmentFulfillmentCenter","shipmentFulfillmentCenterAddress","toAddress","defaultShippingAddress","updateShipmentType","shipmentTypeInfo","$provide","decorator","$delegate","dropdownScope","appendTo","focusToggleElement","compile","apply","arguments","attrs","dropdownCtrl","autoClose","toggle","closeDropdown","$apply","on","off","ctrls","hasClass","vcDropdownTrigger","dropdownToggleCtrl","addClass","openDropdown","includeFillContentDirective","$element","$attr","Object","keys","includes","template","$parse","$httpParamSerializer","searchQueryService","restrict","tElem","tAttr","setUrl","querySource","switchable","state","deserialize","merge","serialize","URL","vcQuerySource","vcQueryTarget","assign","$animate","multiElement","terminal","$$tlb","$transclude","clone","after","$http","getProductsAvailability","deferredData","defer","expectedArrival","now","availableSince","searchFulfillmentCenters","criteria","post","fulfillmentCenter","stateProvince","phone","daytimePhoneNumber","isLoading","searchParams","pair","done","searchQuery","defaults","deserializeValues","string","deserializePairs","pairString","key","changes","mergeValues","searchQueryValues","changeValues","checkedValues","difference","intersection","mergePairs","searchQueryPairs","changePairs","compact","union","mergedValues","mergedPairs","serializeValues","values","serializePairs","pairs","mapObject","onApplyCoupon","onRemoveCoupon","onChange","change","onFulfillmentCenterSelection","controllerAs","selectFulfillmentCenter","searchPhrase","constant","show","subtotal","taxes","shipping","discount","complete","fieldSuffix","showWithTaxes","fieldNames","subTotal","shippingPrice","shippingTotal","dismiss","$auth","$httpParamSerializerJQLike","$interpolate","changeAuth","authContext","roles","permissions","userLogin","isAuthenticated","userType","isAdministrator","grant_type","headers","Accept","Content-Type","checkPermission","securityScopes","hasPermission","trim","inArray","permissionWithScope","$authProvider","loginUrl","tokenName","tokenPrefix","oauth2","clientId","tokenExpirationName","originalSetToken","setToken","expirationTime","parse","SatellizerStorage","$authStorage","logOut","logout","remove","parseFloat","availabilityService","timer","hasValidationErrors","appliedSuccessfully","errorCode","pluck","availability","setCartForm","formCart","changeLineItemQuantity","lineItemId","cartIsUpdating","initialQuantity","changeLineItemPrice","newPrice","initialItems","recentCartItemModalVisible","clearCart","submitCart","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","selectSearchedProduct","selectedSearchedProduct","addProductToCart","applyCoupon","addCoupon","removeCoupon","getCartItemsCount","cartItemsCount","sortModes","manual","best-selling","title-ascending","title-descending","price-ascending","price-descending","createddate-descending","createddate-ascending","viewQuery","view","generatePageSizes","capacity","pageSizeQuery","page_size","pageSizes","range","keywordQuery","$compile","marketingService","getDynamicContent","html","replace","onKeyPress","click","errorHandler","fallbackSrc","input","extention","pop","suffix","fulfillmentCenters","isFilter","fulfillmentCenterToAddress","currentPath","storefrontNotification","detailsVisible","toggleNotificationDetails","innerRedirect","$$path","getObjectSize","obj","size","addressId","isContact","memberType","orderService","getOrder","toggleVisibilityBasedOnPermission","permissionValue","vaPermission","Prism","languages","markup","insertBefore","script","lookbehind","inside","alias","formatNumber","float","isNaN","isInProductCompareList","p","addProductToCompareList","preventDefault","existingProduct","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","quoteRequestService","toDialogDataModel","toDialogDataModelMock","dialogDataModel","filters","allVariations","variations","filteredVariations","variationPropsKeys","terms","variation","variationProperties","allVariationsMap","getFlatternDistinctPropertiesMap","allVariationPropsMap","pick","filterableVariationPropsMap","propertyMap","getVariationPropertyMap","groupBy","productPrice","productPriceLoaded","addProductsToCartMock","Test","actualPrice","formattedAmount","actualPriceWithTax","listPrice","listPriceWithTax","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToActualQuoteRequest","addProductToQuoteRequest","sendToEmail","productUrl","mailingService","sendProduct","getQuoteRequest","quoteRequest","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","comment","shippingAddress","quoteItemFormModel","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","c","code2","setCountryRegion","countryRegion","r","selectCustomerAddress","a","submitQuoteRequest","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","productIds","match","getRecommendedProducts","startRecordInteraction","postFeedback","model","getTime","placeName","changeLineItemsQuantity","couponCode","shipmentId","plan","cartId","isDefined","listId","currentList","searchedList","currentId","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","Toc","helpers","findOrFilter","$el","selector","$descendants","add","parents","generateEmptyNavEl","getHeadings","depth","topLevel","populateNav","$topContext","$headings","$contexts","lastNav","el","$newNav","generateNavItem","navLevel","getNavLevel","relLevel","$emptyNav","append","createChildNavList","parseOps","opts","jquery","$nav","body","getTopLevel"],"mappings":"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","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","var storefrontAppDependencies = [\r\n    'ngStorage',\r\n    'pascalprecht.translate',\r\n    'ngSanitize',\r\n    'ngAnimate',\r\n    'ui.bootstrap',\r\n    'ngWizard',\r\n    'vcRecaptcha',\r\n    'satellizer',\r\n    'storefrontApp.consts'\r\n];\r\nvar storefrontApp = angular.module('storefrontApp', storefrontAppDependencies);\r\n\r\nstorefrontApp.factory('httpErrorInterceptor', [\r\n    '$q', '$rootScope', function($q, $rootScope) {\r\n        var httpErrorInterceptor = { };\r\n\r\n        httpErrorInterceptor.responseError = function(rejection) {\r\n            if (rejection.data && rejection.data.message) {\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: [rejection.config.method, rejection.config.url, rejection.status, rejection.statusText, rejection.data.message].join(' '),\r\n                    message: rejection.data.stackTrace\r\n                });\r\n            }\r\n            return $q.reject(rejection);\r\n        };\r\n        httpErrorInterceptor.requestError = function(rejection) {\r\n            if (rejection.data && rejection.data.message) {\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: [rejection.config.method, rejection.config.url, rejection.status, rejection.statusText, rejection.data.message].join(' '),\r\n                    message: rejection.data.stackTrace\r\n                });\r\n            }\r\n            return $q.reject(rejection);\r\n        };\r\n\r\n        return httpErrorInterceptor;\r\n    }\r\n]);\r\n\r\nstorefrontApp.factory('themeInterceptor', ['$q', 'baseUrl', function ($q, baseUrl) {\r\n        var themeInterceptor = {};\r\n        \r\n        themeInterceptor.request = function (config) {\r\n            if (config.url.startsWith('storefrontapi') || config.url.startsWith('themes')) {\r\n                config.url = baseUrl + config.url;\r\n            }\r\n            return config || $q.when(config);\r\n        };\r\n\r\n        return themeInterceptor;\r\n    }\r\n]);\r\n\r\nstorefrontApp.config(['$locationProvider', '$httpProvider', 'baseUrl', '$translateProvider', 'wizardConfigProviderProvider', 'vcRecaptchaServiceProvider', function ($locationProvider, $httpProvider, baseUrl, $translateProvider, wizardConfigProvider, vcRecaptchaServiceProvider) {\r\n    $locationProvider.html5Mode({ enabled: true, requireBase: false, rewriteLinks: false });\r\n    $httpProvider.interceptors.push('httpErrorInterceptor');\r\n    $httpProvider.interceptors.push('themeInterceptor');\r\n\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n\r\n    wizardConfigProvider.prevString = 'Back';\r\n    wizardConfigProvider.nextString = 'Continue';\r\n    wizardConfigProvider.submitString = 'Complete';\r\n\r\n    vcRecaptchaServiceProvider.setSiteKey('6LeBhjsUAAAAAM-avRbZPkcbsu9eME8-8Na9_bYD');\r\n}]);\r\n\r\nstorefrontApp.run(['$rootScope', '$window', function($rootScope, $window) {\r\n    $rootScope.print = function() {\r\n        $window.print();\r\n    };\r\n}]);\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'satellizer', 'storefrontApp', 'storefrontApp.consts'])\r\n\r\n.config(['$translateProvider', 'baseUrl', function ($translateProvider, baseUrl) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', 'apiBaseUrl', function ($templateCache, apiBaseUrl) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n.service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}])\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"/assets/static/bundle/account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'storefront.accountApi', 'loadingIndicatorService', 'vcRecaptchaService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, accountApi, loader, vcRecaptchaService) {\r\n        $scope.loader = loader;\r\n        var $ctrl = this;\r\n        $ctrl.countries = accountApi.getCountries();\r\n\r\n        $scope.isOrg = function () {\r\n            return $scope.member.type === 'Business';\r\n        };\r\n\r\n        $scope.$watch('member.address.countryCode', function () {\r\n            if ($scope.member.address.countryCode) {\r\n                populateRegionalDataForAddress($scope.member.address);\r\n                $scope.member.address.name = stringifyAddress($scope.member.address);\r\n            }\r\n        });\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere($ctrl.countries, { code3: address.countryCode });\r\n                if (address.country) {\r\n                    address.countryName = address.country.name;\r\n                    address.countryCode = address.country.code3;\r\n\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        //$ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                        accountApi.getCountryRegions(address.country, function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                address.regionId = address.region.code;\r\n                address.regionName = address.region.name;\r\n            }\r\n            else {\r\n                address.regionId = undefined;\r\n                address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            //var type = _.find($ctrl.types, function (i) { return i.id == $ctrl.address.addressType });\r\n            //if (type)\r\n            //    addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.companyName ? address.companyName + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        //$scope.registerMemberFieldsConfig = [\r\n        //    {\r\n        //        field: 'CompanyName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Email',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'UserName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Password',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    }\r\n        //];\r\n\r\n        function getParams() {\r\n            var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n            for (i in params) {\r\n                if (params.hasOwnProperty(i)) {\r\n                    if (params[i] === \"\") continue;\r\n\r\n                    param = params[i].split(\"=\");\r\n                    result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        $scope.init = function (storeId) {\r\n            $scope.member = { storeId: storeId, type: 'Business', address: {} };\r\n\r\n            var invite = getParams().invite;\r\n            if (invite) {\r\n                $scope.registerMemberFieldsConfig[0] = {\r\n                    field: 'CompanyName',\r\n                    disabled: true,\r\n                    visible: true,\r\n                    required: true\r\n                };\r\n                $scope.registerMemberFieldsConfig[1] = {\r\n                    field: 'Email',\r\n                    disabled: true,\r\n                    visible: true,\r\n                    required: true\r\n                };\r\n\r\n                $scope.member.invite = invite;\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                        .then(function (result) {\r\n                            if (result.message) {\r\n                                $scope.error = result.message;\r\n                                return $q.reject(\"Invite is invalid\");\r\n                            }\r\n                            $scope.member.companyName = result.companyName;\r\n                            $scope.member.email = result.email;\r\n                        });\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            corporateApiErrorHelper.clearErrors($scope);\r\n            $ctrl.error = {};\r\n            var hasError = false;\r\n            var member = $scope.member;\r\n            var errorMsg = member.password.length < 5;\r\n            $ctrl.error.password = errorMsg;\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = member.password !== member.confirmPassword;\r\n                $ctrl.error.confirmPassword = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                if ($scope.member.invite) {\r\n                    $scope.loader.wrapLoading(function () {\r\n                        return corporateRegisterApi.registerByInvite({ invite: $scope.member.invite }, $scope.member, function (result) {\r\n                        }, function (rejection) {\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                } else {\r\n                    $scope.loader.wrapLoading(function () {\r\n                        var apiMethodToCall = $scope.isOrg() ? corporateRegisterApi.register : corporateRegisterApi.registerPersonal;\r\n                        return apiMethodToCall($scope.member, function (result) {\r\n                            $scope.$parent.userName = $scope.member.username;\r\n                            $scope.$parent.password = $scope.member.password\r\n                            $scope.login();\r\n                        }, function (rejection) {\r\n                            vcRecaptchaService.reload();\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' },\r\n        registerPersonal: { url: apiBaseUrl + 'api/b2b/registerPersonal', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    transclude: {\r\n        header: '?addressHeader', footer: '?addressFooter'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        pattern: '@',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcSearchBar', {\r\n    templateUrl: \"themes/assets/js/common-components/searchBar.tpl.html\",\r\n    bindings: {\r\n        placeholder: '<',\r\n        searching: '<',\r\n        noResults: '<',\r\n        query: '@',\r\n        categoriesLabel: '<',\r\n        productsLabel: '<',\r\n        submitLabel: '<',\r\n        categoryLimit: '@',\r\n        productLimit: '@'\r\n    },\r\n    controller: ['$scope', '$q', 'catalogService', function ($scope, $q, catalogService) {\r\n        var $ctrl = this;\r\n        $ctrl.hasHint = false;\r\n\r\n        $scope.$watch('$ctrl.isOpen', function (isOpen) {\r\n            $ctrl.hasHint = !!$ctrl.query && !isOpen;\r\n        });\r\n\r\n        $scope.$watch('$ctrl.query', function(query) {\r\n            $ctrl.hasHint = !!query && !$ctrl.isOpen;\r\n        });\r\n\r\n        $ctrl.getSuggestions = function () {\r\n            var searchCriteria = { keyword: $ctrl.query, start: 0 };\r\n            return $q.all([\r\n                catalogService.searchCategories(angular.extend({ }, searchCriteria, { pageSize: $ctrl.categoryLimit })),\r\n                catalogService.search(angular.extend({ }, searchCriteria, { pageSize: $ctrl.productLimit }))\r\n            ]).then(function(results) {\r\n                var process = function(within) {\r\n                    return (results[0].data[within] || results[1].data[within]).map(function (suggestion) {\r\n                        suggestion['within'] = within;\r\n                        return suggestion;\r\n                    });\r\n                }\r\n                return process('categories').concat(process('products')).map(function (suggestion, index) {\r\n                    suggestion['index'] = index;\r\n                    return suggestion;\r\n                });\r\n            });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutEmail', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-email.tpl.html\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\temail: '='\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\r\n\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t};\r\n\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutShippingMethods', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-shippingMethods.tpl.liquid\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\tshipment: '=',\r\n\t\tgetAvailShippingMethods: '&',\r\n\t\tonSelectShippingMethod: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\r\n\t\tvar ctrl = this;\r\n\t\t\r\n\t\tctrl.availShippingMethods = [];\r\n\t\tctrl.selectedMethod = {};\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t\tctrl.loading = true;\r\n\t\t\tctrl.getAvailShippingMethods(ctrl.shipment).then(function (availMethods) {\r\n\t\t\t\tctrl.availShippingMethods = availMethods;\r\n\t\t\t\t_.each(ctrl.availShippingMethods, function (x) {\r\n\t\t\t\t\tx.id = getMethodId(x);\r\n\t\t\t\t});\r\n\t\t\t\tctrl.selectedMethod = _.find(ctrl.availShippingMethods, function (x) { return ctrl.shipment.shipmentMethodCode == x.shipmentMethodCode && ctrl.shipment.shipmentMethodOption == x.optionName });\r\n\t\t\t\tctrl.loading = false;\r\n\t\t\t});\r\n\t\t};\t\t\r\n\t\t\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\t\t\r\n\t\tfunction getMethodId(method) {\r\n\t\t\tvar retVal = method.shipmentMethodCode;\r\n\t\t\tif (method.optionName) {\r\n\t\t\t\tretVal += ':' + method.optionName;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\t\tctrl.selectMethod = function (method) {\r\n\t\t\tctrl.selectedMethod = method;\r\n\t\t\tctrl.onSelectShippingMethod({ shippingMethod: method });\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizardStep', {\r\n    templateUrl: \"themes/assets/js/checkout/checkout-wizard-step.tpl.html\",\r\n    transclude: true,\r\n    require: {\r\n        wizard: '^vcCheckoutWizard'\r\n    },\r\n    bindings: {\r\n        name: '@',\r\n        title: '@',\r\n        stepDisabled: '=?',\r\n        onNextStep: '&?',\r\n        canEnter: '=?',\r\n        final: '<?'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.components = [];\r\n        ctrl.canEnter = true;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.wizard.addStep(this);\r\n        };\r\n\r\n        ctrl.addComponent = function (component) {\r\n            ctrl.components.push(component);\r\n        };\r\n        ctrl.removeComponent = function (component) {\r\n            ctrl.components = _.without(ctrl.components, component);\r\n        };\r\n        ctrl.validate = function () {\r\n            return _.every(ctrl.components, function (x) { return typeof x.validate !== \"function\" || x.validate(); });\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizard', {\r\n\ttransclude: true,\r\n\ttemplateUrl: 'themes/assets/js/checkout/checkout-wizard.tpl.html',\r\n\tbindings: {\r\n\t\twizard: '=',\r\n\t\tloading: '=',\r\n\t\tonFinish: '&?',\r\n\t\tonInitialized: '&?'\r\n\t},\r\n\tcontroller: ['$scope', function ($scope) {\r\n\t\tvar ctrl = this;\r\n\t\tctrl.wizard = ctrl;\r\n\t\tctrl.steps = [];\t\r\n\t\tctrl.goToStep = function (step) {\r\n\t\t\tif (angular.isString(step))\r\n\t\t\t{\r\n\t\t\t\tstep = _.find(ctrl.steps, function (x) { return x.name == step; });\r\n\t\t\t}\r\n\t\t\tif (step && ctrl.currentStep != step && step.canEnter) {\r\n\t\t\t\tif (!step.final) {\r\n\t\t\t\t\tstep.isActive = true;\r\n\t\t\t\t\tif (ctrl.currentStep) {\r\n\t\t\t\t\t\tctrl.currentStep.isActive = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctrl.currentStep = step;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ctrl.onFinish)\r\n\t\t\t\t{\r\n\t\t\t\t\tctrl.onFinish();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.nextStep = function () {\r\n\t\t\tif (!ctrl.currentStep.validate || ctrl.currentStep.validate()) {\r\n\t\t\t\tif (ctrl.currentStep.nextStep) {\r\n\t\t\t\t\tif (ctrl.currentStep.onNextStep) {\r\n\t\t\t\t\t\t//evaluate onNextStep function\r\n\t\t\t\t\t\tvar promise = ctrl.currentStep.onNextStep();\r\n\t\t\t\t\t\t//For promise function need to delay going to next step\r\n\t\t\t\t\t\tif (promise && angular.isFunction(promise.then)) {\r\n\t\t\t\t\t\t\tpromise.then(function () {\r\n\t\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.prevStep = function () {\r\n\t\t\tctrl.goToStep(ctrl.currentStep.prevStep);\r\n\t\t};\r\n\r\n\t\tfunction rebuildStepsLinkedList(steps) {\r\n\t\t\tvar nextStep = undefined;\r\n\t\t\tfor (var i = steps.length; i-- > 0;) {\r\n\t\t\t\tsteps[i].prevStep = undefined;\r\n\t\t\t\tsteps[i].nextStep = undefined;\r\n\t\t\t\tif (nextStep && !steps[i].disabled) {\r\n\t\t\t\t\tnextStep.prevStep = steps[i]\r\n\t\t\t\t};\t\t\t\t\r\n\t\t\t\tif (!steps[i].disabled) {\r\n\t\t\t\t\tsteps[i].nextStep = nextStep;\r\n\t\t\t\t\tnextStep = steps[i];\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t};\r\n\t\t\r\n\t\tctrl.addStep = function (step) {\r\n\t\t\tctrl.steps.push(step);\r\n\t\t\t$scope.$watch(function () { return step.disabled; }, function () {\r\n\t\t\t\trebuildStepsLinkedList(ctrl.steps);\t\t\t\r\n\t\t\t});\r\n\t\t\trebuildStepsLinkedList(ctrl.steps);\r\n\t\t\tif(!ctrl.currentStep)\r\n\t\t\t{\r\n\t\t\t\tctrl.goToStep(step);\r\n\t\t\t}\r\n\t\t\tif (step.final && ctrl.onInitialized)\r\n\t\t\t{\r\n\t\t\t\tctrl.onInitialized();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}]\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.checkout\";\r\n\r\nif (storefrontAppDependencies != undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['credit-cards', 'angular.filter'])\r\n.controller('checkoutController', ['$rootScope', '$scope', '$window', 'cartService',\r\n    function ($rootScope, $scope, $window, cartService) {\r\n        $scope.checkout = {\r\n            wizard: {},\r\n            paymentMethod: {},\r\n            shipment: {},\r\n            payment: {},\r\n            coupon: {},\r\n            availCountries: [],\r\n            loading: false,\r\n            isValid: false\r\n        };\r\n\r\n        $scope.validateCheckout = function (checkout) {\r\n            checkout.isValid = checkout.payment && checkout.payment.paymentGatewayCode;\r\n            if (checkout.isValid && !checkout.billingAddressEqualsShipping) {\r\n                checkout.isValid = angular.isObject(checkout.payment.billingAddress);\r\n            }\r\n            if (checkout.isValid && checkout.cart && checkout.cart.hasPhysicalProducts) {\r\n                checkout.isValid = angular.isObject(checkout.shipment)\r\n                                && checkout.shipment.shipmentMethodCode\r\n                                && angular.isObject(checkout.shipment.deliveryAddress);\r\n            }\r\n        };\r\n\r\n        $scope.reloadCart = function () {\r\n            return cartService.getCart().then(function (response) {\r\n                var cart = response.data;\r\n                if (!cart || !cart.id) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart');\r\n                }\r\n                else {\r\n                    $scope.checkout.cart = cart;\r\n                    if (cart.payments.length) {\r\n                        $scope.checkout.payment = cart.payments[0];\r\n                        $scope.checkout.paymentMethod.code = $scope.checkout.payment.paymentGatewayCode;\r\n                    }\r\n                    if (cart.shipments.length) {\r\n                        $scope.checkout.shipment = cart.shipments[0];\r\n                    }\r\n                    $scope.checkout.billingAddressEqualsShipping = cart.hasPhysicalProducts && !angular.isObject($scope.checkout.payment.billingAddress);\r\n\r\n                    $scope.checkout.canCartBeRecurring = $scope.customer.isRegisteredUser && _.all(cart.items, function (x) { return !x.isReccuring });\r\n                    $scope.checkout.paymentPlan = cart.paymentPlan && _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: cart.paymentPlan.intervalCount, interval: cart.paymentPlan.interval }) ||\r\n                                                                      _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n                }\r\n                $scope.validateCheckout($scope.checkout);\r\n                return cart;\r\n            });\r\n        };\r\n\r\n        $scope.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($scope.checkout.payment, paymentMethod);\r\n            $scope.checkout.payment.paymentGatewayCode = paymentMethod.code;\r\n            $scope.checkout.payment.amount = angular.copy($scope.checkout.cart.total);\r\n            $scope.checkout.payment.amount.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            updatePayment($scope.checkout.payment);\r\n        };\r\n\r\n        function getAvailCountries() {\r\n            //Load avail countries\r\n            return cartService.getCountries().then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCountryRegions = function (country) {\r\n            return cartService.getCountryRegions(country.code3).then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getAvailShippingMethods = function (shipment) {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailableShippingMethods(shipment.id).then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        }\r\n\r\n        $scope.getAvailPaymentMethods = function () {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailablePaymentMethods().then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.selectShippingMethod = function (shippingMethod) {\r\n            if (shippingMethod) {\r\n                $scope.checkout.shipment.shipmentMethodCode = shippingMethod.shipmentMethodCode;\r\n                $scope.checkout.shipment.shipmentMethodOption = shippingMethod.optionName;\r\n            }\r\n            else {\r\n                $scope.checkout.shipment.shipmentMethodCode = undefined;\r\n                $scope.checkout.shipment.shipmentMethodOption = undefined;\r\n            }\r\n            $scope.updateShipment($scope.checkout.shipment);\r\n        };\r\n\r\n        $scope.updateShipment = function (shipment) {\r\n            if (shipment.deliveryAddress) {\r\n                $scope.checkout.shipment.deliveryAddress.type = 'Shipping';\r\n            };\r\n            //Does not pass validation errors to API\r\n            shipment.validationErrors = undefined;\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdateShipment(shipment).then($scope.reloadCart);\r\n            });\r\n        };\r\n\r\n        $scope.createOrder = function () {\r\n            updatePayment($scope.checkout.payment).then(function () {\r\n                $scope.checkout.loading = true;\r\n                cartService.createOrder($scope.checkout.paymentMethod.card).then(function (response) {\r\n                    var order = response.data.order;\r\n                    var orderProcessingResult = response.data.orderProcessingResult;\r\n                    var paymentMethod = response.data.paymentMethod;\r\n                    handlePostPaymentResult(order, orderProcessingResult, paymentMethod);\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.savePaymentPlan = function () {\r\n            wrapLoading(function () {\r\n                return cartService.addOrUpdatePaymentPlan($scope.checkout.paymentPlan).then(function () {\r\n                    $scope.checkout.cart.paymentPlan = $scope.checkout.paymentPlan;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.isRecurringChanged = function (isRecurring) {\r\n            if ($scope.checkout.paymentPlan) {\r\n                if (isRecurring) {\r\n                    $scope.savePaymentPlan();\r\n                } else {\r\n                    wrapLoading(function () {\r\n                        return cartService.removePaymentPlan().then(function () {\r\n                            $scope.checkout.cart.paymentPlan = undefined;\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        function updatePayment(payment) {\r\n            if ($scope.checkout.billingAddressEqualsShipping) {\r\n                payment.billingAddress = undefined;\r\n            }\r\n\r\n            if (payment.billingAddress) {\r\n                payment.billingAddress.type = 'Billing';\r\n            }\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdatePayment(payment).then($scope.reloadCart);\r\n            });\r\n        }\r\n\r\n        function handlePostPaymentResult(order, orderProcessingResult, paymentMethod) {\r\n            if (!orderProcessingResult.isSuccess) {\r\n                $scope.checkout.loading = false;\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: ['Error in new order processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                    message: orderProcessingResult.error,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'preparedform' && orderProcessingResult.htmlForm) {\r\n                $scope.outerRedirect($scope.baseUrl + 'cart/checkout/paymentform?orderNumber=' + order.number);\r\n            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'redirection' && orderProcessingResult.redirectUrl) {\r\n                $window.location.href = orderProcessingResult.redirectUrl;\r\n            } else {\r\n                if (!$scope.customer.isRegisteredUser) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart/thanks/' + order.number);\r\n                } else {\r\n                    $scope.outerRedirect($scope.baseUrl + 'account#/orders/' + order.number);\r\n                }\r\n            }\r\n        }\r\n\r\n        function wrapLoading(func) {\r\n            $scope.checkout.loading = true;\r\n            return func().then(function (result) {\r\n                $scope.checkout.loading = false;\r\n                return result;\r\n            },\r\n                function () {\r\n                    $scope.checkout.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.initialize = function () {\r\n\r\n            $scope.reloadCart().then(function (cart) {\r\n                $scope.checkout.wizard.goToStep(cart.hasPhysicalProducts ? 'shipping-address' : 'payment-method');\r\n            });\r\n        };\r\n\r\n        getAvailCountries().then(function (countries) {\r\n            $scope.checkout.availCountries = countries;\r\n        });\r\n\r\n    }]);\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('priceController', ['$scope', '$window', 'pricingService', 'loadingIndicatorService', function ($scope, $window, pricingService, loader) {\r\n    $scope.loader = loader;\r\n    loader.wrapLoading(function() {\r\n        return pricingService.getActualProductPrices($window.products).then(function(response) {\r\n            var prices = response.data;\r\n            $scope.prices = _.object(_.map(prices, function(price) {\r\n                return [price.productId, price];\r\n            }));\r\n            $scope.prices.length = response.data.length;\r\n        });\r\n    });\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('purchaseController', ['$scope', '$localStorage', 'storefrontApp.mainContext', 'fulfillmentCenterService', function ($scope, $localStorage, mainContext, fulfillmentCenterService) {\r\n\r\n    $scope.loadPaymentPlan = function(availablePaymentPlans, objectType, objectId) {\r\n        $scope.availablePaymentPlans = availablePaymentPlans;\r\n        $scope.paymentPlan = (($localStorage['paymentPlans'] || { })[objectType] || { })[objectId];\r\n        $scope.paymentPlanType = $scope.paymentPlan ? 'auto-reorder' : 'one-time';\r\n        $scope.paymentPlan = ($scope.paymentPlan ? _.findWhere(availablePaymentPlans, { intervalCount: $scope.paymentPlan.intervalCount, interval: $scope.paymentPlan.interval }) : undefined) ||\r\n            _.findWhere($scope.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n    };\r\n\r\n    $scope.updatePaymentPlan = function(objectType, objectId, paymentPlanType, paymentPlan) {\r\n        if (!$localStorage['paymentPlans']) {\r\n            $localStorage['paymentPlans'] = { };\r\n        }\r\n        if (!$localStorage['paymentPlans'][objectType]) {\r\n            $localStorage['paymentPlans'][objectType] = { };\r\n        }\r\n        $scope.paymentPlanType = paymentPlanType;\r\n        if (paymentPlanType === 'auto-reorder') {\r\n            $localStorage['paymentPlans'][objectType][objectId] = paymentPlan;\r\n            $scope.paymentPlan = paymentPlan;\r\n        } else {\r\n            $localStorage['paymentPlans'][objectType][objectId] = undefined;\r\n            $scope.paymentPlan = undefined;\r\n        }\r\n    };\r\n\r\n    $scope.shipmentType = $localStorage['shipmentType'] || 'shipping';\r\n    $scope.shipmentAddress = $localStorage['shipmentAddress'];\r\n    $scope.shipmentFulfillmentCenter = $localStorage['shipmentFulfillmentCenter'];\r\n    $scope.shipmentFulfillmentCenterAddress = fulfillmentCenterService.toAddress($scope.shipmentFulfillmentCenter);\r\n\r\n    $scope.$watch(\r\n        function () { return mainContext.customer; },\r\n        function (customer) {\r\n            if (customer) {\r\n                if (!$scope.shipmentAddress && customer.defaultShippingAddress) {\r\n                    $scope.shipmentAddress = { postalCode: customer.defaultShippingAddress.postalCode };\r\n                }\r\n            }\r\n        }\r\n    );\r\n\r\n    $scope.updateShipmentType = function(shipmentType, shipmentTypeInfo) {\r\n        $localStorage['shipmentType'] = shipmentType;\r\n        $scope.shipmentType = shipmentType;\r\n        if (shipmentType === 'shipping') {\r\n            $localStorage['shipmentAddress'] = shipmentTypeInfo;\r\n            $scope.shipmentAddress = shipmentTypeInfo;\r\n        } else {\r\n            $localStorage['shipmentFulfillmentCenter'] = shipmentTypeInfo;\r\n            $scope.shipmentFulfillmentCenter = shipmentTypeInfo;\r\n            $scope.shipmentFulfillmentCenterAddress = fulfillmentCenterService.toAddress(shipmentTypeInfo);\r\n        }\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownService', ['$delegate', function($delegate) {\r\n        var service = $delegate;\r\n        var close = service.close;\r\n        service.close = function (dropdownScope, element, appendTo) {\r\n            dropdownScope.focusToggleElement = function() {};\r\n            close(dropdownScope, element, appendTo);\r\n        }\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function () {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcDropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcDropdownTrigger', function () {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            if (attrs.vcDropdownTrigger === 'mouseenter') {\r\n                var dropdownCtrl = ctrls[0];\r\n                var dropdownToggleCtrl = ctrls[1];\r\n                if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                    return;\r\n                }\r\n\r\n                element.addClass('dropdown-trigger-mouseenter');\r\n\r\n                var openDropdown = function() {\r\n                    if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                        scope.$apply(function() {\r\n                            dropdownCtrl.toggle(true);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                element.on('mouseenter', openDropdown);\r\n\r\n                scope.$on('$destroy', function() {\r\n                    element.off('mouseenter', openDropdown);\r\n                });\r\n            }\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\n// based on https://github.com/angular/angular.js/blob/master/src/ng/directive/ngInclude.js\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('ngIncludeDirective', ['$delegate', function ($delegate) {\r\n        var includeFillContentDirective = $delegate[1];\r\n        var link = includeFillContentDirective.link;\r\n        includeFillContentDirective.link = function (scope, $element, $attr, ctrl) {\r\n            if (!Object.keys($attr).includes('raw')) {\r\n                link(scope, $element, $attr, ctrl);\r\n            } else {\r\n                $element.text(ctrl.template);\r\n            }\r\n        };\r\n        includeFillContentDirective.compile = function () {\r\n            return includeFillContentDirective.link;\r\n        };\r\n        $delegate[1] = includeFillContentDirective;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcQuerySource', ['$parse', '$location', '$httpParamSerializer', 'searchQueryService', function ($parse, $location, $httpParamSerializer, searchQueryService) {\r\n    return {\r\n        restrict: \"A\",\r\n        compile: function (tElem, tAttr) {\r\n            if (!tAttr.href) {\r\n                return function (scope, element, attrs) {\r\n                    // If the linked element is not an anchor tag anymore, do nothing\r\n                    if (element[0].nodeName.toLowerCase() !== 'a') return;\r\n\r\n                    // get query from current url, replace query parts with specified parts and set href\r\n                    var setUrl = function (querySource, switchable) {\r\n                        switchable = switchable == 'true';\r\n                        var state = searchQueryService.deserialize(searchQueryService.get(), {});\r\n                        var result = searchQueryService.merge(state, querySource, switchable);\r\n                        var params = searchQueryService.serialize(result, {});\r\n                        var url = new URL($location.absUrl());\r\n                        url.search = $httpParamSerializer(params);\r\n                        element.attr(\"href\", url.href);\r\n                    };\r\n                    scope.$watch(function () {\r\n                        return $parse(attrs.vcQuerySource)(scope);\r\n                    }, function (value) {\r\n                        setUrl(value, attrs.switchable);\r\n                    }, true);\r\n                    scope.$watch(function () {\r\n                        return attrs.switchable;\r\n                    }, function (value) {\r\n                        setUrl($parse(attrs.vcQuerySource)(scope), value);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcQueryTarget', ['$parse', '$location', 'searchQueryService', function ($parse, $location, searchQueryService) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            var vcQueryTarget = $parse(attrs.vcQueryTarget);\r\n            // get requested keys and set ng-model value to value of ?key1=value1&key2=value2\r\n            var state = searchQueryService.deserialize(searchQueryService.get(), vcQueryTarget(scope));\r\n            vcQueryTarget.assign(scope, state);\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcScope', ['$animate', '$compile', function ($animate) {\r\n    return {\r\n        multiElement: true,\r\n        transclude: 'element',\r\n        priority: 600,\r\n        terminal: true,\r\n        restrict: 'A',\r\n        $$tlb: true,\r\n        link: function ($scope, $element, $attr, ctrl, $transclude) {\r\n            $transclude(function (clone) {\r\n                $element.after(clone);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n","storefrontApp.service('availabilityService', ['$http', '$q', 'apiBaseUrl', function ($http, $q, apiBaseUrl) {\r\n    return {\r\n        getProductsAvailability: function (ids) {\r\n            // return $http.post(apiBaseUrl + 'api/availabilty/product', ids);\r\n            // mock\r\n            var deferredData = $q.defer();\r\n            deferredData.resolve({\r\n                data: ids.map(function(id) {\r\n                    return { productId: id, expectedArrival: Date.now(), availableSince: Date.now() };\r\n                })\r\n            });\r\n            return deferredData.promise;\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('fulfillmentCenterService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        searchFulfillmentCenters: function (criteria) {\r\n            return $http.post(apiBaseUrl + 'api/fulfillment/search/centers', criteria);\r\n        },\r\n        toAddress: function (fulfillmentCenter) {\r\n            if (fulfillmentCenter) {\r\n                return {\r\n                    countryName: fulfillmentCenter.countryName,\r\n                    countryCode: fulfillmentCenter.countryCode,\r\n                    regionName: fulfillmentCenter.stateProvince,\r\n                    city: fulfillmentCenter.city,\r\n                    line1: fulfillmentCenter.line1,\r\n                    line2: fulfillmentCenter.line2,\r\n                    postalCode: fulfillmentCenter.postalCode,\r\n                    phone: fulfillmentCenter.daytimePhoneNumber\r\n                };\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('loadingIndicatorService', function() {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function(func) {\r\n            retVal.isLoading = true;\r\n            return func().then(\r\n                function(result) {\r\n                    retVal.isLoading = false;\r\n                    return result;\r\n                },\r\n                function() { retVal.isLoading = false; });\r\n        }\r\n    }\r\n    return retVal;\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('searchQueryService', ['$location', function ($location) {\r\n    return {\r\n        // emulate html5 mode because of bug in Microsoft Edge\r\n        get: function () {\r\n            var result = {};\r\n            var url = new URL($location.absUrl());\r\n            var entries = url.searchParams.entries();\r\n            var pair = entries.next();\r\n            while (!pair.done) {\r\n                result[pair.value[0]] = pair.value[1];\r\n                pair = entries.next();\r\n            }\r\n            return result;\r\n        },\r\n\r\n        // Deserializes search query strings like 'key=value1[,value2]' or 'key=key1:value1[,value2[;key2:value3[,value4]]]'\r\n        deserialize: function (searchQuery, defaults) {\r\n            var deserializeValues = function(string) {\r\n                return string.split(',');\r\n            };\r\n            var deserializePairs = function (string) {\r\n                return _.object(string.split(';').map(function(pairString) {\r\n                    return _.reduce(pairString.split(':'), function (key, value) {\r\n                        return [key, deserializeValues(value)];\r\n                    });\r\n                }));\r\n            };\r\n            searchQuery = searchQuery || {};\r\n            defaults = defaults || {};\r\n            var result = {};\r\n            _.each(Object.keys(searchQuery), (function (key) {\r\n                var string = searchQuery[key];\r\n                if (string) {\r\n                    var deserialize = string.includes(':') ? deserializePairs : deserializeValues;\r\n                    result[key] = deserialize(string);\r\n                }\r\n            }));\r\n            result = _.defaults(result, defaults);\r\n            return result;\r\n        },\r\n\r\n        merge: function (searchQuery, changes, switchable) {\r\n            if (!switchable) {\r\n                return _.extend(searchQuery, changes);\r\n            } else {\r\n                var mergeValues = function (searchQueryValues, changeValues) {\r\n                    var checkedValues = _.difference((searchQueryValues || []).concat(changeValues || []), _.intersection(searchQueryValues, changeValues));\r\n                    return changeValues !== null && checkedValues.length ? checkedValues : null;\r\n                };\r\n                var mergePairs = function (searchQueryPairs, changePairs) {\r\n                    return _.object(_.compact(_.union(Object.keys(searchQueryPairs), Object.keys(changePairs)).map(function (key) {\r\n                        var mergedValues = mergeValues(searchQueryPairs[key], changePairs[key]);\r\n                        return mergedValues !== null ? [key, mergedValues] : null;\r\n                    })));\r\n                };\r\n                return _.object(_.compact(_.union(Object.keys(searchQuery), Object.keys(changes)).map(function (key) {\r\n                    var searchQueryValues = searchQuery[key];\r\n                    var changeValues = changes[key];\r\n                    if (changeValues !== null) {\r\n                        if (searchQueryValues && changeValues && angular.isArray(searchQueryValues) !== angular.isArray(changeValues)) {\r\n                            throw 'Type of ' + key + ' in search query is' + typeof (searchQueryValues[key]) + ' while in changes is' + typeof (changeValues[key]);\r\n                        }\r\n                        if (!angular.isArray(changeValues)) {\r\n                            var mergedPairs = mergePairs(searchQueryValues || [], changeValues || []);\r\n                            return !_.isEmpty(mergedPairs) ? [key, mergedPairs] : null;\r\n                        } else {\r\n                            var mergedValues = mergeValues(searchQueryValues, changeValues);\r\n                            return mergedValues !== null ? [key, mergedValues] : null;\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })));\r\n            }\r\n        },\r\n\r\n        // Serializes search query objects like { view: ['list'], terms: { Color: [\"Black, \"Red\"], Brand: [\"VirtoCommerce\", \"Microsoft\"] } }  to string \r\n        serialize: function (searchQuery, defaults) {\r\n            var serializeValues = function (values) {\r\n                return values.join(',');\r\n            };\r\n            var serializePairs = function (pairs) {\r\n                return _.map(Object.keys(pairs), function(key) {\r\n                    return [key, serializeValues(pairs[key])].join(':');\r\n                }).join(';');\r\n            };\r\n            searchQuery = searchQuery || {};\r\n            defaults = defaults || {};\r\n            var result = _.defaults(searchQuery, defaults);\r\n            return _.mapObject(result, function(values, key) {\r\n                return values !== null ? !angular.isArray(values) ? serializePairs(values) : serializeValues(values) : null;\r\n            });\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCoupon', {\r\n\ttemplateUrl: \"themes/assets/js/components/purchase/coupon.tpl.liquid\",\r\n\tbindings: {\r\n        coupon: '=',\r\n        loader: '=',\r\n\t\tonApplyCoupon: '&',\r\n\t\tonRemoveCoupon: '&'\r\n\t},\r\n\tcontroller: ['loadingIndicatorService', function (loader) {\r\n        var $ctrl = this;\r\n        \r\n\t    $ctrl.loader = loader;\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentPlan', {\r\n    templateUrl: \"themes/assets/js/components/purchase/paymentPlan.tpl.html\",\r\n    bindings: {\r\n        availablePaymentPlans: '<',\r\n        paymentPlanType: '<',\r\n        paymentPlan: '<',\r\n        onChange: '&'\r\n    },\r\n    controller: [function() {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.change = function() {\r\n            $ctrl.onChange({ paymentPlanType: $ctrl.paymentPlanType, paymentPlan: $ctrl.paymentPlan });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcShipmentType', {\r\n    templateUrl: \"themes/assets/js/components/purchase/shipmentType.tpl.html\",\r\n    bindings: {\r\n        ctrl: '=',\r\n        shipmentType: '<',\r\n        shipmentAddress: '<',\r\n        shipmentFulfillmentCenter: '<',\r\n        onFulfillmentCenterSelection: '&',\r\n        onChange: '&'\r\n    },\r\n    transclude: true,\r\n    controllerAs: '$ctrl',\r\n    controller: ['$scope', '$localStorage', 'storefrontApp.mainContext', 'dialogService', function($scope, $localStorage, mainContext, dialogService) {\r\n        var $ctrl = this;\r\n        $ctrl.ctrl = $ctrl;\r\n\r\n        $ctrl.selectFulfillmentCenter = function () {\r\n            var modalInstance = dialogService.showDialog({ searchPhrase: $ctrl.shipmentFulfillmentCenter ? $ctrl.shipmentFulfillmentCenter.postalCode : null }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n            modalInstance.result.then(function(fulfillmentCenter) {\r\n                $ctrl.shipmentFulfillmentCenter = fulfillmentCenter;\r\n                if ($ctrl.onFulfillmentCenterSelection) {\r\n                    $ctrl.onFulfillmentCenterSelection();\r\n                }\r\n            });\r\n        };\r\n        $ctrl.change = function () {\r\n            if ($ctrl.shipmentType === 'shipping' && $ctrl.shipmentAddress || $ctrl.shipmentType === 'pickup' && $ctrl.shipmentFulfillmentCenter) {\r\n                $ctrl.onChange({ shipmentType: $ctrl.shipmentType, shipmentTypeInfo: $ctrl.shipmentType === 'shipping' ? $ctrl.shipmentAddress : $ctrl.shipmentFulfillmentCenter });\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.constant('vcTotalsDefaults', {\r\n    show: {\r\n        subtotal: true,\r\n        taxes: true,\r\n        shipping: true,\r\n        payment: true,\r\n        discount: true\r\n    },\r\n    complete: false\r\n});\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/components/purchase/totals.tpl.liquid\",\r\n\tbindings: {\r\n        order: '<',\r\n        options: '<'\r\n    },\r\n    controller: ['vcTotalsDefaults', function(defaults) {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.options = angular.merge({ }, defaults, $ctrl.options);\r\n\r\n        var fieldSuffix = $ctrl.showWithTaxes ? 'WithTax' : '';\r\n        $ctrl.fieldNames = {\r\n            subTotal: 'subTotal' + fieldSuffix,\r\n            shippingPrice: 'shippingPrice' + fieldSuffix,\r\n            shippingTotal: 'shippingTotal' + fieldSuffix,\r\n            payment: 'paymentPrice' + fieldSuffix,\r\n            discount: 'discountTotal' + fieldSuffix\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n.controller('universalDialogController', ['$scope', '$uibModalInstance', 'dialogData', function ($scope, $uibModalInstance, dialogData) {\r\n    angular.extend($scope, dialogData);\r\n\r\n    $scope.close = function (result) {\r\n        if (result) {\r\n            $uibModalInstance.close(result);\r\n        } else {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n}]);\r\n","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', 'availabilityService', 'loadingIndicatorService', function ($rootScope, $scope, $timeout, cartService, catalogService, availabilityService, loader) {\r\n    var timer;\r\n\r\n    $scope.loader = loader;\r\n    $scope.coupon = {};\r\n\r\n    var reloadCart = $scope.reloadCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.getCart().then(function(response) {\r\n                var cart = response.data;\r\n                cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function(item) { return _.some(item.validationErrors) });\r\n                $scope.cart = cart;\r\n\r\n                var coupon = cart.coupon || $scope.coupon;\r\n                coupon.loader = $scope.coupon.loader;\r\n                $scope.coupon = coupon;\r\n                if ($scope.coupon.code && !$scope.coupon.appliedSuccessfully) {\r\n                    $scope.coupon.errorCode = 'InvalidCouponCode';\r\n                }\r\n\r\n                return availabilityService.getProductsAvailability(_.pluck(cart.items, 'productId')).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.loader.isLoading || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\treloadCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            reloadCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n\r\n    $scope.clearCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.clearCart().then(function() {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        });\r\n    };\r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            reloadCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n    \r\n    $scope.applyCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.addCoupon(coupon.code).then(function() {\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.removeCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.removeCoupon().then(function() {\r\n                $scope.coupon = { loader: $scope.coupon.loader };\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        reloadCart();\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('collectionController', ['$scope', '$location', function ($scope, $location) {\r\n    var $ctrl = this;\r\n    $ctrl.sortModes = {\r\n        'manual': 'collections.sorting.featured',\r\n        'best-selling': 'collections.sorting.best_selling',\r\n        'title-ascending': 'collections.sorting.az',\r\n        'title-descending': 'collections.sorting.za',\r\n        'price-ascending': 'collections.sorting.price_ascending',\r\n        'price-descending': 'collections.sorting.price_descending',\r\n        'createddate-descending': 'collections.sorting.date_descending',\r\n        'createddate-ascending': 'collections.sorting.date_ascending'\r\n    };\r\n    $ctrl.viewQuery = { view: ['grid'] };\r\n    $ctrl.generatePageSizes = function (capacity, steps) {\r\n        $ctrl.pageSizeQuery = { page_size: [capacity] };\r\n        // for example            start: 16 stop: 16 * 3 + 1 = 49 step: 16\r\n        $ctrl.pageSizes = _.range(capacity, capacity * steps + 1, capacity);\r\n    }\r\n    $ctrl.keywordQuery = { keyword: [] };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['$compile', 'marketingService', function ($compile, marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html($compile(response.data)(scope));\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterSource', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        controller: function() { },\r\n        link: function (scope, element, attrs, ctrl) {\r\n            var onKeyPress = function (event) {\r\n                if (event.keyCode === 13) { // Enter\r\n                    ctrl.element[0].click();\r\n                }\r\n            };\r\n            element.on('keypress', onKeyPress);\r\n            scope.$on('$destroy', function () {\r\n                element.off('keypress', onKeyPress);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterTarget', [function () {\r\n    return {\r\n        restrict: \"A\",\r\n        require: \"^vcEnterSource\",\r\n        link: function (scope, element, attrs, ctrl) {\r\n            ctrl.element = element;\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('inventoryController', ['$scope', 'dialogService', 'fulfillmentCenterService', function ($scope, dialogService, fulfillmentCenterService) {\r\n    $scope.searchFulfillmentCenters = function() {\r\n        fulfillmentCenterService.searchFulfillmentCenters({ searchPhrase: $scope.searchPhrase }).then(function(response) {\r\n            $scope.fulfillmentCenters = response.data.results;\r\n        });\r\n    };\r\n\r\n    $scope.selectFulfillmentCenter = function() {\r\n        dialogService.showDialog({ isFilter: true }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n    };\r\n\r\n    $scope.fulfillmentCenterToAddress = function (fulfillmentCenter) {\r\n        return fulfillmentCenterService.toAddress(fulfillmentCenter);\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $rootScope.$on('$locationChangeSuccess', function () {\r\n            var path = $location.path();\r\n            if (path) {\r\n                $scope.currentPath = path.replace('/', '');\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","if (Prism.languages.markup) {\r\n    Prism.languages.insertBefore('markup', 'tag', {\r\n        'script': {\r\n            pattern: /(<script[\\s\\S]*?type=\"text\\/ng-template\"[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\r\n            lookbehind: true,\r\n            inside: Prism.languages.html,\r\n            alias: 'language-html'\r\n        }\r\n    });\r\n}\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService', 'availabilityService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService, availabilityService) {\r\n        //TODO: prevent add to cart not selected variation\r\n        // display validator please select property\r\n        // display price range\r\n\r\n        $scope.allVariations = [];\r\n        $scope.allVariationsMap = {}\r\n        $scope.allVariationPropsMap = {};\r\n        $scope.filterableVariationPropsMap = { };\r\n        $scope.selectedVariation = {};\r\n        $scope.productPrice = null;\r\n        $scope.productPriceLoaded = false;\r\n\r\n        $scope.addProductToCart = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n            cartService.addLineItem(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        }\r\n\r\n        // TODO: Replace mock with real function\r\n        $scope.addProductsToCartMock = function () {\r\n            var rejection = {\r\n                data: {\r\n                    message: \"The 1 product(s) below was not added to cart:\",\r\n                    modelState: {\r\n                        \"Test\": \"Test\"\r\n                    }\r\n                }\r\n            };\r\n            var items = [\r\n                {\r\n                    id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                    name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$896.39\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$1,075.67\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$995.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$1,195.19\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,792.78\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$2,151.34\"\r\n                        }\r\n                    },\r\n                    quantity: 2,\r\n                    url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n                },\r\n                {\r\n                    id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                    name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$530.99\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$637.19\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$589.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$707.99\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,592.97\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$1,911.57\"\r\n                        }\r\n                    },\r\n                    quantity: 5,\r\n                    url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n                }\r\n            ];\r\n            var dialogData = toDialogDataModelMock(items, rejection);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        }\r\n\r\n        $scope.addProductToCartById = function (productId, quantity, event) {\r\n            event.preventDefault();\r\n            catalogService.getProduct([productId]).then(function (response) {\r\n                if (response.data && response.data.length) {\r\n                    var product = response.data[0];\r\n                    $scope.addProductToCart(product, quantity);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n            quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n            });\r\n        }\r\n\r\n        function toDialogDataModel(product, quantity) {\r\n            return { items: [angular.extend({ }, product, { quantity: quantity })] };\r\n            //     return {\r\n            //         id: product.id,\r\n            //         name: product.name,\r\n            //         imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            //         listPrice: product.price.listPrice,\r\n            //listPriceWithTax: product.price.listPriceWithTax,\r\n            //         placedPrice: product.price.actualPrice,\r\n            //         placedPriceWithTax: product.price.actualPriceWithTax,\r\n            //         quantity: quantity,\r\n            //         updated: false\r\n            //     }\r\n        }\r\n\r\n        function toDialogDataModelMock(items, rejection) {\r\n            var dialogDataModel = {};\r\n            if (rejection) {\r\n                dialogDataModel.errorMessage = rejection.data.message;\r\n                dialogDataModel.errors = rejection.data.modelState;\r\n            }\r\n            dialogDataModel.items = items;\r\n            return dialogDataModel;\r\n        }\r\n\r\n        function initialize(filters) {\r\n            var product = $window.product;\r\n            if (!product || !product.id) {\r\n                return;\r\n            }\r\n            catalogService.getProduct([product.id]).then(function (response) {\r\n\t\t\t\tvar product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                var allVariations = [product].concat(product.variations || []);\r\n                var filteredVariations = allVariations;\r\n                $scope.allVariations.length = 0;\r\n                if (filters) {\r\n                    var variationPropsKeys = Object.keys(filters.terms || {});\r\n                    filteredVariations = _.filter(allVariations, function(variation) {\r\n                        return _.all(variation.variationProperties, function(property) {\r\n                            return !variationPropsKeys.includes(property.displayName) || filters.terms[property.displayName].includes(property.value);\r\n                        });\r\n                    });\r\n                }\r\n                Array.prototype.push.apply($scope.allVariations, filteredVariations);\r\n                angular.copy(_.object(filteredVariations.map(function (variation) { return [variation.id, variation]; })), $scope.allVariationsMap);\r\n                angular.copy(getFlatternDistinctPropertiesMap(allVariations), $scope.allVariationPropsMap);\r\n                angular.copy(_.pick($scope.allVariationPropsMap, function (value, key, object) { return value.length > 1; }), $scope.filterableVariationPropsMap);\r\n\r\n                //Auto select initial product as default variation  (its possible because all our products is variations)\r\n                //var propertyMap = getVariationPropertyMap(product);\r\n                //_.each(_.keys(propertyMap), function (x) {\r\n                //    $scope.checkProperty(propertyMap[x][0])\r\n                //});\r\n                $scope.selectedVariation = product;\r\n\r\n                return availabilityService.getProductsAvailability([product.id]).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        };\r\n\r\n        function getFlatternDistinctPropertiesMap(variations) {\r\n            var retVal = {};\r\n            _.each(variations, function (variation) {\r\n                var propertyMap = getVariationPropertyMap(variation);\r\n                //merge\r\n                _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n                });\r\n            });\r\n            return retVal;\r\n        };\r\n\r\n        function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n        function getSelectedPropsMap(variationPropsMap) {\r\n            var retVal = {};\r\n            _.each(_.keys(variationPropsMap), function (x) {\r\n                var property = _.find(variationPropsMap[x], function (y) {\r\n                    return y.selected;\r\n                });\r\n                if (property) {\r\n                    retVal[x] = [property];\r\n                }\r\n            });\r\n            return retVal;\r\n        }\r\n\r\n        function comparePropertyMaps(propMap1, propMap2) {\r\n            return _.every(_.keys(propMap1), function (x) {\r\n                var retVal = propMap2.hasOwnProperty(x);\r\n                if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n                }\r\n                return retVal;\r\n            });\r\n        };\r\n\r\n        //function findVariationBySelectedProps(variations, selectedPropMap) {\r\n        //    return _.find(variations, function (x) {\r\n        //        return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        //    });\r\n        //}\r\n\r\n        ////Method called from View when user clicks one property value\r\n        //$scope.checkProperty = function (property) {\r\n        //    //Select appropriate property and unselect previous selection\r\n        //    _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n        //        x.selected = x != property ? false : !x.selected;\r\n        //    });\r\n\r\n        //    //try to find the best variation match for selected properties\r\n        //    $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n        //};\r\n\r\n        $scope.sendToEmail = function (storeId, productId, productUrl, language) {\r\n            dialogService.showDialog({ storeId: storeId, productId: productId, productUrl: productUrl, language: language }, 'recentlyAddedCartItemDialogController', 'storefront.send-product-to-email.tpl');\r\n        };\r\n\r\n        $scope.$watch('filters', initialize);\r\n    }]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'mailingService', 'dialogData', function ($scope, $window, $uibModalInstance, mailingService, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.dismiss('cancel');\r\n    }\r\n\r\n    $scope.send = function(email) {\r\n        mailingService.sendProduct(dialogData.productId, { email: email, storeId: dialogData.storeId, productUrl: dialogData.productUrl, language: dialogData.language });\r\n        $uibModalInstance.close();\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', products);\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        changeLineItemsQuantity: function(items) {\r\n            return $http.put('storefrontapi/cart/items', items);\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n","(function () {\r\n    window.Toc.helpers.findOrFilter = function($el, selector) {\r\n        var $descendants = $el.find(selector);\r\n        return $el.filter(selector).add($descendants).filter(':not([data-toc-skip])').filter(function () {\r\n            return !$(this).parents(\"[data-toc-skip]\").length;\r\n        });\r\n    };\r\n\r\n    // from https://github.com/afeld/bootstrap-toc/pull/37\r\n    window.Toc.helpers.generateEmptyNavEl = function() {\r\n        var $li = $('<li></li>');\r\n        return $li;\r\n    };\r\n\r\n    window.Toc.helpers.getHeadings = function($scope, depth, topLevel) {\r\n        var selector = '';\r\n        for (var i = topLevel; i < topLevel + depth; i++) {\r\n            selector += 'h' + i;\r\n            if (i < topLevel + depth - 1)\r\n                selector += ',';\r\n        }\r\n        return this.findOrFilter($scope, selector);\r\n    };\r\n\r\n    window.Toc.helpers.populateNav = function($topContext, depth, topLevel, $headings) {\r\n        var $contexts = new Array(depth);\r\n        var helpers = this;\r\n\r\n        $contexts[0] = $topContext;\r\n        $topContext.lastNav = null;\r\n\r\n        $headings.each(function(i, el) {\r\n            var $newNav = helpers.generateNavItem(el);\r\n            var navLevel = helpers.getNavLevel(el);\r\n            var relLevel = navLevel - topLevel;\r\n            var j;\r\n\r\n            for (j = relLevel + 1; j < $contexts.length; j++) {\r\n                $contexts[j] = null;\r\n            }\r\n\r\n            if (!$contexts[relLevel]) {\r\n                for (j = 0; j < relLevel; j++) {\r\n                    if (!$contexts[j + 1]) {\r\n                        if (!$contexts[j].lastNav) {\r\n                            var $emptyNav = helpers.generateEmptyNavEl();\r\n                            $contexts[j].append($emptyNav);\r\n                            $contexts[j].lastNav = $emptyNav;\r\n                        }\r\n                        $contexts[j + 1] = helpers.createChildNavList($contexts[j].lastNav);\r\n                        $contexts[j + 1].lastNav = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $contexts[relLevel].append($newNav);\r\n            $contexts[relLevel].lastNav = $newNav;\r\n        });\r\n    };\r\n\r\n    window.Toc.helpers.parseOps = function(arg) {\r\n        var opts;\r\n        if (arg.jquery) {\r\n            opts = {\r\n                $nav: arg\r\n            };\r\n        } else {\r\n            opts = arg;\r\n        }\r\n        opts.$scope = opts.$scope || $(document.body);\r\n        opts.depth = opts.depth || opts.$nav.attr('data-toc-depth') || 2;\r\n        return opts;\r\n    };\r\n\r\n    window.Toc.init = function(opts) {\r\n        opts = this.helpers.parseOps(opts);\r\n\r\n        // ensure that the data attribute is in place for styling\r\n        opts.$nav.attr('data-toggle', 'toc');\r\n\r\n        var $topContext = this.helpers.createChildNavList(opts.$nav);\r\n        var topLevel = this.helpers.getTopLevel(opts.$scope);\r\n        var $headings = this.helpers.getHeadings(opts.$scope, opts.depth, topLevel);\r\n        this.helpers.populateNav($topContext, opts.depth, topLevel, $headings);\r\n    };\r\n})();\r\n"]}