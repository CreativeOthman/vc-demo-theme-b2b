{"version":3,"sources":["../../../assets/js/app/app.js","../../../assets/js/account/account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/account/role.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/searchBar.js","../../../assets/js/checkout/checkout-email.js","../../../assets/js/checkout/checkout-shippingMethods.js","../../../assets/js/checkout/checkout-wizard-step.js","../../../assets/js/checkout/checkout-wizard.js","../../../assets/js/checkout/checkout.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js","../../../assets/js/controllers/price.js","../../../assets/js/controllers/purchase.js","../../../assets/js/directives/dropdown.js","../../../assets/js/directives/dropdownClose.js","../../../assets/js/directives/dropdownTrigger.js","../../../assets/js/directives/includeRaw.js","../../../assets/js/directives/query-source.js","../../../assets/js/directives/query-target.js","../../../assets/js/directives/scope.js","../../../assets/js/product-compare/add-to-compare-checkbox.js","../../../assets/js/product-compare/product-compare-list-bar.js","../../../assets/js/product-compare/product-compare.js","../../../assets/js/services/availability.js","../../../assets/js/services/fulfillmentCenter.js","../../../assets/js/services/loadingIndicator.js","../../../assets/js/services/searchQuery.js","../../../assets/js/components/purchase/coupon.js","../../../assets/js/components/purchase/paymentPlan.js","../../../assets/js/components/purchase/shipmentType.js","../../../assets/js/components/purchase/totals.js","../../../assets/js/controllers/dialogs/universal.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/collection.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/inventory.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/prism.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/services.js","../../../assets/js/toc.js"],"names":["storefrontAppDependencies","storefrontApp","angular","module","factory","$q","$rootScope","httpErrorInterceptor","responseError","rejection","data","message","$broadcast","type","title","config","method","url","status","statusText","join","stackTrace","reject","requestError","baseUrl","themeInterceptor","request","startsWith","when","$locationProvider","$httpProvider","$translateProvider","wizardConfigProvider","vcRecaptchaServiceProvider","reCaptchaKey","interceptors","push","useSanitizeValueStrategy","useUrlLoader","preferredLanguage","prevString","nextString","submitString","setSiteKey","run","$window","print","moduleName","undefined","$templateCache","apiBaseUrl","put","value","service","$uibModal","showDialog","dialogData","controller","templateUrl","open","resolve","component","bindings","customer","$routeConfig","path","name","useAsDefault","$scope","$timeout","accountApi","mainContext","authService","corporateAccountApi","loader","$ctrl","this","getQuotes","pageNumber","pageSize","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","getCustomer","updateAddresses","availCountries","getCountries","getCountryRegions","country","changePassword","changePasswordData","$watch","getCompanyMember","id","memberType","member","companyId","_","first","organizations","email","emails","fillAuthData","$on","$","parent","prev","find","hide","confirm","window","require","accountManager","confirmService","$translate","corporateApiErrorHelper","currentMember","addNewAddress","last","components","validate","addresses","newAddress","updateCompanyMember","submit","editIdx","copy","editItem","cancel","edit","$index","delete","text","then","confirmed","splice","companyMember","handler","response","clearErrors","addComponent","removeComponent","without","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","roleService","$location","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","skip","take","entries","results","totalItems","totalCount","available","forEach","role","get","securityAccounts","addNewMemberFieldsConfig","field","disabled","visible","required","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","split","adminName","fullName","adminEmail","language","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","$setSubmitted","valid","showActions","refresh","memberNumber","firstName","lastName","fieldsConfig","memberComponent","submitMember","all","set","login","$event","keyCode","element","document","querySelector","userName","password","orderHelper","orderApi","ctrl","search","order","number","orderNumber","result","isShowPayment","lastPayment","sortBy","inPayments","billingAddress","findWhere","amountToPay","getNewPayment","sum","amount","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","payment","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","code","gatewayCode","some","shipments","hasPhysicalProducts","outerRedirect","absUrl","location","href","getInvoicePdf","BASE_URL","showPayment","getAvailPaymentMethods","preselectedMaymentMethod","paymentMethod","extend","isValid","every","x","bankCardInfo","card","addOrUpdatePayment","processPayment","paymentNumber","orderProcessingResult","isSuccess","error","newPaymentStatus","paymentMethodType","toLowerCase","htmlForm","redirectUrl","isRegisteredUser","cancelPayment","retVal","paidPayments","filter","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","label","passwordChangeData","errors","errorMsg","hasError","oldPassword","newPassword","newPassword2","form","$setPristine","setForm","frm","vcRecaptchaService","populateRegionalDataForAddress","address","countries","code3","countryCode","countryName","regions","setAddressRegion","region","regionId","regionName","stringifyAddress","stringifiedAddress","companyName","city","line1","line2","postalCode","getParams","param","i","substring","hasOwnProperty","decodeURIComponent","isOrg","getRegisterInfoByInvite","length","confirmPassword","registerByInvite","register","registerPersonal","$parent","username","reload","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","isArray","getUser","updateUser","getRoles","errorMessage","modelState","closeNotification","$http","availableRoles","_roles","roles","map","realRole","description","replace","accounts","each","availableRole","chain","account","flatten","assigned","assignedRole","where","apply","concat","contains","validationContainer","editMode","onUpdate","checkoutStep","transclude","header","footer","addressType","types","organization","$onInit","$onDestroy","$valid","$filter","val","bankCardHolderName","$invalid","level","inputClass","placeholder","requiredError","autofocus","pattern","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","items","getFieldConfig","configItem","rolesComponent","showField","disableField","requiredField","directive","link","scope","elem","attr","$parsers","unshift","$$parentForm","Password","onSelectMethod","methods","availPaymentMethods","priority","selectMethod","getRole","$onChanges","selectRole","searching","noResults","query","categoriesLabel","productsLabel","submitLabel","categoryLimit","productLimit","catalogService","hasHint","isOpen","getSuggestions","searchCriteria","keyword","start","searchCategories","process","within","suggestion","index","shipment","getAvailShippingMethods","onSelectShippingMethod","getMethodId","shipmentMethodCode","optionName","availShippingMethods","selectedMethod","loading","availMethods","shipmentMethodOption","shippingMethod","wizard","stepDisabled","onNextStep","canEnter","final","addStep","onFinish","onInitialized","rebuildStepsLinkedList","steps","nextStep","prevStep","goToStep","step","isString","currentStep","promise","isFunction","cartService","updatePayment","checkout","reloadCart","handlePostPaymentResult","func","coupon","validateCheckout","paymentGatewayCode","isObject","cart","deliveryAddress","getCart","payments","canCartBeRecurring","isReccuring","paymentPlan","availablePaymentPlans","intervalCount","totalWithTax","getAvailableShippingMethods","getAvailablePaymentMethods","selectShippingMethod","updateShipment","validationErrors","addOrUpdateShipment","createOrder","savePaymentPlan","addOrUpdatePaymentPlan","isRecurringChanged","isRecurring","removePaymentPlan","initialize","listService","customerService","dialogService","$localStorage","selectDefault","lists","default","selected","selectList","isEmpty","getCurrentCustomer","user","selectTab","tabName","selectedList","selectedTab","getOrCreateMyLists","getSharedLists","list","addToCart","lineItem","addLineItem","productId","productAdded","removeList","listName","clearList","removeLineItem","generateLink","sharedLink","substr","lastIndexOf","permission","addToCartAllProducts","item","createList","listSettings","accountLists","listPreSetting","checkLocation","sharedCartId","toString","myLists","addSharedList","selectedVariation","compareProductInLists","buttonInvalid","containsInList","toListsDialogDataModel","product","quantity","updated","addProductToWishlist","signInToProceed","$uibModalInstance","availableLists","imageUrl","primaryImage","createdDate","Date","price","salePrice","inProgress","itemAdded","addProductToList","userId","author","modifiedBy","addItemToList","close","redirect","sharedLists","Math","floor","random","getWishlist","setDefault","removeFromFriendsLists","submitSettings","pricingService","getActualProductPrices","products","prices","object","fulfillmentCenterService","loadPaymentPlan","objectType","objectId","paymentPlanType","updatePaymentPlan","shipmentType","shipmentAddress","shipmentFulfillmentCenter","shipmentFulfillmentCenterAddress","toAddress","defaultShippingAddress","updateShipmentType","shipmentTypeInfo","$provide","decorator","$delegate","dropdownScope","appendTo","focusToggleElement","compile","arguments","attrs","dropdownCtrl","autoClose","toggle","closeDropdown","$apply","on","off","ctrls","hasClass","vcDropdownTrigger","dropdownToggleCtrl","addClass","openDropdown","includeFillContentDirective","$element","$attr","Object","keys","includes","template","$parse","$httpParamSerializer","searchQueryService","restrict","tElem","tAttr","nodeName","setUrl","querySource","switchable","state","deserialize","merge","serialize","URL","vcQuerySource","vcQueryTarget","assign","$animate","multiElement","terminal","$$tlb","$transclude","clone","after","buttonType","customClass","buttonWidth","compareProductService","containProduct","isInProductCompareList","addProductToCompareList","event","preventDefault","getProduct","removeProduct","getProductsCount","addProduct","productsIds","getProductsIds","getProducts","indexOf","showedBody","itemsCount","clearCompareList","clearComapreList","showBody","getProductProperties","modifyProperty","properties","property","valueType","formatNumber","float","parseFloat","isNaN","grouped","propertyDisplayNames","uniq","displayName","props","productProperty","prop","hasValues","onlyDifferences","uniqueValues","p","loaded","getProductsAvailability","deferredData","defer","expectedArrival","now","availableSince","searchFulfillmentCenters","criteria","post","fulfillmentCenter","stateProvince","phone","daytimePhoneNumber","isLoading","searchParams","pair","done","searchQuery","defaults","deserializeValues","string","deserializePairs","pairString","key","changes","mergeValues","searchQueryValues","changeValues","checkedValues","difference","intersection","mergePairs","searchQueryPairs","changePairs","compact","union","mergedValues","mergedPairs","serializeValues","values","serializePairs","pairs","mapObject","onApplyCoupon","onRemoveCoupon","onChange","change","onFulfillmentCenterSelection","controllerAs","selectFulfillmentCenter","searchPhrase","constant","show","subtotal","taxes","shipping","discount","complete","fieldSuffix","showWithTaxes","fieldNames","subTotal","shippingPrice","shippingTotal","dismiss","$auth","$httpParamSerializerJQLike","$interpolate","changeAuth","authContext","permissions","userLogin","isAuthenticated","userType","isAdministrator","grant_type","headers","Accept","Content-Type","checkPermission","securityScopes","hasPermission","trim","inArray","permissionWithScope","$authProvider","loginUrl","tokenName","tokenPrefix","oauth2","clientId","tokenExpirationName","originalSetToken","setToken","expirationTime","parse","SatellizerStorage","$authStorage","logOut","logout","remove","protocol","host","port","availabilityService","timer","hasValidationErrors","appliedSuccessfully","errorCode","pluck","availability","setCartForm","formCart","changeLineItemQuantity","lineItemId","cartIsUpdating","initialQuantity","changeLineItemPrice","newPrice","initialItems","recentCartItemModalVisible","clearCart","submitCart","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","selectSearchedProduct","selectedSearchedProduct","addProductToCart","applyCoupon","addCoupon","removeCoupon","getCartItemsCount","cartItemsCount","sortModes","manual","best-selling","title-ascending","title-descending","price-ascending","price-descending","createddate-descending","createddate-ascending","viewQuery","view","generatePageSizes","capacity","pageSizeQuery","page_size","pageSizes","range","keywordQuery","$compile","marketingService","getDynamicContent","html","onKeyPress","click","errorHandler","fallbackSrc","input","extention","pop","suffix","fulfillmentCenters","isFilter","fulfillmentCenterToAddress","currentPath","storefrontNotification","detailsVisible","toggleNotificationDetails","innerRedirect","$$path","getObjectSize","obj","size","addressId","isContact","orderService","getOrder","toggleVisibilityBasedOnPermission","permissionValue","vaPermission","Prism","languages","markup","insertBefore","script","lookbehind","inside","alias","quoteRequestService","toDialogDataModel","toDialogDataModelMock","dialogDataModel","filters","allVariations","variations","filteredVariations","variationPropsKeys","terms","variation","variationProperties","Array","prototype","allVariationsMap","getFlatternDistinctPropertiesMap","allVariationPropsMap","pick","filterableVariationPropsMap","propertyMap","getVariationPropertyMap","groupBy","productPrice","productPriceLoaded","addProductsToCartMock","Test","actualPrice","formattedAmount","actualPriceWithTax","listPrice","listPriceWithTax","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToActualQuoteRequest","addProductToQuoteRequest","sendToEmail","productUrl","mailingService","send","sendProduct","getQuoteRequest","quoteRequest","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","comment","shippingAddress","quoteItemFormModel","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","c","code2","setCountryRegion","countryRegion","r","selectCustomerAddress","a","submitQuoteRequest","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","productIds","match","getRecommendedProducts","startRecordInteraction","postFeedback","model","getTime","placeName","changeLineItemsQuantity","couponCode","shipmentId","plan","cartId","isDefined","listId","currentList","searchedList","currentId","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","Toc","helpers","findOrFilter","$el","selector","$descendants","add","parents","generateEmptyNavEl","getHeadings","depth","topLevel","populateNav","$topContext","$headings","$contexts","lastNav","el","j","$newNav","generateNavItem","navLevel","getNavLevel","relLevel","$emptyNav","append","createChildNavList","parseOps","arg","opts","jquery","$nav","body","getTopLevel"],"mappings":"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","file":"scripts.js","sourcesContent":["var storefrontAppDependencies = [\r\n    'ngStorage',\r\n    'pascalprecht.translate',\r\n    'ngSanitize',\r\n    'ngAnimate',\r\n    'ui.bootstrap',\r\n    'ngWizard',\r\n    'vcRecaptcha',\r\n    'satellizer',\r\n    'storefrontApp.consts'\r\n];\r\nvar storefrontApp = angular.module('storefrontApp', storefrontAppDependencies);\r\n\r\nstorefrontApp.factory('httpErrorInterceptor', [\r\n    '$q', '$rootScope', function ($q, $rootScope) {\r\n        var httpErrorInterceptor = {};\r\n\r\n        httpErrorInterceptor.responseError = function (rejection) {\r\n            if (rejection.data && rejection.data.message) {\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: [rejection.config.method, rejection.config.url, rejection.status, rejection.statusText, rejection.data.message].join(' '),\r\n                    message: rejection.data.stackTrace\r\n                });\r\n            }\r\n            return $q.reject(rejection);\r\n        };\r\n        httpErrorInterceptor.requestError = function (rejection) {\r\n            if (rejection.data && rejection.data.message) {\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: [rejection.config.method, rejection.config.url, rejection.status, rejection.statusText, rejection.data.message].join(' '),\r\n                    message: rejection.data.stackTrace\r\n                });\r\n            }\r\n            return $q.reject(rejection);\r\n        };\r\n\r\n        return httpErrorInterceptor;\r\n    }\r\n]);\r\n\r\nstorefrontApp.factory('themeInterceptor', ['$q', 'baseUrl', function ($q, baseUrl) {\r\n    var themeInterceptor = {};\r\n\r\n    themeInterceptor.request = function (config) {\r\n        if (config.url.startsWith('storefrontapi') || config.url.startsWith('themes')) {\r\n            config.url = baseUrl + config.url;\r\n        }\r\n        return config || $q.when(config);\r\n    };\r\n\r\n    return themeInterceptor;\r\n}\r\n]);\r\n\r\nstorefrontApp.config(['$locationProvider', '$httpProvider', 'baseUrl', '$translateProvider', 'wizardConfigProviderProvider', 'vcRecaptchaServiceProvider', 'reCaptchaKey', function ($locationProvider, $httpProvider, baseUrl, $translateProvider, wizardConfigProvider, vcRecaptchaServiceProvider, reCaptchaKey) {\r\n    //$locationProvider.html5Mode({ enabled: true, requireBase: false, rewriteLinks: false });\r\n    $httpProvider.interceptors.push('httpErrorInterceptor');\r\n    $httpProvider.interceptors.push('themeInterceptor');\r\n\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n\r\n    wizardConfigProvider.prevString = 'Back';\r\n    wizardConfigProvider.nextString = 'Continue';\r\n    wizardConfigProvider.submitString = 'Complete';\r\n\r\n    vcRecaptchaServiceProvider.setSiteKey(reCaptchaKey);\r\n}]);\r\n\r\nstorefrontApp.run(['$rootScope', '$window', function ($rootScope, $window) {\r\n    $rootScope.print = function () {\r\n        $window.print();\r\n    };\r\n}]);\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'satellizer', 'storefrontApp', 'storefrontApp.consts'])\r\n\r\n    .config(['$translateProvider', 'baseUrl', function ($translateProvider, baseUrl) {\r\n        $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n        $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n        $translateProvider.preferredLanguage('en');\r\n    }])\r\n\r\n    .run(['$templateCache', 'apiBaseUrl', function ($templateCache, apiBaseUrl) {\r\n        // cache application level templates\r\n        $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n    }])\r\n\r\n    .value('$routerRootComponent', 'vcAccountManager')\r\n    .service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n        return {\r\n            showDialog: function (dialogData, controller, templateUrl) {\r\n                var modalInstance = $uibModal.open({\r\n                    controller: controller,\r\n                    templateUrl: templateUrl,\r\n                    resolve: {\r\n                        dialogData: function () {\r\n                            return dialogData;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }])\r\n\r\n    .component('vcAccountManager', {\r\n        templateUrl: \"account-manager.tpl\",\r\n        bindings: {\r\n            baseUrl: '<',\r\n            customer: '<'\r\n        },\r\n        $routeConfig: [\r\n            { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders' },\r\n            { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n            { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n            { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n            { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n            { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n            { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n            { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n            { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n        ],\r\n        controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n\r\n            $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateProfile = function (updateRequest) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateAddresses = function (data) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.availCountries = accountApi.getCountries();\r\n\r\n            $ctrl.getCountryRegions = function (country) {\r\n                return accountApi.getCountryRegions(country).$promise;\r\n            };\r\n\r\n            $ctrl.changePassword = function (changePasswordData) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.changePassword(changePasswordData).$promise;\r\n                });\r\n            };\r\n\r\n            $scope.$watch(function () {\r\n                return mainContext.customer;\r\n            }, function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id, memberType: 'CompanyMember' }, function (member) {\r\n                            customer.companyId = _.first(member.organizations);\r\n                            customer.email = _.first(member.emails);\r\n                        }).$promise;\r\n                    });\r\n                    authService.fillAuthData();\r\n                }\r\n            });\r\n\r\n            $scope.$on('loginStatusChanged', function () {\r\n                $timeout(function () {\r\n                    $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n                });\r\n            });\r\n        }]\r\n    })\r\n\r\n    .service('confirmService', ['$q', function ($q) {\r\n        this.confirm = function (message) {\r\n            return $q.when(window.confirm(message || 'Is it OK?'));\r\n        };\r\n    }])\r\n\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'storefront.accountApi', 'loadingIndicatorService', 'vcRecaptchaService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, accountApi, loader, vcRecaptchaService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.countries = accountApi.getCountries();\r\n\r\n        $scope.isOrg = function () {\r\n            return $scope.member.type === 'Business';\r\n        };\r\n\r\n        $scope.$watch('member.address.countryCode', function () {\r\n            if ($scope.member.address.countryCode) {\r\n                populateRegionalDataForAddress($scope.member.address);\r\n                $scope.member.address.name = stringifyAddress($scope.member.address);\r\n            }\r\n        });\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere($ctrl.countries, { code3: address.countryCode });\r\n                if (address.country) {\r\n                    address.countryName = address.country.name;\r\n                    address.countryCode = address.country.code3;\r\n\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        //$ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                        accountApi.getCountryRegions(address.country, function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                address.regionId = address.region.code;\r\n                address.regionName = address.region.name;\r\n            }\r\n            else {\r\n                address.regionId = undefined;\r\n                address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            //var type = _.find($ctrl.types, function (i) { return i.id == $ctrl.address.addressType });\r\n            //if (type)\r\n            //    addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.companyName ? address.companyName + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        //$scope.registerMemberFieldsConfig = [\r\n        //    {\r\n        //        field: 'CompanyName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Email',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'UserName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Password',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    }\r\n        //];\r\n\r\n        function getParams() {\r\n            var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n            for (i in params) {\r\n                if (params.hasOwnProperty(i)) {\r\n                    if (params[i] === \"\") continue;\r\n\r\n                    param = params[i].split(\"=\");\r\n                    result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        $scope.init = function (storeId) {\r\n            $scope.member = { storeId: storeId, type: 'Business', address: {} };\r\n\r\n            var invite = getParams().invite;\r\n            if (invite) {\r\n                //$scope.registerMemberFieldsConfig[0] = {\r\n                //    field: 'CompanyName',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n                //$scope.registerMemberFieldsConfig[1] = {\r\n                //    field: 'Email',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n\r\n                $scope.member.invite = invite;\r\n                $ctrl.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                        .then(function (result) {\r\n                            if (result.message) {\r\n                                $scope.error = result.message;\r\n                                return $q.reject(\"Invite is invalid\");\r\n                            }\r\n                            $scope.member.companyName = result.companyName;\r\n                            $scope.member.email = result.email;\r\n                        });\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            corporateApiErrorHelper.clearErrors($scope);\r\n            $ctrl.error = {};\r\n            var hasError = false;\r\n            var member = $scope.member;\r\n            var errorMsg = member.password.length < 5;\r\n            $ctrl.error.password = errorMsg;\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = member.password !== member.confirmPassword;\r\n                $ctrl.error.confirmPassword = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                if ($scope.member.invite) {\r\n                    $ctrl.loader.wrapLoading(function () {\r\n                        return corporateRegisterApi.registerByInvite({ invite: $scope.member.invite }, $scope.member, function (result) {\r\n                        }, function (rejection) {\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                } else {\r\n                    $ctrl.loader.wrapLoading(function () {\r\n                        var apiMethodToCall = $scope.isOrg() ? corporateRegisterApi.register : corporateRegisterApi.registerPersonal;\r\n                        return apiMethodToCall($scope.member, function (result) {\r\n                            $scope.$parent.userName = $scope.member.username;\r\n                            $scope.$parent.password = $scope.member.password\r\n                            $scope.login();\r\n                        }, function (rejection) {\r\n                            vcRecaptchaService.reload();\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' },\r\n        registerPersonal: { url: apiBaseUrl + 'api/b2b/registerPersonal', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","angular.module('storefront.account')\r\n.factory('roleService', ['$q', '$http', 'storefront.corporateAccountApi', 'availableRoles', function ($q, $http, corporateAccountApi, availableRoles) {\r\n    var service = {\r\n        available: null,\r\n        get: null,\r\n        set: null\r\n    };\r\n\r\n    // get all available roles from settings\r\n    service._roles = availableRoles;\r\n    corporateAccountApi.getRoles(function (roles) {\r\n        service.available = _.map(service._roles, function(role) {\r\n            var realRole = _.findWhere(roles, { name: role });\r\n            return angular.extend({}, realRole, { description: 'customer.roles.descriptions.' + role.toLowerCase().replace(\" \", \"_\") });\r\n        });\r\n    });\r\n\r\n    service.get = function(accounts){\r\n        var availableRoles = angular.copy(service.available);\r\n        _.each(availableRoles, function(availableRole) {            \r\n            // role is assigned to member if any of member's security accounts has this role assigned\r\n            var roles = _.chain(accounts).map(function(account) { return account.roles; }).flatten().value();\r\n            availableRole.assigned = _.some(roles,\r\n            function(assignedRole) {\r\n                return availableRole.name === assignedRole.name;\r\n            });\r\n        });\r\n        // if multiple roles assigned, return the role with minimal privilidges\r\n        return _.last(_.where(availableRoles, { assigned: true }));\r\n    };\r\n\r\n    service.set = function(accounts, role) {\r\n        // assign current role to all member's security accounts\r\n        return $q.all(_.map(accounts, function(account) {\r\n            account.roles = _.without.apply(_, [account.roles].concat(_.filter(account.roles, function(role) { return _.contains(service._roles, role.name); })));\r\n            account.roles.push(role);\r\n            return corporateAccountApi.updateUser(account).$promise;\r\n        }));\r\n    };\r\n\r\n    return service;\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    transclude: {\r\n        header: '?addressHeader', footer: '?addressFooter'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        pattern: '@',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcSearchBar', {\r\n    templateUrl: \"themes/assets/js/common-components/searchBar.tpl.html\",\r\n    bindings: {\r\n        placeholder: '<',\r\n        searching: '<',\r\n        noResults: '<',\r\n        query: '@',\r\n        categoriesLabel: '<',\r\n        productsLabel: '<',\r\n        submitLabel: '<',\r\n        categoryLimit: '@',\r\n        productLimit: '@'\r\n    },\r\n    controller: ['$scope', '$q', 'catalogService', function ($scope, $q, catalogService) {\r\n        var $ctrl = this;\r\n        $ctrl.hasHint = false;\r\n\r\n        $scope.$watch('$ctrl.isOpen', function (isOpen) {\r\n            $ctrl.hasHint = !!$ctrl.query && !isOpen;\r\n        });\r\n\r\n        $scope.$watch('$ctrl.query', function(query) {\r\n            $ctrl.hasHint = !!query && !$ctrl.isOpen;\r\n        });\r\n\r\n        $ctrl.getSuggestions = function () {\r\n            var searchCriteria = { keyword: $ctrl.query, start: 0 };\r\n            return $q.all([\r\n                catalogService.searchCategories(angular.extend({ }, searchCriteria, { pageSize: $ctrl.categoryLimit })),\r\n                catalogService.search(angular.extend({ }, searchCriteria, { pageSize: $ctrl.productLimit }))\r\n            ]).then(function(results) {\r\n                var process = function(within) {\r\n                    return (results[0].data[within] || results[1].data[within]).map(function (suggestion) {\r\n                        suggestion['within'] = within;\r\n                        return suggestion;\r\n                    });\r\n                }\r\n                return process('categories').concat(process('products')).map(function (suggestion, index) {\r\n                    suggestion['index'] = index;\r\n                    return suggestion;\r\n                });\r\n            });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutEmail', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-email.tpl.html\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\temail: '='\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\r\n\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t};\r\n\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutShippingMethods', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-shippingMethods.tpl.liquid\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\tshipment: '=',\r\n\t\tgetAvailShippingMethods: '&',\r\n\t\tonSelectShippingMethod: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\r\n\t\tvar ctrl = this;\r\n\t\t\r\n\t\tctrl.availShippingMethods = [];\r\n\t\tctrl.selectedMethod = {};\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t\tctrl.loading = true;\r\n\t\t\tctrl.getAvailShippingMethods(ctrl.shipment).then(function (availMethods) {\r\n\t\t\t\tctrl.availShippingMethods = availMethods;\r\n\t\t\t\t_.each(ctrl.availShippingMethods, function (x) {\r\n\t\t\t\t\tx.id = getMethodId(x);\r\n\t\t\t\t});\r\n\t\t\t\tctrl.selectedMethod = _.find(ctrl.availShippingMethods, function (x) { return ctrl.shipment.shipmentMethodCode == x.shipmentMethodCode && ctrl.shipment.shipmentMethodOption == x.optionName });\r\n\t\t\t\tctrl.loading = false;\r\n\t\t\t});\r\n\t\t};\t\t\r\n\t\t\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\t\t\r\n\t\tfunction getMethodId(method) {\r\n\t\t\tvar retVal = method.shipmentMethodCode;\r\n\t\t\tif (method.optionName) {\r\n\t\t\t\tretVal += ':' + method.optionName;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\t\tctrl.selectMethod = function (method) {\r\n\t\t\tctrl.selectedMethod = method;\r\n\t\t\tctrl.onSelectShippingMethod({ shippingMethod: method });\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizardStep', {\r\n    templateUrl: \"themes/assets/js/checkout/checkout-wizard-step.tpl.html\",\r\n    transclude: true,\r\n    require: {\r\n        wizard: '^vcCheckoutWizard'\r\n    },\r\n    bindings: {\r\n        name: '@',\r\n        title: '@',\r\n        stepDisabled: '=?',\r\n        onNextStep: '&?',\r\n        canEnter: '=?',\r\n        final: '<?'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.components = [];\r\n        ctrl.canEnter = true;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.wizard.addStep(this);\r\n        };\r\n\r\n        ctrl.addComponent = function (component) {\r\n            ctrl.components.push(component);\r\n        };\r\n        ctrl.removeComponent = function (component) {\r\n            ctrl.components = _.without(ctrl.components, component);\r\n        };\r\n        ctrl.validate = function () {\r\n            return _.every(ctrl.components, function (x) { return typeof x.validate !== \"function\" || x.validate(); });\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizard', {\r\n\ttransclude: true,\r\n\ttemplateUrl: 'themes/assets/js/checkout/checkout-wizard.tpl.html',\r\n\tbindings: {\r\n\t\twizard: '=',\r\n\t\tloading: '=',\r\n\t\tonFinish: '&?',\r\n\t\tonInitialized: '&?'\r\n\t},\r\n\tcontroller: ['$scope', function ($scope) {\r\n\t\tvar ctrl = this;\r\n\t\tctrl.wizard = ctrl;\r\n\t\tctrl.steps = [];\t\r\n\t\tctrl.goToStep = function (step) {\r\n\t\t\tif (angular.isString(step))\r\n\t\t\t{\r\n\t\t\t\tstep = _.find(ctrl.steps, function (x) { return x.name == step; });\r\n\t\t\t}\r\n\t\t\tif (step && ctrl.currentStep != step && step.canEnter) {\r\n\t\t\t\tif (!step.final) {\r\n\t\t\t\t\tstep.isActive = true;\r\n\t\t\t\t\tif (ctrl.currentStep) {\r\n\t\t\t\t\t\tctrl.currentStep.isActive = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctrl.currentStep = step;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ctrl.onFinish)\r\n\t\t\t\t{\r\n\t\t\t\t\tctrl.onFinish();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.nextStep = function () {\r\n\t\t\tif (!ctrl.currentStep.validate || ctrl.currentStep.validate()) {\r\n\t\t\t\tif (ctrl.currentStep.nextStep) {\r\n\t\t\t\t\tif (ctrl.currentStep.onNextStep) {\r\n\t\t\t\t\t\t//evaluate onNextStep function\r\n\t\t\t\t\t\tvar promise = ctrl.currentStep.onNextStep();\r\n\t\t\t\t\t\t//For promise function need to delay going to next step\r\n\t\t\t\t\t\tif (promise && angular.isFunction(promise.then)) {\r\n\t\t\t\t\t\t\tpromise.then(function () {\r\n\t\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.prevStep = function () {\r\n\t\t\tctrl.goToStep(ctrl.currentStep.prevStep);\r\n\t\t};\r\n\r\n\t\tfunction rebuildStepsLinkedList(steps) {\r\n\t\t\tvar nextStep = undefined;\r\n\t\t\tfor (var i = steps.length; i-- > 0;) {\r\n\t\t\t\tsteps[i].prevStep = undefined;\r\n\t\t\t\tsteps[i].nextStep = undefined;\r\n\t\t\t\tif (nextStep && !steps[i].disabled) {\r\n\t\t\t\t\tnextStep.prevStep = steps[i]\r\n\t\t\t\t};\t\t\t\t\r\n\t\t\t\tif (!steps[i].disabled) {\r\n\t\t\t\t\tsteps[i].nextStep = nextStep;\r\n\t\t\t\t\tnextStep = steps[i];\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t};\r\n\t\t\r\n\t\tctrl.addStep = function (step) {\r\n\t\t\tctrl.steps.push(step);\r\n\t\t\t$scope.$watch(function () { return step.disabled; }, function () {\r\n\t\t\t\trebuildStepsLinkedList(ctrl.steps);\t\t\t\r\n\t\t\t});\r\n\t\t\trebuildStepsLinkedList(ctrl.steps);\r\n\t\t\tif(!ctrl.currentStep)\r\n\t\t\t{\r\n\t\t\t\tctrl.goToStep(step);\r\n\t\t\t}\r\n\t\t\tif (step.final && ctrl.onInitialized)\r\n\t\t\t{\r\n\t\t\t\tctrl.onInitialized();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}]\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.checkout\";\r\n\r\nif (storefrontAppDependencies != undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['credit-cards', 'angular.filter'])\r\n.controller('checkoutController', ['$rootScope', '$scope', '$window', 'cartService',\r\n    function ($rootScope, $scope, $window, cartService) {\r\n        $scope.checkout = {\r\n            wizard: {},\r\n            paymentMethod: {},\r\n            shipment: {},\r\n            payment: {},\r\n            coupon: {},\r\n            availCountries: [],\r\n            loading: false,\r\n            isValid: false\r\n        };\r\n\r\n        $scope.validateCheckout = function (checkout) {\r\n            checkout.isValid = checkout.payment && checkout.payment.paymentGatewayCode;\r\n            if (checkout.isValid && !checkout.billingAddressEqualsShipping) {\r\n                checkout.isValid = angular.isObject(checkout.payment.billingAddress);\r\n            }\r\n            if (checkout.isValid && checkout.cart && checkout.cart.hasPhysicalProducts) {\r\n                checkout.isValid = angular.isObject(checkout.shipment)\r\n                                && checkout.shipment.shipmentMethodCode\r\n                                && angular.isObject(checkout.shipment.deliveryAddress);\r\n            }\r\n        };\r\n\r\n        $scope.reloadCart = function () {\r\n            return cartService.getCart().then(function (response) {\r\n                var cart = response.data;\r\n                if (!cart || !cart.id) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart');\r\n                }\r\n                else {\r\n                    $scope.checkout.cart = cart;\r\n                    if (cart.payments.length) {\r\n                        $scope.checkout.payment = cart.payments[0];\r\n                        $scope.checkout.paymentMethod.code = $scope.checkout.payment.paymentGatewayCode;\r\n                    }\r\n                    if (cart.shipments.length) {\r\n                        $scope.checkout.shipment = cart.shipments[0];\r\n                    }\r\n                    $scope.checkout.billingAddressEqualsShipping = cart.hasPhysicalProducts && !angular.isObject($scope.checkout.payment.billingAddress);\r\n\r\n                    $scope.checkout.canCartBeRecurring = $scope.customer.isRegisteredUser && _.all(cart.items, function (x) { return !x.isReccuring });\r\n                    $scope.checkout.paymentPlan = cart.paymentPlan && _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: cart.paymentPlan.intervalCount, interval: cart.paymentPlan.interval }) ||\r\n                                                                      _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n                }\r\n                $scope.validateCheckout($scope.checkout);\r\n                return cart;\r\n            });\r\n        };\r\n\r\n        $scope.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($scope.checkout.payment, paymentMethod);\r\n            $scope.checkout.payment.paymentGatewayCode = paymentMethod.code;\r\n            $scope.checkout.payment.amount = angular.copy($scope.checkout.cart.total);\r\n            $scope.checkout.payment.amount.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            updatePayment($scope.checkout.payment);\r\n        };\r\n\r\n        function getAvailCountries() {\r\n            //Load avail countries\r\n            return cartService.getCountries().then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCountryRegions = function (country) {\r\n            return cartService.getCountryRegions(country.code3).then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getAvailShippingMethods = function (shipment) {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailableShippingMethods(shipment.id).then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        }\r\n\r\n        $scope.getAvailPaymentMethods = function () {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailablePaymentMethods().then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.selectShippingMethod = function (shippingMethod) {\r\n            if (shippingMethod) {\r\n                $scope.checkout.shipment.shipmentMethodCode = shippingMethod.shipmentMethodCode;\r\n                $scope.checkout.shipment.shipmentMethodOption = shippingMethod.optionName;\r\n            }\r\n            else {\r\n                $scope.checkout.shipment.shipmentMethodCode = undefined;\r\n                $scope.checkout.shipment.shipmentMethodOption = undefined;\r\n            }\r\n            $scope.updateShipment($scope.checkout.shipment);\r\n        };\r\n\r\n        $scope.updateShipment = function (shipment) {\r\n            if (shipment.deliveryAddress) {\r\n                $scope.checkout.shipment.deliveryAddress.type = 'Shipping';\r\n            };\r\n            //Does not pass validation errors to API\r\n            shipment.validationErrors = undefined;\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdateShipment(shipment).then($scope.reloadCart);\r\n            });\r\n        };\r\n\r\n        $scope.createOrder = function () {\r\n            updatePayment($scope.checkout.payment).then(function () {\r\n                $scope.checkout.loading = true;\r\n                cartService.createOrder($scope.checkout.paymentMethod.card).then(function (response) {\r\n                    var order = response.data.order;\r\n                    var orderProcessingResult = response.data.orderProcessingResult;\r\n                    var paymentMethod = response.data.paymentMethod;\r\n                    handlePostPaymentResult(order, orderProcessingResult, paymentMethod);\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.savePaymentPlan = function () {\r\n            wrapLoading(function () {\r\n                return cartService.addOrUpdatePaymentPlan($scope.checkout.paymentPlan).then(function () {\r\n                    $scope.checkout.cart.paymentPlan = $scope.checkout.paymentPlan;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.isRecurringChanged = function (isRecurring) {\r\n            if ($scope.checkout.paymentPlan) {\r\n                if (isRecurring) {\r\n                    $scope.savePaymentPlan();\r\n                } else {\r\n                    wrapLoading(function () {\r\n                        return cartService.removePaymentPlan().then(function () {\r\n                            $scope.checkout.cart.paymentPlan = undefined;\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        function updatePayment(payment) {\r\n            if ($scope.checkout.billingAddressEqualsShipping) {\r\n                payment.billingAddress = undefined;\r\n            }\r\n\r\n            if (payment.billingAddress) {\r\n                payment.billingAddress.type = 'Billing';\r\n            }\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdatePayment(payment).then($scope.reloadCart);\r\n            });\r\n        }\r\n\r\n        function handlePostPaymentResult(order, orderProcessingResult, paymentMethod) {\r\n            if (!orderProcessingResult.isSuccess) {\r\n                $scope.checkout.loading = false;\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: ['Error in new order processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                    message: orderProcessingResult.error,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'preparedform' && orderProcessingResult.htmlForm) {\r\n                $scope.outerRedirect($scope.baseUrl + 'cart/checkout/paymentform?orderNumber=' + order.number);\r\n            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'redirection' && orderProcessingResult.redirectUrl) {\r\n                $window.location.href = orderProcessingResult.redirectUrl;\r\n            } else {\r\n                if (!$scope.customer.isRegisteredUser) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart/thanks/' + order.number);\r\n                } else {\r\n                    $scope.outerRedirect($scope.baseUrl + 'account#/orders/' + order.number);\r\n                }\r\n            }\r\n        }\r\n\r\n        function wrapLoading(func) {\r\n            $scope.checkout.loading = true;\r\n            return func().then(function (result) {\r\n                $scope.checkout.loading = false;\r\n                return result;\r\n            },\r\n                function () {\r\n                    $scope.checkout.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.initialize = function () {\r\n\r\n            $scope.reloadCart().then(function (cart) {\r\n                $scope.checkout.wizard.goToStep(cart.hasPhysicalProducts ? 'shipping-address' : 'payment-method');\r\n            });\r\n        };\r\n\r\n        getAvailCountries().then(function (countries) {\r\n            $scope.checkout.availCountries = countries;\r\n        });\r\n\r\n    }]);\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('priceController', ['$scope', '$window', 'pricingService', 'loadingIndicatorService', function ($scope, $window, pricingService, loader) {\r\n    $scope.loader = loader;\r\n    loader.wrapLoading(function() {\r\n        return pricingService.getActualProductPrices($window.products).then(function(response) {\r\n            var prices = response.data;\r\n            $scope.prices = _.object(_.map(prices, function(price) {\r\n                return [price.productId, price];\r\n            }));\r\n            $scope.prices.length = response.data.length;\r\n        });\r\n    });\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('purchaseController', ['$scope', '$localStorage', 'storefrontApp.mainContext', 'fulfillmentCenterService', function ($scope, $localStorage, mainContext, fulfillmentCenterService) {\r\n\r\n    $scope.loadPaymentPlan = function(availablePaymentPlans, objectType, objectId) {\r\n        $scope.availablePaymentPlans = availablePaymentPlans;\r\n        $scope.paymentPlan = (($localStorage['paymentPlans'] || { })[objectType] || { })[objectId];\r\n        $scope.paymentPlanType = $scope.paymentPlan ? 'auto-reorder' : 'one-time';\r\n        $scope.paymentPlan = ($scope.paymentPlan ? _.findWhere(availablePaymentPlans, { intervalCount: $scope.paymentPlan.intervalCount, interval: $scope.paymentPlan.interval }) : undefined) ||\r\n            _.findWhere($scope.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n    };\r\n\r\n    $scope.updatePaymentPlan = function(objectType, objectId, paymentPlanType, paymentPlan) {\r\n        if (!$localStorage['paymentPlans']) {\r\n            $localStorage['paymentPlans'] = { };\r\n        }\r\n        if (!$localStorage['paymentPlans'][objectType]) {\r\n            $localStorage['paymentPlans'][objectType] = { };\r\n        }\r\n        $scope.paymentPlanType = paymentPlanType;\r\n        if (paymentPlanType === 'auto-reorder') {\r\n            $localStorage['paymentPlans'][objectType][objectId] = paymentPlan;\r\n            $scope.paymentPlan = paymentPlan;\r\n        } else {\r\n            $localStorage['paymentPlans'][objectType][objectId] = undefined;\r\n            $scope.paymentPlan = undefined;\r\n        }\r\n    };\r\n\r\n    $scope.shipmentType = $localStorage['shipmentType'] || 'shipping';\r\n    $scope.shipmentAddress = $localStorage['shipmentAddress'];\r\n    $scope.shipmentFulfillmentCenter = $localStorage['shipmentFulfillmentCenter'];\r\n    $scope.shipmentFulfillmentCenterAddress = fulfillmentCenterService.toAddress($scope.shipmentFulfillmentCenter);\r\n\r\n    $scope.$watch(\r\n        function () { return mainContext.customer; },\r\n        function (customer) {\r\n            if (customer) {\r\n                if (!$scope.shipmentAddress && customer.defaultShippingAddress) {\r\n                    $scope.shipmentAddress = { postalCode: customer.defaultShippingAddress.postalCode };\r\n                }\r\n            }\r\n        }\r\n    );\r\n\r\n    $scope.updateShipmentType = function(shipmentType, shipmentTypeInfo) {\r\n        $localStorage['shipmentType'] = shipmentType;\r\n        $scope.shipmentType = shipmentType;\r\n        if (shipmentType === 'shipping') {\r\n            $localStorage['shipmentAddress'] = shipmentTypeInfo;\r\n            $scope.shipmentAddress = shipmentTypeInfo;\r\n        } else {\r\n            $localStorage['shipmentFulfillmentCenter'] = shipmentTypeInfo;\r\n            $scope.shipmentFulfillmentCenter = shipmentTypeInfo;\r\n            $scope.shipmentFulfillmentCenterAddress = fulfillmentCenterService.toAddress(shipmentTypeInfo);\r\n        }\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownService', ['$delegate', function($delegate) {\r\n        var service = $delegate;\r\n        var close = service.close;\r\n        service.close = function (dropdownScope, element, appendTo) {\r\n            dropdownScope.focusToggleElement = function() {};\r\n            close(dropdownScope, element, appendTo);\r\n        }\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function () {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcDropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcDropdownTrigger', function () {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            if (attrs.vcDropdownTrigger === 'mouseenter') {\r\n                var dropdownCtrl = ctrls[0];\r\n                var dropdownToggleCtrl = ctrls[1];\r\n                if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                    return;\r\n                }\r\n\r\n                element.addClass('dropdown-trigger-mouseenter');\r\n\r\n                var openDropdown = function() {\r\n                    if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                        scope.$apply(function() {\r\n                            dropdownCtrl.toggle(true);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                element.on('mouseenter', openDropdown);\r\n\r\n                scope.$on('$destroy', function() {\r\n                    element.off('mouseenter', openDropdown);\r\n                });\r\n            }\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\n// based on https://github.com/angular/angular.js/blob/master/src/ng/directive/ngInclude.js\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('ngIncludeDirective', ['$delegate', function ($delegate) {\r\n        var includeFillContentDirective = $delegate[1];\r\n        var link = includeFillContentDirective.link;\r\n        includeFillContentDirective.link = function (scope, $element, $attr, ctrl) {\r\n            if (!Object.keys($attr).includes('raw')) {\r\n                link(scope, $element, $attr, ctrl);\r\n            } else {\r\n                $element.text(ctrl.template);\r\n            }\r\n        };\r\n        includeFillContentDirective.compile = function () {\r\n            return includeFillContentDirective.link;\r\n        };\r\n        $delegate[1] = includeFillContentDirective;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcQuerySource', ['$parse', '$location', '$httpParamSerializer', 'searchQueryService', function ($parse, $location, $httpParamSerializer, searchQueryService) {\r\n    return {\r\n        restrict: \"A\",\r\n        compile: function (tElem, tAttr) {\r\n            if (!tAttr.href) {\r\n                return function (scope, element, attrs) {\r\n                    // If the linked element is not an anchor tag anymore, do nothing\r\n                    if (element[0].nodeName.toLowerCase() !== 'a') return;\r\n\r\n                    // get query from current url, replace query parts with specified parts and set href\r\n                    var setUrl = function (querySource, switchable) {\r\n                        switchable = switchable == 'true';\r\n                        var state = searchQueryService.deserialize(searchQueryService.get(), {});\r\n                        var result = searchQueryService.merge(state, querySource, switchable);\r\n                        var params = searchQueryService.serialize(result, {});\r\n                        var url = new URL($location.absUrl());\r\n                        url.search = $httpParamSerializer(params);\r\n                        element.attr(\"href\", url.href);\r\n                    };\r\n                    scope.$watch(function () {\r\n                        return $parse(attrs.vcQuerySource)(scope);\r\n                    }, function (value) {\r\n                        setUrl(value, attrs.switchable);\r\n                    }, true);\r\n                    scope.$watch(function () {\r\n                        return attrs.switchable;\r\n                    }, function (value) {\r\n                        setUrl($parse(attrs.vcQuerySource)(scope), value);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcQueryTarget', ['$parse', '$location', 'searchQueryService', function ($parse, $location, searchQueryService) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            var vcQueryTarget = $parse(attrs.vcQueryTarget);\r\n            // get requested keys and set ng-model value to value of ?key1=value1&key2=value2\r\n            var state = searchQueryService.deserialize(searchQueryService.get(), vcQueryTarget(scope));\r\n            vcQueryTarget.assign(scope, state);\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcScope', ['$animate', '$compile', function ($animate) {\r\n    return {\r\n        multiElement: true,\r\n        transclude: 'element',\r\n        priority: 600,\r\n        terminal: true,\r\n        restrict: 'A',\r\n        $$tlb: true,\r\n        link: function ($scope, $element, $attr, ctrl, $transclude) {\r\n            $transclude(function (clone) {\r\n                $element.after(clone);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n","angular.module('storefrontApp')\r\n    .component('addToCompareCheckbox', {\r\n        templateUrl: 'themes/assets/js/product-compare/add-to-compare-checkbox.tpl.html',\r\n        bindings: {\r\n            productId: '<',\r\n            buttonType: '<',\r\n            customClass: '<',\r\n            buttonWidth: '<'\r\n        },\r\n        controller: ['$rootScope', '$scope', 'catalogService', 'dialogService', 'compareProductService', function($rootScope, $scope, catalogService, dialogService, compareProductService) {\r\n            var $ctrl = this;\r\n            $ctrl.containProduct = false;\r\n\r\n            $ctrl.$onInit = function () {\r\n                $ctrl.containProduct = compareProductService.isInProductCompareList($ctrl.productId);\r\n            }\r\n\r\n            $ctrl.addProductToCompareList = function (event) {\r\n                event.preventDefault();\r\n                catalogService.getProduct($ctrl.productId).then(function(response) {\r\n                    var product = response.data[0];\r\n                    event.preventDefault();\r\n                    var isInProductList = compareProductService.isInProductCompareList($ctrl.productId);\r\n                    if (!isInProductList) {\r\n                        var count = compareProductService.getProductsCount();\r\n                        if (count < 5) {\r\n                        $ctrl.containProduct = true;\r\n                        compareProductService.addProduct($ctrl.productId);\r\n                        $rootScope.$broadcast('productCompareListChanged');\r\n                        }\r\n                    }\r\n                    else {\r\n                        $ctrl.containProduct = false;\r\n                        compareProductService.removeProduct($ctrl.productId);\r\n                        $rootScope.$broadcast('productCompareListChanged');\r\n                    }\r\n                })\r\n            };\r\n        }]\r\n    })\r\n\r\n","angular.module('storefrontApp')\r\n    .component('productCompareListBar', {\r\n        templateUrl: \"product-compare-list-bar.tpl.html\",\r\n        controller: ['compareProductService', 'catalogService', '$scope', '$rootScope',\r\n            function(compareProductService, catalogService, $scope, $rootScope) {\r\n                var $ctrl = this;\r\n                $ctrl.showedBody = true;\r\n                $ctrl.products = [];\r\n\r\n                function initialize() {\r\n                    var productsIds = compareProductService.getProductsIds();\r\n                    if (!_.isEmpty(productsIds)) {\r\n                        catalogService.getProducts(productsIds).then(function(response) {\r\n                            if (_.indexOf(productsIds, '&') != -1) {\r\n                                console.log('sss');\r\n                                $ctrl.products = response.data;\r\n                                \r\n                            }\r\n                        });\r\n                    };\r\n                }\r\n\r\n                $ctrl.$onInit = function() {\r\n                    $ctrl.itemsCount = compareProductService.getProductsCount();\r\n                    initialize();\r\n                }\r\n\r\n                $scope.$on('productCompareListChanged', function(event, data) {\r\n                    $ctrl.itemsCount = compareProductService.getProductsCount();\r\n                    initialize();\r\n                });\r\n\r\n                $ctrl.clearCompareList = function () {\r\n                    compareProductService.clearComapreList();\r\n                    $ctrl.products = [];\r\n                    $rootScope.$broadcast('productCompareListChanged');\r\n                }\r\n\r\n                $ctrl.showBody = function () {\r\n                    $ctrl.showedBody = !$ctrl.showedBody;\r\n                }\r\n            \r\n                $ctrl.removeProduct = function (product) {\r\n                    compareProductService.removeProduct(product.id)\r\n                    $scope.products = _.without($ctrl.products, product);\r\n                    $rootScope.$broadcast('productCompareListChanged');\r\n                    $scope.getProductProperties();\r\n                }\r\n            }]\r\n    });\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService', 'compareProductService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService, compareProductService) {\r\n    var $ctrl = this;\r\n    $ctrl.containProduct = false;\r\n    $scope.properties = [];\r\n    $scope.products = [];\r\n\r\n    function initialize() {\r\n        $scope.loaded = false;\r\n        $ctrl.loading = true;\r\n        var productsIds = compareProductService.getProductsIds();\r\n        if (_.isEmpty(productsIds)) {\r\n            $scope.loaded = true;\r\n            $ctrl.loading = false;\r\n            return;\r\n        }\r\n        catalogService.getProducts(productsIds).then(function(response) {\r\n            if (_.indexOf(productsIds, '&') != -1) {\r\n                $scope.products = response.data;\r\n                _.each($scope.products, function(product) {\r\n                    modifyProperty(product);\r\n                })\r\n            }\r\n            else {\r\n                var product = response.data[0];\r\n                modifyProperty(product);\r\n                $scope.products.push(product);\r\n            }\r\n            $scope.getProductProperties();\r\n            $scope.loaded = true;\r\n            $ctrl.loading = false;\r\n        })\r\n    };\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var isInProductList = compareProductService.isInProductCompareList(productId);\r\n        if (!isInProductList) {\r\n            $ctrl.containProduct = true;\r\n            compareProductService.addProduct(productId);\r\n            $rootScope.$broadcast('productCompareListChanged');\r\n        }\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        if (_.isEmpty($scope.products))\r\n            return [];\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function(product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function(property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function(displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function(product) {\r\n                var productProperty = _.find(props, function(prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    function modifyProperty(product) {\r\n        _.each(product.properties, function(property) {\r\n            property.productId = product.id;\r\n            if (property.valueType.toLowerCase() === 'number') {\r\n                property.value = formatNumber(property.value);\r\n            }\r\n        })\r\n        return product;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        compareProductService.clearComapreList();\r\n        $scope.products = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.properties = [];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        compareProductService.removeProduct(product.id)\r\n        $scope.products = _.without($scope.products, product);\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n    initialize();\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }    \r\n}]);","storefrontApp.service('availabilityService', ['$http', '$q', 'apiBaseUrl', function ($http, $q, apiBaseUrl) {\r\n    return {\r\n        getProductsAvailability: function (ids) {\r\n            // return $http.post(apiBaseUrl + 'api/availabilty/product', ids);\r\n            // mock\r\n            var deferredData = $q.defer();\r\n            deferredData.resolve({\r\n                data: ids.map(function(id) {\r\n                    return { productId: id, expectedArrival: Date.now(), availableSince: Date.now() };\r\n                })\r\n            });\r\n            return deferredData.promise;\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('fulfillmentCenterService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        searchFulfillmentCenters: function (criteria) {\r\n            return $http.post(apiBaseUrl + 'api/fulfillment/search/centers', criteria);\r\n        },\r\n        toAddress: function (fulfillmentCenter) {\r\n            if (fulfillmentCenter) {\r\n                return {\r\n                    countryName: fulfillmentCenter.countryName,\r\n                    countryCode: fulfillmentCenter.countryCode,\r\n                    regionName: fulfillmentCenter.stateProvince,\r\n                    city: fulfillmentCenter.city,\r\n                    line1: fulfillmentCenter.line1,\r\n                    line2: fulfillmentCenter.line2,\r\n                    postalCode: fulfillmentCenter.postalCode,\r\n                    phone: fulfillmentCenter.daytimePhoneNumber\r\n                };\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('loadingIndicatorService', function() {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function(func) {\r\n            retVal.isLoading = true;\r\n            return func().then(\r\n                function(result) {\r\n                    retVal.isLoading = false;\r\n                    return result;\r\n                },\r\n                function() { retVal.isLoading = false; });\r\n        }\r\n    }\r\n    return retVal;\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('searchQueryService', ['$location', function ($location) {\r\n    return {\r\n        // emulate html5 mode because of bug in Microsoft Edge\r\n        get: function () {\r\n            var result = {};\r\n            var url = new URL($location.absUrl());\r\n            var entries = url.searchParams.entries();\r\n            var pair = entries.next();\r\n            while (!pair.done) {\r\n                result[pair.value[0]] = pair.value[1];\r\n                pair = entries.next();\r\n            }\r\n            return result;\r\n        },\r\n\r\n        // Deserializes search query strings like 'key=value1[,value2]' or 'key=key1:value1[,value2[;key2:value3[,value4]]]'\r\n        deserialize: function (searchQuery, defaults) {\r\n            var deserializeValues = function(string) {\r\n                return string.split(',');\r\n            };\r\n            var deserializePairs = function (string) {\r\n                return _.object(string.split(';').map(function(pairString) {\r\n                    return _.reduce(pairString.split(':'), function (key, value) {\r\n                        return [key, deserializeValues(value)];\r\n                    });\r\n                }));\r\n            };\r\n            searchQuery = searchQuery || {};\r\n            defaults = defaults || {};\r\n            var result = {};\r\n            _.each(Object.keys(searchQuery), (function (key) {\r\n                var string = searchQuery[key];\r\n                if (string) {\r\n                    var deserialize = string.includes(':') ? deserializePairs : deserializeValues;\r\n                    result[key] = deserialize(string);\r\n                }\r\n            }));\r\n            result = _.defaults(result, defaults);\r\n            return result;\r\n        },\r\n\r\n        merge: function (searchQuery, changes, switchable) {\r\n            if (!switchable) {\r\n                return _.extend(searchQuery, changes);\r\n            } else {\r\n                var mergeValues = function (searchQueryValues, changeValues) {\r\n                    var checkedValues = _.difference((searchQueryValues || []).concat(changeValues || []), _.intersection(searchQueryValues, changeValues));\r\n                    return changeValues !== null && checkedValues.length ? checkedValues : null;\r\n                };\r\n                var mergePairs = function (searchQueryPairs, changePairs) {\r\n                    return _.object(_.compact(_.union(Object.keys(searchQueryPairs), Object.keys(changePairs)).map(function (key) {\r\n                        var mergedValues = mergeValues(searchQueryPairs[key], changePairs[key]);\r\n                        return mergedValues !== null ? [key, mergedValues] : null;\r\n                    })));\r\n                };\r\n                return _.object(_.compact(_.union(Object.keys(searchQuery), Object.keys(changes)).map(function (key) {\r\n                    var searchQueryValues = searchQuery[key];\r\n                    var changeValues = changes[key];\r\n                    if (changeValues !== null) {\r\n                        if (searchQueryValues && changeValues && angular.isArray(searchQueryValues) !== angular.isArray(changeValues)) {\r\n                            throw 'Type of ' + key + ' in search query is' + typeof (searchQueryValues[key]) + ' while in changes is' + typeof (changeValues[key]);\r\n                        }\r\n                        if (!angular.isArray(changeValues)) {\r\n                            var mergedPairs = mergePairs(searchQueryValues || [], changeValues || []);\r\n                            return !_.isEmpty(mergedPairs) ? [key, mergedPairs] : null;\r\n                        } else {\r\n                            var mergedValues = mergeValues(searchQueryValues, changeValues);\r\n                            return mergedValues !== null ? [key, mergedValues] : null;\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })));\r\n            }\r\n        },\r\n\r\n        // Serializes search query objects like { view: ['list'], terms: { Color: [\"Black, \"Red\"], Brand: [\"VirtoCommerce\", \"Microsoft\"] } }  to string \r\n        serialize: function (searchQuery, defaults) {\r\n            var serializeValues = function (values) {\r\n                return values.join(',');\r\n            };\r\n            var serializePairs = function (pairs) {\r\n                return _.map(Object.keys(pairs), function(key) {\r\n                    return [key, serializeValues(pairs[key])].join(':');\r\n                }).join(';');\r\n            };\r\n            searchQuery = searchQuery || {};\r\n            defaults = defaults || {};\r\n            var result = _.defaults(searchQuery, defaults);\r\n            return _.mapObject(result, function(values, key) {\r\n                return values !== null ? !angular.isArray(values) ? serializePairs(values) : serializeValues(values) : null;\r\n            });\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCoupon', {\r\n\ttemplateUrl: \"themes/assets/js/components/purchase/coupon.tpl.liquid\",\r\n\tbindings: {\r\n        coupon: '=',\r\n        loader: '=',\r\n\t\tonApplyCoupon: '&',\r\n\t\tonRemoveCoupon: '&'\r\n\t},\r\n\tcontroller: ['loadingIndicatorService', function (loader) {\r\n        var $ctrl = this;\r\n        \r\n\t    $ctrl.loader = loader;\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentPlan', {\r\n    templateUrl: \"themes/assets/js/components/purchase/paymentPlan.tpl.html\",\r\n    bindings: {\r\n        availablePaymentPlans: '<',\r\n        paymentPlanType: '<',\r\n        paymentPlan: '<',\r\n        onChange: '&'\r\n    },\r\n    controller: [function() {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.change = function() {\r\n            $ctrl.onChange({ paymentPlanType: $ctrl.paymentPlanType, paymentPlan: $ctrl.paymentPlan });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcShipmentType', {\r\n    templateUrl: \"themes/assets/js/components/purchase/shipmentType.tpl.html\",\r\n    bindings: {\r\n        ctrl: '=',\r\n        shipmentType: '<',\r\n        shipmentAddress: '<',\r\n        shipmentFulfillmentCenter: '<',\r\n        onFulfillmentCenterSelection: '&',\r\n        onChange: '&'\r\n    },\r\n    transclude: true,\r\n    controllerAs: '$ctrl',\r\n    controller: ['$scope', '$localStorage', 'storefrontApp.mainContext', 'dialogService', function($scope, $localStorage, mainContext, dialogService) {\r\n        var $ctrl = this;\r\n        $ctrl.ctrl = $ctrl;\r\n\r\n        $ctrl.selectFulfillmentCenter = function () {\r\n            var modalInstance = dialogService.showDialog({ searchPhrase: $ctrl.shipmentFulfillmentCenter ? $ctrl.shipmentFulfillmentCenter.postalCode : null }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n            modalInstance.result.then(function(fulfillmentCenter) {\r\n                $ctrl.shipmentFulfillmentCenter = fulfillmentCenter;\r\n                if ($ctrl.onFulfillmentCenterSelection) {\r\n                    $ctrl.onFulfillmentCenterSelection();\r\n                }\r\n            });\r\n        };\r\n        $ctrl.change = function () {\r\n            if ($ctrl.shipmentType === 'shipping' && $ctrl.shipmentAddress || $ctrl.shipmentType === 'pickup' && $ctrl.shipmentFulfillmentCenter) {\r\n                $ctrl.onChange({ shipmentType: $ctrl.shipmentType, shipmentTypeInfo: $ctrl.shipmentType === 'shipping' ? $ctrl.shipmentAddress : $ctrl.shipmentFulfillmentCenter });\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.constant('vcTotalsDefaults', {\r\n    show: {\r\n        subtotal: true,\r\n        taxes: true,\r\n        shipping: true,\r\n        payment: true,\r\n        discount: true\r\n    },\r\n    complete: false\r\n});\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/components/purchase/totals.tpl.liquid\",\r\n\tbindings: {\r\n        order: '<',\r\n        options: '<'\r\n    },\r\n    controller: ['vcTotalsDefaults', function(defaults) {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.options = angular.merge({ }, defaults, $ctrl.options);\r\n\r\n        var fieldSuffix = $ctrl.showWithTaxes ? 'WithTax' : '';\r\n        $ctrl.fieldNames = {\r\n            subTotal: 'subTotal' + fieldSuffix,\r\n            shippingPrice: 'shippingPrice' + fieldSuffix,\r\n            shippingTotal: 'shippingTotal' + fieldSuffix,\r\n            payment: 'paymentPrice' + fieldSuffix,\r\n            discount: 'discountTotal' + fieldSuffix\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n.controller('universalDialogController', ['$scope', '$uibModalInstance', 'dialogData', function ($scope, $uibModalInstance, dialogData) {\r\n    angular.extend($scope, dialogData);\r\n\r\n    $scope.close = function (result) {\r\n        if (result) {\r\n            $uibModalInstance.close(result);\r\n        } else {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n}]);\r\n","angular.module('storefrontApp')\r\n    .factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n        function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n\r\n            var authContext = {\r\n                userId: null,\r\n                userLogin: null,\r\n                fullName: null,\r\n                userType: null,\r\n                roles: null,\r\n                permissions: null,\r\n                isAuthenticated: false\r\n            };\r\n\r\n            authContext.login = function (login, password) {\r\n                return $auth.login($httpParamSerializerJQLike({\r\n                    userName: login,\r\n                    password: password,\r\n                    grant_type: \"password\"\r\n                }),\r\n                    {\r\n                        headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n                    });\r\n            };\r\n\r\n            authContext.fillAuthData = function () {\r\n                return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n                    function (result) {\r\n                        changeAuth(result)\r\n                        $rootScope.$broadcast('loginStatusChanged', authContext);\r\n                    },\r\n                    function (error) { });\r\n            };\r\n\r\n            authContext.checkPermission = function (permission, securityScopes) {\r\n                //first check admin permission\r\n                // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n                var hasPermission = authContext.isAdministrator;\r\n                if (!hasPermission && permission) {\r\n                    permission = permission.trim();\r\n                    //first check global permissions\r\n                    hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n                    if (!hasPermission && securityScopes) {\r\n                        if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                            securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                            //Check permissions in scope\r\n                            hasPermission = _.some(securityScopes, function (x) {\r\n                                var permissionWithScope = permission + \":\" + x;\r\n                                var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                                //console.log(permissionWithScope + \"=\" + retVal);\r\n                                return retVal;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                return hasPermission;\r\n            };\r\n\r\n            function changeAuth(results) {\r\n                authContext.userId = results.id;\r\n                authContext.roles = results.roles;\r\n                authContext.permissions = results.permissions;\r\n                authContext.userLogin = results.userName;\r\n                authContext.fullName = results.userLogin;\r\n                authContext.isAuthenticated = results.userName != null;\r\n                authContext.userType = results.userType;\r\n                authContext.isAdministrator = results.isAdministrator;\r\n                //Interpolate permissions to replace some template to real value\r\n                if (authContext.permissions) {\r\n                    authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                        return $interpolate(x)(authContext);\r\n                    });\r\n                }\r\n            };\r\n\r\n            return authContext;\r\n        }])\r\n    .constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n    .config(['$authProvider', '$provide', 'apiBaseUrl', function ($authProvider, $provide, apiBaseUrl) {\r\n        $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n        $authProvider.tokenName = 'access_token';\r\n        $authProvider.tokenPrefix = 'platform';\r\n        $authProvider.oauth2({\r\n            name: 'platform',\r\n            clientId: 'web'\r\n        });\r\n        $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function ($delegate, tokenExpirationName) {\r\n            var service = $delegate;\r\n            var originalSetToken = service.setToken;\r\n            service.setToken = function (response) {\r\n                originalSetToken.apply(service, arguments);\r\n                var expirationTime = Date.parse(response.data['.expires']);\r\n                this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n            };\r\n            return service;\r\n        }]);\r\n    }])\r\n    .run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function ($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n        var logOut = function () {\r\n            $auth.logout();\r\n            $authStorage.remove(tokenExpirationName);\r\n            $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n        };\r\n\r\n        if ($auth.isAuthenticated()) {\r\n            $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n        }\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', 'availabilityService', 'loadingIndicatorService', function ($rootScope, $scope, $timeout, cartService, catalogService, availabilityService, loader) {\r\n    var timer;\r\n\r\n    $scope.loader = loader;\r\n    $scope.coupon = {};\r\n\r\n    var reloadCart = $scope.reloadCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.getCart().then(function(response) {\r\n                var cart = response.data;\r\n                cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function(item) { return _.some(item.validationErrors) });\r\n                $scope.cart = cart;\r\n\r\n                var coupon = cart.coupon || $scope.coupon;\r\n                coupon.loader = $scope.coupon.loader;\r\n                $scope.coupon = coupon;\r\n                if ($scope.coupon.code && !$scope.coupon.appliedSuccessfully) {\r\n                    $scope.coupon.errorCode = 'InvalidCouponCode';\r\n                }\r\n\r\n                return availabilityService.getProductsAvailability(_.pluck(cart.items, 'productId')).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.loader.isLoading || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\treloadCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            reloadCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n\r\n    $scope.clearCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.clearCart().then(function() {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        });\r\n    };\r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            reloadCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n    \r\n    $scope.applyCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.addCoupon(coupon.code).then(function() {\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.removeCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.removeCoupon().then(function() {\r\n                $scope.coupon = { loader: $scope.coupon.loader };\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        reloadCart();\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('collectionController', ['$scope', '$location', function ($scope, $location) {\r\n    var $ctrl = this;\r\n    $ctrl.sortModes = {\r\n        'manual': 'collections.sorting.featured',\r\n        'best-selling': 'collections.sorting.best_selling',\r\n        'title-ascending': 'collections.sorting.az',\r\n        'title-descending': 'collections.sorting.za',\r\n        'price-ascending': 'collections.sorting.price_ascending',\r\n        'price-descending': 'collections.sorting.price_descending',\r\n        'createddate-descending': 'collections.sorting.date_descending',\r\n        'createddate-ascending': 'collections.sorting.date_ascending'\r\n    };\r\n    $ctrl.viewQuery = { view: ['grid'] };\r\n    $ctrl.generatePageSizes = function (capacity, steps) {\r\n        $ctrl.pageSizeQuery = { page_size: [capacity] };\r\n        // for example            start: 16 stop: 16 * 3 + 1 = 49 step: 16\r\n        $ctrl.pageSizes = _.range(capacity, capacity * steps + 1, capacity);\r\n    }\r\n    $ctrl.keywordQuery = { keyword: [] };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['$compile', 'marketingService', function ($compile, marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html($compile(response.data)(scope));\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterSource', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        controller: function() { },\r\n        link: function (scope, element, attrs, ctrl) {\r\n            var onKeyPress = function (event) {\r\n                if (event.keyCode === 13) { // Enter\r\n                    ctrl.element[0].click();\r\n                }\r\n            };\r\n            element.on('keypress', onKeyPress);\r\n            scope.$on('$destroy', function () {\r\n                element.off('keypress', onKeyPress);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterTarget', [function () {\r\n    return {\r\n        restrict: \"A\",\r\n        require: \"^vcEnterSource\",\r\n        link: function (scope, element, attrs, ctrl) {\r\n            ctrl.element = element;\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('inventoryController', ['$scope', 'dialogService', 'fulfillmentCenterService', function ($scope, dialogService, fulfillmentCenterService) {\r\n    $scope.searchFulfillmentCenters = function() {\r\n        fulfillmentCenterService.searchFulfillmentCenters({ searchPhrase: $scope.searchPhrase }).then(function(response) {\r\n            $scope.fulfillmentCenters = response.data.results;\r\n        });\r\n    };\r\n\r\n    $scope.selectFulfillmentCenter = function() {\r\n        dialogService.showDialog({ isFilter: true }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n    };\r\n\r\n    $scope.fulfillmentCenterToAddress = function (fulfillmentCenter) {\r\n        return fulfillmentCenterService.toAddress(fulfillmentCenter);\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $rootScope.$on('$locationChangeSuccess', function () {\r\n            var path = $location.path();\r\n            if (path) {\r\n                $scope.currentPath = path.replace('/', '');\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","if (Prism.languages.markup) {\r\n    Prism.languages.insertBefore('markup', 'tag', {\r\n        'script': {\r\n            pattern: /(<script[\\s\\S]*?type=\"text\\/ng-template\"[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\r\n            lookbehind: true,\r\n            inside: Prism.languages.html,\r\n            alias: 'language-html'\r\n        }\r\n    });\r\n}\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService', 'availabilityService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService, availabilityService) {\r\n        //TODO: prevent add to cart not selected variation\r\n        // display validator please select property\r\n        // display price range\r\n\r\n        $scope.allVariations = [];\r\n        $scope.allVariationsMap = {}\r\n        $scope.allVariationPropsMap = {};\r\n        $scope.filterableVariationPropsMap = { };\r\n        $scope.selectedVariation = {};\r\n        $scope.productPrice = null;\r\n        $scope.productPriceLoaded = false;\r\n\r\n        $scope.addProductToCart = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n            cartService.addLineItem(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        }\r\n\r\n        // TODO: Replace mock with real function\r\n        $scope.addProductsToCartMock = function () {\r\n            var rejection = {\r\n                data: {\r\n                    message: \"The 1 product(s) below was not added to cart:\",\r\n                    modelState: {\r\n                        \"Test\": \"Test\"\r\n                    }\r\n                }\r\n            };\r\n            var items = [\r\n                {\r\n                    id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                    name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$896.39\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$1,075.67\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$995.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$1,195.19\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,792.78\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$2,151.34\"\r\n                        }\r\n                    },\r\n                    quantity: 2,\r\n                    url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n                },\r\n                {\r\n                    id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                    name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$530.99\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$637.19\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$589.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$707.99\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,592.97\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$1,911.57\"\r\n                        }\r\n                    },\r\n                    quantity: 5,\r\n                    url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n                }\r\n            ];\r\n            var dialogData = toDialogDataModelMock(items, rejection);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        }\r\n\r\n        $scope.addProductToCartById = function (productId, quantity, event) {\r\n            event.preventDefault();\r\n            catalogService.getProduct([productId]).then(function (response) {\r\n                if (response.data && response.data.length) {\r\n                    var product = response.data[0];\r\n                    $scope.addProductToCart(product, quantity);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n            quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n            });\r\n        }\r\n\r\n        function toDialogDataModel(product, quantity) {\r\n            return { items: [angular.extend({ }, product, { quantity: quantity })] };\r\n            //     return {\r\n            //         id: product.id,\r\n            //         name: product.name,\r\n            //         imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            //         listPrice: product.price.listPrice,\r\n            //listPriceWithTax: product.price.listPriceWithTax,\r\n            //         placedPrice: product.price.actualPrice,\r\n            //         placedPriceWithTax: product.price.actualPriceWithTax,\r\n            //         quantity: quantity,\r\n            //         updated: false\r\n            //     }\r\n        }\r\n\r\n        function toDialogDataModelMock(items, rejection) {\r\n            var dialogDataModel = {};\r\n            if (rejection) {\r\n                dialogDataModel.errorMessage = rejection.data.message;\r\n                dialogDataModel.errors = rejection.data.modelState;\r\n            }\r\n            dialogDataModel.items = items;\r\n            return dialogDataModel;\r\n        }\r\n\r\n        function initialize(filters) {\r\n            var product = $window.product;\r\n            if (!product || !product.id) {\r\n                return;\r\n            }\r\n            catalogService.getProduct([product.id]).then(function (response) {\r\n\t\t\t\tvar product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                var allVariations = [product].concat(product.variations || []);\r\n                var filteredVariations = allVariations;\r\n                $scope.allVariations.length = 0;\r\n                if (filters) {\r\n                    var variationPropsKeys = Object.keys(filters.terms || {});\r\n                    filteredVariations = _.filter(allVariations, function(variation) {\r\n                        return _.all(variation.variationProperties, function(property) {\r\n                            return !variationPropsKeys.includes(property.displayName) || filters.terms[property.displayName].includes(property.value);\r\n                        });\r\n                    });\r\n                }\r\n                Array.prototype.push.apply($scope.allVariations, filteredVariations);\r\n                angular.copy(_.object(filteredVariations.map(function (variation) { return [variation.id, variation]; })), $scope.allVariationsMap);\r\n                angular.copy(getFlatternDistinctPropertiesMap(allVariations), $scope.allVariationPropsMap);\r\n                angular.copy(_.pick($scope.allVariationPropsMap, function (value, key, object) { return value.length > 1; }), $scope.filterableVariationPropsMap);\r\n\r\n                //Auto select initial product as default variation  (its possible because all our products is variations)\r\n                //var propertyMap = getVariationPropertyMap(product);\r\n                //_.each(_.keys(propertyMap), function (x) {\r\n                //    $scope.checkProperty(propertyMap[x][0])\r\n                //});\r\n                $scope.selectedVariation = product;\r\n\r\n                return availabilityService.getProductsAvailability([product.id]).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        };\r\n\r\n        function getFlatternDistinctPropertiesMap(variations) {\r\n            var retVal = {};\r\n            _.each(variations, function (variation) {\r\n                var propertyMap = getVariationPropertyMap(variation);\r\n                //merge\r\n                _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n                });\r\n            });\r\n            return retVal;\r\n        };\r\n\r\n        function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n        function getSelectedPropsMap(variationPropsMap) {\r\n            var retVal = {};\r\n            _.each(_.keys(variationPropsMap), function (x) {\r\n                var property = _.find(variationPropsMap[x], function (y) {\r\n                    return y.selected;\r\n                });\r\n                if (property) {\r\n                    retVal[x] = [property];\r\n                }\r\n            });\r\n            return retVal;\r\n        }\r\n\r\n        function comparePropertyMaps(propMap1, propMap2) {\r\n            return _.every(_.keys(propMap1), function (x) {\r\n                var retVal = propMap2.hasOwnProperty(x);\r\n                if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n                }\r\n                return retVal;\r\n            });\r\n        };\r\n\r\n        //function findVariationBySelectedProps(variations, selectedPropMap) {\r\n        //    return _.find(variations, function (x) {\r\n        //        return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        //    });\r\n        //}\r\n\r\n        ////Method called from View when user clicks one property value\r\n        //$scope.checkProperty = function (property) {\r\n        //    //Select appropriate property and unselect previous selection\r\n        //    _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n        //        x.selected = x != property ? false : !x.selected;\r\n        //    });\r\n\r\n        //    //try to find the best variation match for selected properties\r\n        //    $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n        //};\r\n\r\n        $scope.sendToEmail = function (storeId, productId, productUrl, language) {\r\n            dialogService.showDialog({ storeId: storeId, productId: productId, productUrl: productUrl, language: language }, 'recentlyAddedCartItemDialogController', 'storefront.send-product-to-email.tpl');\r\n        };\r\n\r\n        $scope.$watch('filters', initialize);\r\n    }]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'mailingService', 'dialogData', function ($scope, $window, $uibModalInstance, mailingService, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.dismiss('cancel');\r\n    }\r\n\r\n    $scope.send = function(email) {\r\n        mailingService.sendProduct(dialogData.productId, { email: email, storeId: dialogData.storeId, productUrl: dialogData.productUrl, language: dialogData.language });\r\n        $uibModalInstance.close();\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', products);\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        getProducts: function(productIds) {\r\n            return $http.get('storefrontapi/products?' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        changeLineItemsQuantity: function(items) {\r\n            return $http.put('storefrontapi/cart/items', items);\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('compareProductService', ['$http', '$localStorage', function($http, $localStorage) {\r\n    return {\r\n        isInProductCompareList: function(productId) {\r\n            var containProduct;\r\n            if (!_.some($localStorage['productCompareListIds'], function(id) { return id === productId })) {\r\n                containProduct = false;\r\n            }\r\n            else\r\n                containProduct = true\r\n            return containProduct;\r\n        },\r\n        addProduct: function(productId) {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n            }\r\n            $localStorage['productCompareListIds'].push(productId);\r\n            _.uniq($localStorage['productCompareListIds']);\r\n        },\r\n        getProductsIds: function() {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n                return;\r\n            }\r\n            var ids = [];\r\n            for (i = 0; i < $localStorage['productCompareListIds'].length; i++) {\r\n                ids.push('productIds=' + $localStorage['productCompareListIds'][i]);\r\n            }\r\n            return ids.join(\"&\");\r\n        },\r\n        getProductsCount: function() {\r\n            var count = $localStorage['productCompareListIds'] ? $localStorage['productCompareListIds'].length : 0;\r\n            return count;\r\n        },\r\n        clearComapreList: function() {\r\n            $localStorage['productCompareListIds'] = [];\r\n        },\r\n        removeProduct: function(productId) {\r\n            $localStorage['productCompareListIds'] = _.without($localStorage['productCompareListIds'], productId);\r\n        }\r\n    }\r\n}]);\r\n","(function () {\r\n    window.Toc.helpers.findOrFilter = function($el, selector) {\r\n        var $descendants = $el.find(selector);\r\n        return $el.filter(selector).add($descendants).filter(':not([data-toc-skip])').filter(function () {\r\n            return !$(this).parents(\"[data-toc-skip]\").length;\r\n        });\r\n    };\r\n\r\n    // from https://github.com/afeld/bootstrap-toc/pull/37\r\n    window.Toc.helpers.generateEmptyNavEl = function() {\r\n        var $li = $('<li></li>');\r\n        return $li;\r\n    };\r\n\r\n    window.Toc.helpers.getHeadings = function($scope, depth, topLevel) {\r\n        var selector = '';\r\n        for (var i = topLevel; i < topLevel + depth; i++) {\r\n            selector += 'h' + i;\r\n            if (i < topLevel + depth - 1)\r\n                selector += ',';\r\n        }\r\n        return this.findOrFilter($scope, selector);\r\n    };\r\n\r\n    window.Toc.helpers.populateNav = function($topContext, depth, topLevel, $headings) {\r\n        var $contexts = new Array(depth);\r\n        var helpers = this;\r\n\r\n        $contexts[0] = $topContext;\r\n        $topContext.lastNav = null;\r\n\r\n        $headings.each(function(i, el) {\r\n            var $newNav = helpers.generateNavItem(el);\r\n            var navLevel = helpers.getNavLevel(el);\r\n            var relLevel = navLevel - topLevel;\r\n            var j;\r\n\r\n            for (j = relLevel + 1; j < $contexts.length; j++) {\r\n                $contexts[j] = null;\r\n            }\r\n\r\n            if (!$contexts[relLevel]) {\r\n                for (j = 0; j < relLevel; j++) {\r\n                    if (!$contexts[j + 1]) {\r\n                        if (!$contexts[j].lastNav) {\r\n                            var $emptyNav = helpers.generateEmptyNavEl();\r\n                            $contexts[j].append($emptyNav);\r\n                            $contexts[j].lastNav = $emptyNav;\r\n                        }\r\n                        $contexts[j + 1] = helpers.createChildNavList($contexts[j].lastNav);\r\n                        $contexts[j + 1].lastNav = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $contexts[relLevel].append($newNav);\r\n            $contexts[relLevel].lastNav = $newNav;\r\n        });\r\n    };\r\n\r\n    window.Toc.helpers.parseOps = function(arg) {\r\n        var opts;\r\n        if (arg.jquery) {\r\n            opts = {\r\n                $nav: arg\r\n            };\r\n        } else {\r\n            opts = arg;\r\n        }\r\n        opts.$scope = opts.$scope || $(document.body);\r\n        opts.depth = opts.depth || opts.$nav.attr('data-toc-depth') || 2;\r\n        return opts;\r\n    };\r\n\r\n    window.Toc.init = function(opts) {\r\n        opts = this.helpers.parseOps(opts);\r\n\r\n        // ensure that the data attribute is in place for styling\r\n        opts.$nav.attr('data-toggle', 'toc');\r\n\r\n        var $topContext = this.helpers.createChildNavList(opts.$nav);\r\n        var topLevel = this.helpers.getTopLevel(opts.$scope);\r\n        var $headings = this.helpers.getHeadings(opts.$scope, opts.depth, topLevel);\r\n        this.helpers.populateNav($topContext, opts.depth, topLevel, $headings);\r\n    };\r\n})();\r\n"]}