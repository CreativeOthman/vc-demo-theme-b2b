{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/collection.js","../../../assets/js/dialogs.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/inventory.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/product-compare.js","../../../assets/js/product-list.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/searchBar.js","../../../assets/js/services.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/checkout/checkout-coupon.js","../../../assets/js/checkout/checkout-email.js","../../../assets/js/checkout/checkout-shippingMethods.js","../../../assets/js/checkout/checkout-wizard-step.js","../../../assets/js/checkout/checkout-wizard.js","../../../assets/js/checkout/checkout.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/paymentPlan.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/shippingType.js","../../../assets/js/common-components/totals.js","../../../assets/js/directives/dropdown.js","../../../assets/js/directives/dropdownClose.js","../../../assets/js/directives/toggleOnMouseEnter.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","console","log","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","split","some","permissionWithScope","constant","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","parse","data","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","protocol","host","parseFloat","get","now","storefrontApp","controller","$scope","cartService","catalogService","getCart","cartIsUpdating","then","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","changeLineItemQuantity","lineItemId","quantity","lineItem","find","$invalid","initialQuantity","cancel","changeLineItemPrice","newPrice","initialItems","removeLineItem","copy","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","outerRedirect","baseUrl","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","criteria","keyword","start","pageSize","search","products","selectSearchedProduct","product","selectedSearchedProduct","addProductToCart","addLineItem","getCartItemsCount","cartItemsCount","$on","$uibModalInstance","dialogData","close","redirect","url","$ctrl","sortModes","manual","best-selling","title-ascending","title-descending","price-ascending","price-descending","createddate-descending","createddate-ascending","viewQuery","view","generatePageSizes","capacity","steps","pageSizeQuery","page_size","pageSizes","range","keywordQuery","dismiss","directive","$compile","marketingService","restrict","link","scope","element","attrs","getDynamicContent","html","replace","ctrl","onKeyPress","keyCode","click","on","off","require","$parse","searchQueryService","compile","tElem","tAttr","toLowerCase","$watch","vcQuerySource","queryType","obj","querySource","getLink","attr","vcQueryTarget","t","state","getState","assign","includeFillContentDirective","$element","$attr","Object","keys","includes","text","template","$animate","multiElement","transclude","priority","terminal","$$tlb","$transclude","clone","after","errorHandler","fallbackSrc","filter","input","extention","pop","suffix","dialogService","fulfillmentCenterService","selectFulfillmentCenter","showDialog","isFilter","searchFulfillmentCenters","searchPhrase","fulfillmentCenters","customerService","currentPath","$$path","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","absUrl","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","key","size","hasOwnProperty","getCustomer","getCurrentCustomer","addressId","each","addresses","isContact","memberType","orderService","orderNumber","getOrder","order","authService","toggleVisibilityBasedOnPermission","permissionValue","show","hide","vaPermission","$localStorage","formatNumber","number","float","isNaN","isInProductCompareList","productId","p","addProductToCompareList","preventDefault","existingProduct","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","pricingService","loaded","prices","getActualProductPrices","productList","object","price","quoteRequestService","toDialogDataModel","extend","toDialogDataModelMock","rejection","dialogDataModel","errorMessage","message","errors","modelState","initialize","filters","productIds","allVariations","concat","variations","filteredVariations","variationPropsKeys","terms","variation","all","variationProperties","allVariationsMap","getFlatternDistinctPropertiesMap","allVariationPropsMap","pick","filterableVariationPropsMap","selectedVariation","retVal","propertyMap","getVariationPropertyMap","union","groupBy","productPrice","productPriceLoaded","addProductsToCartMock","Test","imageUrl","actualPrice","formattedAmount","actualPriceWithTax","listPrice","listPriceWithTax","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToActualQuoteRequest","addProductToQuoteRequest","sendToEmail","storeId","productUrl","print","mailingService","email","sendProduct","getQuoteRequest","quoteRequest","billingAddress","countryCode","getCountryRegions","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","getCountries","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","amount","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","contains","addTierPrice","salePrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","a","submitQuoteRequest","isRegisteredUser","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","updated","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","isString","match","values","getRecommendedProducts","startRecordInteraction","query","searchQuery","getSuggestions","searching","categorySuggestions","productSuggestions","searchCriteria","skip","take","suggestionsLimit","searchCategories","categories","first","$uibModal","templateUrl","resolve","$http","post","postFeedback","model","getTime","placeName","put","delete","clearCart","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","$q","getOrCreateMyLists","lists","list","author","Math","floor","random","toString","reject","getSharedLists","sharedLists","cartId","isDefined","getWishlist","listName","addItemToList","listId","containsInList","currentList","addSharedList","myLists","sharedCartId","searchedList","clearList","removeFromFriendsLists","currentId","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","$httpParamSerializer","valueString","pairs","pairsString","pairString","pair","process","src","dest","fn","chain","compact","selectValue","srcVal","destVal","difference","intersection","join","isObject","subKey","subSrcVal","subDestVal","subVal","URL","moduleName","undefined","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","$templateCache","component","bindings","$routeConfig","useAsDefault","accountApi","loader","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","getCompanyMember","member","companyId","organizations","emails","parent","prev","confirm","when","isLoading","func","accountManager","confirmService","$translate","corporateApiErrorHelper","currentMember","addNewAddress","last","components","validate","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","confirmed","splice","companyMember","handler","clearErrors","addComponent","removeComponent","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","roleService","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","entries","totalItems","totalCount","available","forEach","role","securityAccounts","addNewMemberFieldsConfig","field","disabled","visible","required","init","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","adminName","adminEmail","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","fieldsConfig","memberComponent","submitMember","$event","querySelector","orderHelper","orderApi","isShowPayment","lastPayment","sortBy","inPayments","findWhere","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","showPayment","getAvailPaymentMethods","preselectedMaymentMethod","paymentMethod","isValid","every","card","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","label","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","setForm","frm","getParams","param","substring","decodeURIComponent","registerMemberFieldsConfig","complete","getRegisterInfoByInvite","companyName","register","registerByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","method","updateUser","getRoles","coupon","onApplyCoupon","onRemoveCoupon","checkoutStep","$onInit","$onDestroy","getAvailShippingMethods","onSelectShippingMethod","getMethodId","shipmentMethodCode","optionName","availShippingMethods","selectedMethod","loading","availMethods","shipmentMethodOption","selectMethod","shippingMethod","wizard","stepDisabled","onNextStep","canEnter","final","addStep","onFinish","onInitialized","rebuildStepsLinkedList","nextStep","prevStep","goToStep","step","currentStep","promise","isFunction","updatePayment","checkout","reloadCart","handlePostPaymentResult","validateCheckout","paymentGatewayCode","deliveryAddress","appliedSuccessfully","errorCode","payments","canCartBeRecurring","isReccuring","paymentPlan","availablePaymentPlans","intervalCount","applyCoupon","processing","totalWithTax","selectShippingMethod","updateShipment","savePaymentPlan","isRecurringChanged","isRecurring","validationContainer","editMode","onUpdate","populateRegionalDataForAddress","regions","setAddressRegion","region","types","$valid","$filter","val","bankCardHolderName","level","inputClass","placeholder","requiredError","autofocus","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","pattern","getFieldConfig","configItem","rolesComponent","showField","disableField","requiredField","elem","$parsers","unshift","$$parentForm","Password","onSelectMethod","methods","availPaymentMethods","save","accounts","availableRoles","availableRole","getRole","$onChanges","selectRole","assigned","isDropdown","subtitle","pickupMethodCode","shipmentType","isChanging","shipmentAddress","shipmentFulfillmentCenter","defaultShippingAddress","fulfillmentCenter","dropdownScope","appendTo","focusToggleElement","dropdownCtrl","autoClose","toggle","closeDropdown","$apply","ctrls","hasClass","dropdownToggleCtrl","addClass","openDropdown","listService","selectDefault","default","selected","selectList","isEmpty","user","selectTab","tabName","selectedList","selectedTab","addToCart","productAdded","removeList","reload","generateLink","sharedLink","substr","lastIndexOf","addToCartAllProducts","createList","listSettings","accountLists","listPreSetting","checkLocation","compareProductInLists","buttonInvalid","toListsDialogDataModel","addProductToWishlist","signInToProceed","availableLists","primaryImage","createdDate","inProgress","itemAdded","addProductToList","modifiedBy","description","setDefault","submitSettings"],"mappings":"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","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('collectionController', ['$scope', '$location', function ($scope, $location) {\r\n    var $ctrl = this;\r\n    $ctrl.sortModes = {\r\n        'manual': 'collections.sorting.featured',\r\n        'best-selling': 'collections.sorting.best_selling',\r\n        'title-ascending': 'collections.sorting.az',\r\n        'title-descending': 'collections.sorting.za',\r\n        'price-ascending': 'collections.sorting.price_ascending',\r\n        'price-descending': 'collections.sorting.price_descending',\r\n        'createddate-descending': 'collections.sorting.date_descending',\r\n        'createddate-ascending': 'collections.sorting.date_ascending'\r\n    };\r\n    $ctrl.viewQuery = { view: 'grid' };\r\n    $ctrl.generatePageSizes = function (capacity, steps) {\r\n        $ctrl.pageSizeQuery = { page_size: capacity };\r\n        // for example            start: 16 stop: 16 * 3 + 1 = 49 step: 16\r\n        $ctrl.pageSizes = _.range(capacity, capacity * steps + 1, capacity);\r\n    }\r\n    $ctrl.keywordQuery = { keyword: null };\r\n}]);\r\n","storefrontApp.controller('universalDialogController', ['$scope', '$uibModalInstance', 'dialogData', function ($scope, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function (result) {\r\n        if (result) {\r\n            $uibModalInstance.close(result);\r\n        } else {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['$compile', 'marketingService', function ($compile, marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html($compile(response.data)(scope));\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterSource', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        controller: function() { },\r\n        link: function (scope, element, attrs, ctrl) {\r\n            var onKeyPress = function (event) {\r\n                if (event.keyCode === 13) { // Enter\r\n                    ctrl.element[0].click();\r\n                }\r\n            };\r\n            element.on('keypress', onKeyPress);\r\n            scope.$on('$destroy', function () {\r\n                element.off('keypress', onKeyPress);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterTarget', [function () {\r\n    return {\r\n        restrict: \"A\",\r\n        require: \"^vcEnterSource\",\r\n        link: function (scope, element, attrs, ctrl) {\r\n            ctrl.element = element;\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcQuerySource', ['$parse', 'searchQueryService', function ($parse, searchQueryService) {\r\n    return {\r\n        restrict: \"A\",\r\n        compile: function (tElem, tAttr) {\r\n            if (!tAttr.href) {\r\n                return function(scope, element, attrs) {\r\n                    // If the linked element is not an anchor tag anymore, do nothing\r\n                    if (element[0].nodeName.toLowerCase() !== 'a') return;\r\n\r\n                    // get query from current url, replace query parts with specified parts and set href\r\n                    scope.$watch(function() {\r\n                         return [attrs.vcQuerySource, attrs.queryType];\r\n                    }, function (obj) {\r\n                        var querySource = $parse(obj[0])(scope);\r\n                        var queryType = $parse(obj[1])(scope);\r\n                        var href = searchQueryService.getLink(querySource, queryType);\r\n                        element.attr(\"href\", href);\r\n                    }, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcQueryTarget', ['$parse', 'searchQueryService', function ($parse, searchQueryService) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            var vcQueryTarget = $parse(attrs.vcQueryTarget);\r\n            // get requested keys and set ng-model value to value of ?key1=value1&key2=value2\r\n            var t = vcQueryTarget(scope);\r\n            var state = searchQueryService.getState(t);\r\n            vcQueryTarget.assign(scope, state);\r\n        }\r\n    }\r\n}]);\r\n\r\n// based on https://github.com/angular/angular.js/blob/master/src/ng/directive/ngInclude.js\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('ngIncludeDirective', ['$delegate', function ($delegate) {\r\n        var includeFillContentDirective = $delegate[1];\r\n        var link = includeFillContentDirective.link;\r\n        includeFillContentDirective.link = function (scope, $element, $attr, ctrl) {\r\n            if (!Object.keys($attr).includes('raw')) {\r\n                link(scope, $element, $attr, ctrl);\r\n            } else {\r\n                $element.text(ctrl.template);\r\n            }\r\n        };\r\n        includeFillContentDirective.compile = function() {\r\n            return includeFillContentDirective.link;\r\n        };\r\n        $delegate[1] = includeFillContentDirective;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n\r\nstorefrontApp.directive('vcScope', ['$animate', '$compile', function ($animate) {\r\n    return {\r\n        multiElement: true,\r\n        transclude: 'element',\r\n        priority: 600,\r\n        terminal: true,\r\n        restrict: 'A',\r\n        $$tlb: true,\r\n        link: function ($scope, $element, $attr, ctrl, $transclude) {\r\n            var childScope, block;\r\n            $transclude(function (clone) {\r\n                $element.after(clone);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('inventoryController', ['dialogService', 'fulfillmentCenterService', function (dialogService, fulfillmentCenterService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.selectFulfillmentCenter = function() {\r\n        dialogService.showDialog({ isFilter: true }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n    };\r\n\r\n    $ctrl.searchFulfillmentCenters = function() {\r\n        fulfillmentCenterService.searchFulfillmentCenters({ searchPhrase: $ctrl.searchPhrase }).then(function(response) {\r\n            $ctrl.fulfillmentCenters = response.data.results;\r\n        });\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productListController', ['$scope', '$window', 'pricingService', function ($scope, $window, pricingService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.loaded = false;\r\n    $ctrl.prices = {};\r\n\r\n    pricingService.getActualProductPrices($window.productList).then(function (response) {\r\n        var prices = response.data;\r\n        $ctrl.prices = _.object(_.map(prices, function(price) {\r\n            return [price.productId, price];\r\n        }));\r\n        $ctrl.loaded = !!prices.length;\r\n    });\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService) {\r\n        //TODO: prevent add to cart not selected variation\r\n        // display validator please select property\r\n        // display price range\r\n\r\n        $scope.allVariations = [];\r\n        $scope.allVariationsMap = {}\r\n        $scope.allVariationPropsMap = {};\r\n        $scope.filterableVariationPropsMap = { };\r\n        $scope.selectedVariation = {};\r\n        $scope.productPrice = null;\r\n        $scope.productPriceLoaded = false;\r\n\r\n        $scope.addProductToCart = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n            cartService.addLineItem(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        }\r\n\r\n        // TODO: Replace mock with real function\r\n        $scope.addProductsToCartMock = function () {\r\n            var rejection = {\r\n                data: {\r\n                    message: \"The 1 product(s) below was not added to cart:\",\r\n                    modelState: {\r\n                        \"Test\": \"Test\"\r\n                    }\r\n                }\r\n            };\r\n            var items = [\r\n                {\r\n                    id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                    name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$896.39\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$1,075.67\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$995.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$1,195.19\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,792.78\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$2,151.34\"\r\n                        }\r\n                    },\r\n                    quantity: 2,\r\n                    url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n                },\r\n                {\r\n                    id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                    name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$530.99\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$637.19\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$589.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$707.99\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,592.97\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$1,911.57\"\r\n                        }\r\n                    },\r\n                    quantity: 5,\r\n                    url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n                }\r\n            ];\r\n            var dialogData = toDialogDataModelMock(items, rejection);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        }\r\n\r\n        $scope.addProductToCartById = function (productId, quantity, event) {\r\n            event.preventDefault();\r\n            catalogService.getProduct([productId]).then(function (response) {\r\n                if (response.data && response.data.length) {\r\n                    var product = response.data[0];\r\n                    $scope.addProductToCart(product, quantity);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n            quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n            });\r\n        }\r\n\r\n        function toDialogDataModel(product, quantity) {\r\n            return { items: [angular.extend({ }, product, { quantity: quantity })] };\r\n            //     return {\r\n            //         id: product.id,\r\n            //         name: product.name,\r\n            //         imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            //         listPrice: product.price.listPrice,\r\n            //listPriceWithTax: product.price.listPriceWithTax,\r\n            //         placedPrice: product.price.actualPrice,\r\n            //         placedPriceWithTax: product.price.actualPriceWithTax,\r\n            //         quantity: quantity,\r\n            //         updated: false\r\n            //     }\r\n        }\r\n\r\n        function toDialogDataModelMock(items, rejection) {\r\n            var dialogDataModel = {};\r\n            if (rejection) {\r\n                dialogDataModel.errorMessage = rejection.data.message;\r\n                dialogDataModel.errors = rejection.data.modelState;\r\n            }\r\n            dialogDataModel.items = items;\r\n            return dialogDataModel;\r\n        }\r\n\r\n        function initialize(filters) {\r\n            var productIds = _.map($window.products, function (product) { return product.id });\r\n            if (!productIds || !productIds.length) {\r\n                return;\r\n            }\r\n            catalogService.getProduct(productIds).then(function (response) {\r\n\t\t\t\tvar product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                var allVariations = [product].concat(product.variations || []);\r\n                var filteredVariations = allVariations;\r\n                $scope.allVariations.length = 0;\r\n                if (filters) {\r\n                    var variationPropsKeys = Object.keys(filters.terms || {});\r\n                    filteredVariations = _.filter(allVariations, function(variation) {\r\n                        return _.all(variation.variationProperties, function(property) {\r\n                            return !variationPropsKeys.includes(property.displayName) || filters.terms[property.displayName].includes(property.value);\r\n                        });\r\n                    });\r\n                }\r\n                Array.prototype.push.apply($scope.allVariations, filteredVariations);\r\n                angular.copy(_.object(filteredVariations.map(function (variation) { return [variation.id, variation]; })), $scope.allVariationsMap);\r\n                angular.copy(getFlatternDistinctPropertiesMap(allVariations), $scope.allVariationPropsMap);\r\n                angular.copy(_.pick($scope.allVariationPropsMap, function (value, key, object) { return value.length > 1; }), $scope.filterableVariationPropsMap);\r\n\r\n                //Auto select initial product as default variation  (its possible because all our products is variations)\r\n                //var propertyMap = getVariationPropertyMap(product);\r\n                //_.each(_.keys(propertyMap), function (x) {\r\n                //    $scope.checkProperty(propertyMap[x][0])\r\n                //});\r\n                $scope.selectedVariation = product;\r\n            });\r\n        };\r\n\r\n        function getFlatternDistinctPropertiesMap(variations) {\r\n            var retVal = {};\r\n            _.each(variations, function (variation) {\r\n                var propertyMap = getVariationPropertyMap(variation);\r\n                //merge\r\n                _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n                });\r\n            });\r\n            return retVal;\r\n        };\r\n\r\n        function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n        function getSelectedPropsMap(variationPropsMap) {\r\n            var retVal = {};\r\n            _.each(_.keys(variationPropsMap), function (x) {\r\n                var property = _.find(variationPropsMap[x], function (y) {\r\n                    return y.selected;\r\n                });\r\n                if (property) {\r\n                    retVal[x] = [property];\r\n                }\r\n            });\r\n            return retVal;\r\n        }\r\n\r\n        function comparePropertyMaps(propMap1, propMap2) {\r\n            return _.every(_.keys(propMap1), function (x) {\r\n                var retVal = propMap2.hasOwnProperty(x);\r\n                if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n                }\r\n                return retVal;\r\n            });\r\n        };\r\n\r\n        //function findVariationBySelectedProps(variations, selectedPropMap) {\r\n        //    return _.find(variations, function (x) {\r\n        //        return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        //    });\r\n        //}\r\n\r\n        ////Method called from View when user clicks one property value\r\n        //$scope.checkProperty = function (property) {\r\n        //    //Select appropriate property and unselect previous selection\r\n        //    _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n        //        x.selected = x != property ? false : !x.selected;\r\n        //    });\r\n\r\n        //    //try to find the best variation match for selected properties\r\n        //    $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n        //};\r\n\r\n        $scope.sendToEmail = function (storeId, productId, productUrl, language) {\r\n            dialogService.showDialog({ storeId: storeId, productId: productId, productUrl: productUrl, language: language }, 'recentlyAddedCartItemDialogController', 'storefront.send-product-to-email.tpl');\r\n        };\r\n\r\n        $scope.print = function() {\r\n            $window.print();\r\n        };\r\n\r\n        $scope.$watch('filters', initialize);\r\n    }]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'mailingService', 'dialogData', function ($scope, $window, $uibModalInstance, mailingService, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.dismiss('cancel');\r\n    }\r\n\r\n    $scope.send = function(email) {\r\n        mailingService.sendProduct(dialogData.productId, { email: email, storeId: dialogData.storeId, productUrl: dialogData.productUrl, language: dialogData.language });\r\n        $uibModalInstance.close();\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('searchBarController', ['$scope', '$timeout', '$window', 'catalogService', function ($scope, $timeout, $window, catalogService) {\r\n    var timer;\r\n\r\n    $scope.query = $window.searchQuery;\r\n\r\n    $scope.getSuggestions = function () {\r\n        if (!$scope.query) {\r\n            return;\r\n        }\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.searching = true;\r\n            $scope.categorySuggestions = [];\r\n            $scope.productSuggestions = [];\r\n            var searchCriteria = {\r\n                keyword: $scope.query,\r\n                skip: 0,\r\n                take: $window.suggestionsLimit\r\n            }\r\n            catalogService.searchCategories(searchCriteria).then(function (response) {\r\n                var categories = response.data.categories;\r\n                if (categories.length > 5) {\r\n                    searchCriteria.take = $window.suggestionsLimit - 5;\r\n                    $scope.categorySuggestions = _.first(categories, 5);\r\n                } else {\r\n                    searchCriteria.take = $window.suggestionsLimit - categories.length;\r\n                    $scope.categorySuggestions = categories;\r\n                }\r\n                catalogService.search(searchCriteria).then(function (response) {\r\n                    var products = response.data.products;\r\n                    $scope.productSuggestions = products;\r\n                    $scope.searching = false;\r\n                });\r\n            });\r\n        }, 300);\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('fulfillmentCenterService', ['$http', 'apiBaseUrl', function($http, apiBaseUrl) {\r\n    return {\r\n        searchFulfillmentCenters: function (criteria) {\r\n            return $http.post(apiBaseUrl + 'api/fulfillment/search/centers', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', { products: products });\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', { searchCriteria: criteria });\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', { searchCriteria: criteria });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('searchQueryService', ['$location', '$httpParamSerializer', function ($location, $httpParamSerializer) {\r\n    return {\r\n        // Converts search query strings like '?key=value1[,value2]' or '?key=key1:value1[,value2[;key2:value3[,value4]]]' to search query state object\r\n        getState: function(obj) {\r\n            var result = {};\r\n            // ?key=valueString&key=valueString\r\n            _.each(Object.keys(obj), function(key) {\r\n                var valueString = $location.search()[key];\r\n                // ?key=value or ?key=key1:value1\r\n                if (valueString) {\r\n                    if (!valueString.match(/[:]/g)) {\r\n                        result[key] = valueString.split(',');\r\n                    } else {\r\n                        var pairs = { };\r\n                        // ?key=key1:value1;key2:value2\r\n                        var pairsString = valueString.split(';');\r\n                        _.each(pairsString, function(pairString) {\r\n                            var pair = pairString.split(':');\r\n                            var key = pair[0];\r\n                            var values = pair[1].split(',');\r\n                            pairs[key] = values;\r\n                        });\r\n                        result[key] = pairs;\r\n                    }\r\n                    result[key] = !angular.isArray(obj[key]) && result[key].length === 1 ? result[key][0] : result[key];\r\n                }\r\n            });\r\n            result = angular.extend({ }, obj, result);\r\n            return result;\r\n        },\r\n\r\n        // Gets link like http://localhost/collection?key=key1:value1,value2;key2:value3,value4 from search query state object\r\n        getLink: function(obj, type) {\r\n            var query = $location.search();\r\n            var state = this.getState(query);\r\n            // add or replace value when defined, remove when null and leave old when undefined\r\n            var process = function (src, dest, fn, isArray) {\r\n                var chain = _.chain(_.union(dest ? Object.keys(dest) : [], src ? Object.keys(src) : []))\r\n                    .filter(function(key) {\r\n                        return dest && (dest[key] || !(key in dest)) || src[key] || !(key in src);\r\n                    })\r\n                    .map(function(key) {\r\n                        return fn(key, src ? src[key] : null, dest ? dest[key] : null);\r\n                    })\r\n                    .compact();\r\n                if (!isArray) {\r\n                    chain = chain.object();\r\n                }\r\n                return chain.value();\r\n            }\r\n            var selectValue = function(srcVal, destVal) {\r\n                if (destVal && angular.isArray(destVal) || angular.isArray(srcVal)) {\r\n                    destVal = destVal ? _.compact(destVal) : null;\r\n                    srcVal = _.chain([srcVal]).flatten().compact().value();\r\n                    return (type === 'checkable' ? _.difference((destVal || []).concat(srcVal), _.intersection(destVal, srcVal)) : destVal || srcVal).join(',');\r\n                } else {\r\n                    return destVal || srcVal;\r\n                }\r\n            }\r\n            var result = process(state, obj, function (key, srcVal, destVal) {\r\n                var value;\r\n                // replace value when ?key=value and merge objects when ?key=key1:value1\r\n                if (destVal && angular.isObject(destVal) && !angular.isArray(destVal) || angular.isObject(srcVal) && !angular.isArray(srcVal)) {\r\n                    if (srcVal) {\r\n                        if (!angular.isObject(srcVal) || angular.isArray(srcVal))\r\n                            throw 'Type of ' + key + ' in search query and object is different';\r\n                    } else {\r\n                        srcVal = angular.isArray(destVal) ? [] : {};\r\n                    }\r\n                    value = process(srcVal, destVal, function (subKey, subSrcVal, subDestVal) {\r\n                        var subVal = selectValue(subSrcVal, subDestVal);\r\n                        return subVal ? subKey + ':' + (angular.isArray(subVal) ? subVal.join(',') : subVal) : null;\r\n                    }, true);\r\n                    value = value.join(';');\r\n                } else {\r\n                    value = selectValue(srcVal, destVal);\r\n                }\r\n                return value ? [key, value] : [];\r\n            }, false);\r\n            var url = new URL($location.absUrl());\r\n            url.search = $httpParamSerializer(result);\r\n            return url.href;\r\n        }\r\n    }\r\n}]);\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'storefrontApp', 'satellizer'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n.service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}])\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, loader) {\r\n\r\n    $scope.loader = loader;\r\n    $scope.memberComponent = null;\r\n    $scope.newMember = null;\r\n\r\n    $scope.registerMemberFieldsConfig = [\r\n        {\r\n            field: 'CompanyName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Email',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'UserName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Password',\r\n            disabled: false,\r\n            visible:  true,\r\n            required: true\r\n        }\r\n    ];\r\n\r\n    function getParams() {\r\n        var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n        for (i in params) {\r\n            if (params.hasOwnProperty(i)) {\r\n                if (params[i] === \"\") continue;\r\n\r\n                param = params[i].split(\"=\");\r\n                result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    $scope.init = function (storeId) {\r\n        $scope.newMember = {};\r\n        $scope.newMember.storeId = storeId;\r\n\r\n        $scope.complete = false;\r\n\r\n        var invite = getParams().invite;\r\n        if (invite) {\r\n            $scope.registerMemberFieldsConfig[0] = {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n            $scope.registerMemberFieldsConfig[1] = {\r\n                field: 'Email',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n\r\n            $scope.newMember.invite = invite;\r\n            $scope.loader.wrapLoading(function() {\r\n                return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                    .then(function(result) {\r\n                        if (result.message) {\r\n                            $scope.error = result.message;\r\n                            return $q.reject(\"Invite is invalid\");\r\n                        }\r\n                        $scope.newMember.companyName = result.companyName;\r\n                        $scope.newMember.email = result.email;\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.register = function () {\r\n        $scope.error = null;\r\n\r\n        if (this.memberComponent.validate()) {\r\n            if ($scope.newMember.invite) {\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerByInvite({ invite: $scope.newMember.invite }, $scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            } else {\r\n                $scope.loader.wrapLoading(function() {\r\n                    return corporateRegisterApi.register($scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { url: apiBaseUrl + 'api/b2b/register', method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutCoupon', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-coupon.tpl.liquid\",\r\n\tbindings: {\r\n\t\tcoupon: '=',\r\n\t\tonApplyCoupon: '&',\r\n\t\tonRemoveCoupon: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\t\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutEmail', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-email.tpl.html\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\temail: '='\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\r\n\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t};\r\n\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutShippingMethods', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-shippingMethods.tpl.liquid\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\tshipment: '=',\r\n\t\tgetAvailShippingMethods: '&',\r\n\t\tonSelectShippingMethod: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\r\n\t\tvar ctrl = this;\r\n\t\t\r\n\t\tctrl.availShippingMethods = [];\r\n\t\tctrl.selectedMethod = {};\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t\tctrl.loading = true;\r\n\t\t\tctrl.getAvailShippingMethods(ctrl.shipment).then(function (availMethods) {\r\n\t\t\t\tctrl.availShippingMethods = availMethods;\r\n\t\t\t\t_.each(ctrl.availShippingMethods, function (x) {\r\n\t\t\t\t\tx.id = getMethodId(x);\r\n\t\t\t\t});\r\n\t\t\t\tctrl.selectedMethod = _.find(ctrl.availShippingMethods, function (x) { return ctrl.shipment.shipmentMethodCode == x.shipmentMethodCode && ctrl.shipment.shipmentMethodOption == x.optionName });\r\n\t\t\t\tctrl.loading = false;\r\n\t\t\t});\r\n\t\t};\t\t\r\n\t\t\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\t\t\r\n\t\tfunction getMethodId(method) {\r\n\t\t\tvar retVal = method.shipmentMethodCode;\r\n\t\t\tif (method.optionName) {\r\n\t\t\t\tretVal += ':' + method.optionName;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\t\tctrl.selectMethod = function (method) {\r\n\t\t\tctrl.selectedMethod = method;\r\n\t\t\tctrl.onSelectShippingMethod({ shippingMethod: method });\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizardStep', {\r\n    templateUrl: \"themes/assets/js/checkout/checkout-wizard-step.tpl.html\",\r\n    transclude: true,\r\n    require: {\r\n        wizard: '^vcCheckoutWizard'\r\n    },\r\n    bindings: {\r\n        name: '@',\r\n        title: '@',\r\n        stepDisabled: '=?',\r\n        onNextStep: '&?',\r\n        canEnter: '=?',\r\n        final: '<?'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.components = [];\r\n        ctrl.canEnter = true;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.wizard.addStep(this);\r\n        };\r\n\r\n        ctrl.addComponent = function (component) {\r\n            ctrl.components.push(component);\r\n        };\r\n        ctrl.removeComponent = function (component) {\r\n            ctrl.components = _.without(ctrl.components, component);\r\n        };\r\n        ctrl.validate = function () {\r\n            return _.every(ctrl.components, function (x) { return typeof x.validate !== \"function\" || x.validate(); });\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizard', {\r\n\ttransclude: true,\r\n\ttemplateUrl: 'themes/assets/js/checkout/checkout-wizard.tpl.html',\r\n\tbindings: {\r\n\t\twizard: '=',\r\n\t\tloading: '=',\r\n\t\tonFinish: '&?',\r\n\t\tonInitialized: '&?'\r\n\t},\r\n\tcontroller: ['$scope', function ($scope) {\r\n\t\tvar ctrl = this;\r\n\t\tctrl.wizard = ctrl;\r\n\t\tctrl.steps = [];\t\r\n\t\tctrl.goToStep = function (step) {\r\n\t\t\tif (angular.isString(step))\r\n\t\t\t{\r\n\t\t\t\tstep = _.find(ctrl.steps, function (x) { return x.name == step; });\r\n\t\t\t}\r\n\t\t\tif (step && ctrl.currentStep != step && step.canEnter) {\r\n\t\t\t\tif (!step.final) {\r\n\t\t\t\t\tstep.isActive = true;\r\n\t\t\t\t\tif (ctrl.currentStep) {\r\n\t\t\t\t\t\tctrl.currentStep.isActive = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctrl.currentStep = step;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ctrl.onFinish)\r\n\t\t\t\t{\r\n\t\t\t\t\tctrl.onFinish();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.nextStep = function () {\r\n\t\t\tif (!ctrl.currentStep.validate || ctrl.currentStep.validate()) {\r\n\t\t\t\tif (ctrl.currentStep.nextStep) {\r\n\t\t\t\t\tif (ctrl.currentStep.onNextStep) {\r\n\t\t\t\t\t\t//evaluate onNextStep function\r\n\t\t\t\t\t\tvar promise = ctrl.currentStep.onNextStep();\r\n\t\t\t\t\t\t//For promise function need to delay going to next step\r\n\t\t\t\t\t\tif (promise && angular.isFunction(promise.then)) {\r\n\t\t\t\t\t\t\tpromise.then(function () {\r\n\t\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.prevStep = function () {\r\n\t\t\tctrl.goToStep(ctrl.currentStep.prevStep);\r\n\t\t};\r\n\r\n\t\tfunction rebuildStepsLinkedList(steps) {\r\n\t\t\tvar nextStep = undefined;\r\n\t\t\tfor (var i = steps.length; i-- > 0;) {\r\n\t\t\t\tsteps[i].prevStep = undefined;\r\n\t\t\t\tsteps[i].nextStep = undefined;\r\n\t\t\t\tif (nextStep && !steps[i].disabled) {\r\n\t\t\t\t\tnextStep.prevStep = steps[i]\r\n\t\t\t\t};\t\t\t\t\r\n\t\t\t\tif (!steps[i].disabled) {\r\n\t\t\t\t\tsteps[i].nextStep = nextStep;\r\n\t\t\t\t\tnextStep = steps[i];\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t};\r\n\t\t\r\n\t\tctrl.addStep = function (step) {\r\n\t\t\tctrl.steps.push(step);\r\n\t\t\t$scope.$watch(function () { return step.disabled; }, function () {\r\n\t\t\t\trebuildStepsLinkedList(ctrl.steps);\t\t\t\r\n\t\t\t});\r\n\t\t\trebuildStepsLinkedList(ctrl.steps);\r\n\t\t\tif(!ctrl.currentStep)\r\n\t\t\t{\r\n\t\t\t\tctrl.goToStep(step);\r\n\t\t\t}\r\n\t\t\tif (step.final && ctrl.onInitialized)\r\n\t\t\t{\r\n\t\t\t\tctrl.onInitialized();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}]\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.checkout\";\r\n\r\nif (storefrontAppDependencies != undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['credit-cards', 'angular.filter'])\r\n.controller('checkoutController', ['$rootScope', '$scope', '$window', 'cartService',\r\n    function ($rootScope, $scope, $window, cartService) {\r\n        $scope.checkout = {\r\n            wizard: {},\r\n            paymentMethod: {},\r\n            shipment: {},\r\n            payment: {},\r\n            coupon: {},\r\n            availCountries: [],\r\n            loading: false,\r\n            isValid: false\r\n        };\r\n\r\n        $scope.validateCheckout = function (checkout) {\r\n            checkout.isValid = checkout.payment && checkout.payment.paymentGatewayCode;\r\n            if (checkout.isValid && !checkout.billingAddressEqualsShipping) {\r\n                checkout.isValid = angular.isObject(checkout.payment.billingAddress);\r\n            }\r\n            if (checkout.isValid && checkout.cart && checkout.cart.hasPhysicalProducts) {\r\n                checkout.isValid = angular.isObject(checkout.shipment)\r\n                                && checkout.shipment.shipmentMethodCode\r\n                                && angular.isObject(checkout.shipment.deliveryAddress);\r\n            }\r\n        };\r\n\r\n        $scope.reloadCart = function () {\r\n            return cartService.getCart().then(function (response) {\r\n                var cart = response.data;\r\n                if (!cart || !cart.id) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart');\r\n                }\r\n                else {\r\n                    $scope.checkout.cart = cart;\r\n                    $scope.checkout.coupon = cart.coupon || $scope.checkout.coupon;\r\n                    if ($scope.checkout.coupon.code && !$scope.checkout.coupon.appliedSuccessfully) {\r\n                        $scope.checkout.coupon.errorCode = 'InvalidCouponCode';\r\n                    }\r\n                    if (cart.payments.length) {\r\n                        $scope.checkout.payment = cart.payments[0];\r\n                        $scope.checkout.paymentMethod.code = $scope.checkout.payment.paymentGatewayCode;\r\n                    }\r\n                    if (cart.shipments.length) {\r\n                        $scope.checkout.shipment = cart.shipments[0];\r\n                    }\r\n                    $scope.checkout.billingAddressEqualsShipping = cart.hasPhysicalProducts && !angular.isObject($scope.checkout.payment.billingAddress);\r\n\r\n                    $scope.checkout.canCartBeRecurring = $scope.customer.isRegisteredUser && _.all(cart.items, function (x) { return !x.isReccuring });\r\n                    $scope.checkout.paymentPlan = cart.paymentPlan && _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: cart.paymentPlan.intervalCount, interval: cart.paymentPlan.interval }) ||\r\n                                                                      _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n                }\r\n                $scope.validateCheckout($scope.checkout);\r\n                return cart;\r\n            });\r\n        };\r\n\r\n        $scope.applyCoupon = function (coupon) {\r\n            coupon.processing = true;\r\n            cartService.addCoupon(coupon.code).then(function () {\r\n                coupon.processing = false;\r\n                $scope.reloadCart();\r\n            }, function (response) {\r\n                coupon.processing = false;\r\n            });\r\n        }\r\n\r\n        $scope.removeCoupon = function (coupon) {\r\n            coupon.processing = true;\r\n            cartService.removeCoupon().then(function (response) {\r\n                coupon.processing = false;\r\n                $scope.checkout.coupon = {};\r\n                $scope.reloadCart();\r\n            }, function (response) {\r\n                coupon.processing = false;\r\n            });\r\n        }\r\n\r\n        $scope.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($scope.checkout.payment, paymentMethod);\r\n            $scope.checkout.payment.paymentGatewayCode = paymentMethod.code;\r\n            $scope.checkout.payment.amount = angular.copy($scope.checkout.cart.total);\r\n            $scope.checkout.payment.amount.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            updatePayment($scope.checkout.payment);\r\n        };\r\n\r\n        function getAvailCountries() {\r\n            //Load avail countries\r\n            return cartService.getCountries().then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCountryRegions = function (country) {\r\n            return cartService.getCountryRegions(country.code3).then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getAvailShippingMethods = function (shipment) {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailableShippingMethods(shipment.id).then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        }\r\n\r\n        $scope.getAvailPaymentMethods = function () {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailablePaymentMethods().then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.selectShippingMethod = function (shippingMethod) {\r\n            if (shippingMethod) {\r\n                $scope.checkout.shipment.shipmentMethodCode = shippingMethod.shipmentMethodCode;\r\n                $scope.checkout.shipment.shipmentMethodOption = shippingMethod.optionName;\r\n            }\r\n            else {\r\n                $scope.checkout.shipment.shipmentMethodCode = undefined;\r\n                $scope.checkout.shipment.shipmentMethodOption = undefined;\r\n            }\r\n            $scope.updateShipment($scope.checkout.shipment);\r\n        };\r\n\r\n        $scope.updateShipment = function (shipment) {\r\n            if (shipment.deliveryAddress) {\r\n                $scope.checkout.shipment.deliveryAddress.type = 'Shipping';\r\n            };\r\n            //Does not pass validation errors to API\r\n            shipment.validationErrors = undefined;\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdateShipment(shipment).then($scope.reloadCart);\r\n            });\r\n        };\r\n\r\n        $scope.createOrder = function () {\r\n            updatePayment($scope.checkout.payment).then(function () {\r\n                $scope.checkout.loading = true;\r\n                cartService.createOrder($scope.checkout.paymentMethod.card).then(function (response) {\r\n                    var order = response.data.order;\r\n                    var orderProcessingResult = response.data.orderProcessingResult;\r\n                    var paymentMethod = response.data.paymentMethod;\r\n                    handlePostPaymentResult(order, orderProcessingResult, paymentMethod);\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.savePaymentPlan = function () {\r\n            wrapLoading(function () {\r\n                return cartService.addOrUpdatePaymentPlan($scope.checkout.paymentPlan).then(function () {\r\n                    $scope.checkout.cart.paymentPlan = $scope.checkout.paymentPlan;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.isRecurringChanged = function (isRecurring) {\r\n            if ($scope.checkout.paymentPlan) {\r\n                if (isRecurring) {\r\n                    $scope.savePaymentPlan();\r\n                } else {\r\n                    wrapLoading(function () {\r\n                        return cartService.removePaymentPlan().then(function () {\r\n                            $scope.checkout.cart.paymentPlan = undefined;\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        function updatePayment(payment) {\r\n            if ($scope.checkout.billingAddressEqualsShipping) {\r\n                payment.billingAddress = undefined;\r\n            }\r\n\r\n            if (payment.billingAddress) {\r\n                payment.billingAddress.type = 'Billing';\r\n            }\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdatePayment(payment).then($scope.reloadCart);\r\n            });\r\n        }\r\n\r\n        function handlePostPaymentResult(order, orderProcessingResult, paymentMethod) {\r\n            if (!orderProcessingResult.isSuccess) {\r\n                $scope.checkout.loading = false;\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: ['Error in new order processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                    message: orderProcessingResult.error,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'preparedform' && orderProcessingResult.htmlForm) {\r\n                $scope.outerRedirect($scope.baseUrl + 'cart/checkout/paymentform?orderNumber=' + order.number);\r\n            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'redirection' && orderProcessingResult.redirectUrl) {\r\n                $window.location.href = orderProcessingResult.redirectUrl;\r\n            } else {\r\n                if (!$scope.customer.isRegisteredUser) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart/thanks/' + order.number);\r\n                } else {\r\n                    $scope.outerRedirect($scope.baseUrl + 'account#/orders/' + order.number);\r\n                }\r\n            }\r\n        }\r\n\r\n        function wrapLoading(func) {\r\n            $scope.checkout.loading = true;\r\n            return func().then(function (result) {\r\n                $scope.checkout.loading = false;\r\n                return result;\r\n            },\r\n                function () {\r\n                    $scope.checkout.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.initialize = function () {\r\n\r\n            $scope.reloadCart().then(function (cart) {\r\n                $scope.checkout.wizard.goToStep(cart.hasPhysicalProducts ? 'shipping-address' : 'payment-method');\r\n            });\r\n        };\r\n\r\n        getAvailCountries().then(function (countries) {\r\n            $scope.checkout.availCountries = countries;\r\n        });\r\n\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentPlan', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentPlan.tpl.html\",\r\n    bindings: {\r\n    },\r\n    controller: ['$scope', '$localStorage', function($scope, $localStorage) {\r\n        var $ctrl = this;\r\n\r\n        $scope.$watch(function() {\r\n            return $ctrl.availablePaymentPlans;\r\n        }, function (availablePaymentPlans) {\r\n            if (availablePaymentPlans) {\r\n                $ctrl.paymentPlan = $localStorage['paymentPlan'];\r\n                $ctrl.type = $ctrl.paymentPlan ? 'auto-reorder' : 'one-time';\r\n                $ctrl.paymentPlan = ($ctrl.paymentPlan ? _.findWhere($ctrl.availablePaymentPlans, { intervalCount: $ctrl.paymentPlan.intervalCount, interval: $ctrl.paymentPlan.interval }) : undefined) ||\r\n                    _.findWhere($ctrl.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n            }\r\n        });\r\n\r\n        $ctrl.save = function() {\r\n            if ($ctrl.type === 'auto-reorder') {\r\n                $localStorage['paymentPlan'] = $ctrl.paymentPlan;\r\n            } else {\r\n                $localStorage['paymentPlan'] = undefined;\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcShippingType', {\r\n    templateUrl: \"themes/assets/js/common-components/shippingType.tpl.html\",\r\n    bindings: {\r\n        isDropdown: '<',\r\n        title: \"@\",\r\n        subtitle: \"@\",\r\n        pickupMethodCode: \"@\"\r\n    },\r\n    controller: ['$scope', '$localStorage', 'storefrontApp.mainContext', 'dialogService', function($scope, $localStorage, mainContext, dialogService) {\r\n        var $ctrl = this;\r\n        $ctrl.shipmentType = $localStorage['shipmentType'];\r\n        if (!$ctrl.shipmentType) {\r\n            $ctrl.shipmentType = 'shipping';\r\n            $ctrl.isChanging = true;\r\n        }\r\n        $ctrl.shipmentAddress = $localStorage['shipmentAddress'];\r\n        $ctrl.shipmentFulfillmentCenter = $localStorage['shipmentFulfillmentCenter'];\r\n        $scope.$watch(\r\n            function() { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    $ctrl.customer = customer;\r\n                    if (!$ctrl.shipmentAddress && $ctrl.customer.defaultShippingAddress) {\r\n                        $ctrl.shipmentAddress = { postalCode: $ctrl.customer.defaultShippingAddress.postalCode };\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        $ctrl.selectFulfillmentCenter = function () {\r\n            var modalInstance = dialogService.showDialog(null, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n            modalInstance.result.then(function(fulfillmentCenter) {\r\n                $ctrl.shipmentFulfillmentCenter = fulfillmentCenter;\r\n                if (!$ctrl.isDropdown) {\r\n                    $ctrl.save();\r\n                }\r\n            });\r\n        };\r\n        $ctrl.save = function (isDefined) {\r\n            if (isDefined !== false) {\r\n                $localStorage['shipmentType'] = $ctrl.shipmentType;\r\n                if ($ctrl.shipmentType === 'shipping') {\r\n                    $localStorage['shipmentAddress'] = $ctrl.shipmentAddress;\r\n                } else {\r\n                    $localStorage['shipmentFulfillmentCenter'] = $ctrl.shipmentFulfillmentCenter;\r\n                }\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<'\r\n\t}\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownService', ['$delegate', function($delegate) {\r\n        var service = $delegate;\r\n        var close = service.close;\r\n        service.close = function (dropdownScope, element, appendTo) {\r\n            dropdownScope.focusToggleElement = function() {};\r\n            close(dropdownScope, element, appendTo);\r\n        }\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function () {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('dropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcToggleOnMouseEnter', function () {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            var dropdownToggleCtrl = ctrls[1];\r\n            if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                return;\r\n            }\r\n\r\n            element.addClass('toggle-on-mouse-enter');\r\n\r\n            var openDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(true);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('mouseenter', openDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('mouseenter', openDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n"]}