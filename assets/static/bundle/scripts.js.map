{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/collection.js","../../../assets/js/consts.js","../../../assets/js/dialogs.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/inventory.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/prism.js","../../../assets/js/product-compare.js","../../../assets/js/product-list.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/services.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/checkout/checkout-coupon.js","../../../assets/js/checkout/checkout-email.js","../../../assets/js/checkout/checkout-shippingMethods.js","../../../assets/js/checkout/checkout-wizard-step.js","../../../assets/js/checkout/checkout-wizard.js","../../../assets/js/checkout/checkout.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/paymentPlan.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/searchBar.js","../../../assets/js/common-components/shippingType.js","../../../assets/js/common-components/totals.js","../../../assets/js/directives/dropdown.js","../../../assets/js/directives/dropdownClose.js","../../../assets/js/directives/includeRaw.js","../../../assets/js/directives/query-source.js","../../../assets/js/directives/query-target.js","../../../assets/js/directives/scope.js","../../../assets/js/directives/toggleOnMouseEnter.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js","../../../assets/js/services/search-query.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","console","log","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","split","some","permissionWithScope","constant","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","parse","data","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","protocol","host","parseFloat","get","now","storefrontApp","controller","$scope","cartService","catalogService","getCart","cartIsUpdating","then","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","changeLineItemQuantity","lineItemId","quantity","lineItem","find","$invalid","initialQuantity","cancel","changeLineItemPrice","newPrice","initialItems","removeLineItem","copy","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","outerRedirect","baseUrl","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","criteria","keyword","start","pageSize","search","products","selectSearchedProduct","product","selectedSearchedProduct","addProductToCart","addLineItem","getCartItemsCount","cartItemsCount","$on","$uibModalInstance","dialogData","close","redirect","url","$ctrl","sortModes","manual","best-selling","title-ascending","title-descending","price-ascending","price-descending","createddate-descending","createddate-ascending","viewQuery","view","generatePageSizes","capacity","steps","pageSizeQuery","page_size","pageSizes","range","keywordQuery","None","ItemInfo","ItemAssets","ItemProperties","ItemAssociations","ItemEditorialReviews","Variations","Seo","Links","Inventory","Outlines","ReferencedAssociations","ItemWithPrices","ItemWithDiscounts","ItemWithVendor","ItemWithPaymentPlan","ItemSmall","ItemMedium","ItemLarge","dismiss","directive","$compile","marketingService","restrict","link","scope","element","attrs","getDynamicContent","html","replace","ctrl","onKeyPress","keyCode","click","on","off","require","errorHandler","attr","fallbackSrc","filter","input","extention","pop","suffix","dialogService","fulfillmentCenterService","selectFulfillmentCenter","showDialog","isFilter","searchFulfillmentCenters","searchPhrase","fulfillmentCenters","customerService","$watch","currentPath","$$path","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","absUrl","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","getCurrentCustomer","addressId","each","addresses","isContact","memberType","orderService","orderNumber","getOrder","order","authService","toggleVisibilityBasedOnPermission","permissionValue","show","hide","vaPermission","Prism","languages","markup","insertBefore","script","pattern","lookbehind","inside","alias","$localStorage","formatNumber","number","float","isNaN","isInProductCompareList","productId","p","addProductToCompareList","preventDefault","existingProduct","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","toLowerCase","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","pricingService","loaded","prices","getActualProductPrices","productList","object","price","quoteRequestService","toDialogDataModel","extend","toDialogDataModelMock","rejection","dialogDataModel","errorMessage","message","errors","modelState","initialize","filters","productIds","allVariations","concat","variations","filteredVariations","variationPropsKeys","Object","keys","terms","variation","all","variationProperties","includes","allVariationsMap","getFlatternDistinctPropertiesMap","allVariationPropsMap","pick","filterableVariationPropsMap","selectedVariation","retVal","propertyMap","getVariationPropertyMap","union","groupBy","productPrice","productPriceLoaded","addProductsToCartMock","Test","imageUrl","actualPrice","formattedAmount","actualPriceWithTax","listPrice","listPriceWithTax","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToActualQuoteRequest","addProductToQuoteRequest","sendToEmail","storeId","productUrl","mailingService","email","sendProduct","getQuoteRequest","quoteRequest","billingAddress","countryCode","getCountryRegions","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","getCountries","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","amount","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","contains","addTierPrice","salePrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","a","submitQuoteRequest","isRegisteredUser","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","updated","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","isString","match","values","getRecommendedProducts","startRecordInteraction","$uibModal","templateUrl","resolve","$http","post","postFeedback","model","getTime","placeName","searchCategories","put","delete","clearCart","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","$q","getOrCreateMyLists","lists","list","author","Math","floor","random","toString","reject","getSharedLists","sharedLists","cartId","isDefined","getWishlist","listName","addItemToList","listId","containsInList","currentList","addSharedList","myLists","sharedCartId","searchedList","clearList","removeFromFriendsLists","currentId","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","moduleName","undefined","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","$templateCache","component","bindings","$routeConfig","useAsDefault","accountApi","loader","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","getCompanyMember","member","companyId","first","organizations","emails","parent","prev","confirm","when","isLoading","func","accountManager","confirmService","$translate","corporateApiErrorHelper","currentMember","addNewAddress","last","components","validate","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirmed","splice","companyMember","handler","clearErrors","addComponent","removeComponent","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","roleService","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","skip","take","entries","totalItems","totalCount","available","forEach","role","securityAccounts","addNewMemberFieldsConfig","field","disabled","visible","required","init","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","adminName","adminEmail","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","fieldsConfig","memberComponent","submitMember","$event","querySelector","orderHelper","orderApi","isShowPayment","lastPayment","sortBy","inPayments","findWhere","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","showPayment","getAvailPaymentMethods","preselectedMaymentMethod","paymentMethod","isValid","every","card","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","join","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","label","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","setForm","frm","getParams","param","substring","decodeURIComponent","registerMemberFieldsConfig","complete","getRegisterInfoByInvite","companyName","register","registerByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","method","updateUser","getRoles","coupon","onApplyCoupon","onRemoveCoupon","checkoutStep","$onInit","$onDestroy","getAvailShippingMethods","onSelectShippingMethod","getMethodId","shipmentMethodCode","optionName","availShippingMethods","selectedMethod","loading","availMethods","shipmentMethodOption","selectMethod","shippingMethod","transclude","wizard","stepDisabled","onNextStep","canEnter","final","addStep","onFinish","onInitialized","rebuildStepsLinkedList","nextStep","prevStep","goToStep","step","currentStep","promise","isFunction","updatePayment","checkout","reloadCart","handlePostPaymentResult","validateCheckout","paymentGatewayCode","isObject","deliveryAddress","appliedSuccessfully","errorCode","payments","canCartBeRecurring","isReccuring","paymentPlan","availablePaymentPlans","intervalCount","applyCoupon","processing","totalWithTax","selectShippingMethod","updateShipment","savePaymentPlan","isRecurringChanged","isRecurring","validationContainer","editMode","onUpdate","populateRegionalDataForAddress","regions","setAddressRegion","region","types","$valid","$filter","val","bankCardHolderName","level","inputClass","placeholder","requiredError","autofocus","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","getFieldConfig","configItem","rolesComponent","showField","disableField","requiredField","elem","$parsers","unshift","$$parentForm","Password","onSelectMethod","methods","availPaymentMethods","priority","save","accounts","availableRoles","availableRole","getRole","$onChanges","selectRole","assigned","searching","noResults","query","categoriesLabel","productsLabel","submitLabel","categoryLimit","productLimit","hasHint","isOpen","getSuggestions","searchCriteria","process","within","suggestion","index","isDropdown","subtitle","pickupMethodCode","shipmentType","isChanging","shipmentAddress","shipmentFulfillmentCenter","defaultShippingAddress","fulfillmentCenter","isReview","isComplete","dropdownScope","appendTo","focusToggleElement","compile","dropdownCtrl","autoClose","toggle","closeDropdown","$apply","ctrls","hasClass","includeFillContentDirective","$element","$attr","template","$parse","$httpParamSerializer","searchQueryService","tElem","tAttr","vcQuerySource","switchable","querySource","state","deserialize","merge","serialize","URL","vcQueryTarget","assign","$animate","multiElement","terminal","$$tlb","$transclude","clone","after","dropdownToggleCtrl","addClass","openDropdown","listService","selectDefault","default","selected","selectList","isEmpty","user","selectTab","tabName","selectedList","selectedTab","addToCart","productAdded","removeList","reload","generateLink","sharedLink","substr","lastIndexOf","addToCartAllProducts","createList","listSettings","accountLists","listPreSetting","checkLocation","compareProductInLists","buttonInvalid","toListsDialogDataModel","addProductToWishlist","signInToProceed","availableLists","primaryImage","createdDate","inProgress","itemAdded","addProductToList","modifiedBy","description","setDefault","submitSettings","searchQuery","defaults","deserializeValues","string","deserializePairs","pairString","changes","mergeValues","searchQueryValues","changeValues","checkedValues","difference","intersection","mergePairs","searchQueryPairs","changePairs","compact","mergedValues","serializeValues","serializePairs","pairs","mapObject"],"mappings":"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","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('collectionController', ['$scope', '$location', function ($scope, $location) {\r\n    var $ctrl = this;\r\n    $ctrl.sortModes = {\r\n        'manual': 'collections.sorting.featured',\r\n        'best-selling': 'collections.sorting.best_selling',\r\n        'title-ascending': 'collections.sorting.az',\r\n        'title-descending': 'collections.sorting.za',\r\n        'price-ascending': 'collections.sorting.price_ascending',\r\n        'price-descending': 'collections.sorting.price_descending',\r\n        'createddate-descending': 'collections.sorting.date_descending',\r\n        'createddate-ascending': 'collections.sorting.date_ascending'\r\n    };\r\n    $ctrl.viewQuery = { view: ['grid'] };\r\n    $ctrl.generatePageSizes = function (capacity, steps) {\r\n        $ctrl.pageSizeQuery = { page_size: [capacity] };\r\n        // for example            start: 16 stop: 16 * 3 + 1 = 49 step: 16\r\n        $ctrl.pageSizes = _.range(capacity, capacity * steps + 1, capacity);\r\n    }\r\n    $ctrl.keywordQuery = { keyword: [] };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.constant('itemResponseGroup', {\r\n    None: 0,\r\n    ItemInfo: 1,\r\n    ItemAssets: 1 << 1,\r\n    ItemProperties: 1 << 2,\r\n    ItemAssociations: 1 << 3,\r\n    ItemEditorialReviews: 1 << 4,\r\n    Variations: 1 << 5,\r\n    Seo: 1 << 6,\r\n    Links: 1 << 7,\r\n    Inventory: 1 << 8,\r\n    Outlines: 1 << 9,\r\n    ReferencedAssociations: 1 << 10,\r\n    ItemWithPrices: 1 << 20,\r\n    ItemWithDiscounts: 1 << 21,\r\n    ItemWithVendor: 1 << 22,\r\n    ItemWithPaymentPlan: 1 << 23,\r\n    ItemSmall: this.ItemInfo | this.ItemAssets | this.Seo | this.Outlines,\r\n    ItemMedium: this.ItemSmall | this.ItemProperties | this.ItemEditorialReviews,\r\n    ItemLarge: this.ItemMedium | this.ItemAssociations | this.Variations | this.Inventory | this.ItemWithPrices | this.ItemWithDiscounts | this.ItemWithVendor | this.ItemWithPaymentPlan\r\n});\r\n","storefrontApp.controller('universalDialogController', ['$scope', '$uibModalInstance', 'dialogData', function ($scope, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function (result) {\r\n        if (result) {\r\n            $uibModalInstance.close(result);\r\n        } else {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['$compile', 'marketingService', function ($compile, marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html($compile(response.data)(scope));\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterSource', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        controller: function() { },\r\n        link: function (scope, element, attrs, ctrl) {\r\n            var onKeyPress = function (event) {\r\n                if (event.keyCode === 13) { // Enter\r\n                    ctrl.element[0].click();\r\n                }\r\n            };\r\n            element.on('keypress', onKeyPress);\r\n            scope.$on('$destroy', function () {\r\n                element.off('keypress', onKeyPress);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterTarget', [function () {\r\n    return {\r\n        restrict: \"A\",\r\n        require: \"^vcEnterSource\",\r\n        link: function (scope, element, attrs, ctrl) {\r\n            ctrl.element = element;\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('inventoryController', ['dialogService', 'fulfillmentCenterService', function (dialogService, fulfillmentCenterService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.selectFulfillmentCenter = function() {\r\n        dialogService.showDialog({ isFilter: true }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n    };\r\n\r\n    $ctrl.searchFulfillmentCenters = function() {\r\n        fulfillmentCenterService.searchFulfillmentCenters({ searchPhrase: $ctrl.searchPhrase }).then(function(response) {\r\n            $ctrl.fulfillmentCenters = response.data.results;\r\n        });\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","if (Prism.languages.markup) {\r\n    Prism.languages.insertBefore('markup', 'tag', {\r\n        'script': {\r\n            pattern: /(<script[\\s\\S]*?type=\"text\\/ng-template\"[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\r\n            lookbehind: true,\r\n            inside: Prism.languages.html,\r\n            alias: 'language-html'\r\n        }\r\n    });\r\n}\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productListController', ['$scope', '$window', 'pricingService', function ($scope, $window, pricingService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.loaded = false;\r\n    $ctrl.prices = {};\r\n\r\n    pricingService.getActualProductPrices($window.productList).then(function (response) {\r\n        var prices = response.data;\r\n        $ctrl.prices = _.object(_.map(prices, function(price) {\r\n            return [price.productId, price];\r\n        }));\r\n        $ctrl.loaded = !!prices.length;\r\n    });\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService) {\r\n        //TODO: prevent add to cart not selected variation\r\n        // display validator please select property\r\n        // display price range\r\n\r\n        $scope.allVariations = [];\r\n        $scope.allVariationsMap = {}\r\n        $scope.allVariationPropsMap = {};\r\n        $scope.filterableVariationPropsMap = { };\r\n        $scope.selectedVariation = {};\r\n        $scope.productPrice = null;\r\n        $scope.productPriceLoaded = false;\r\n\r\n        $scope.addProductToCart = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n            cartService.addLineItem(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        }\r\n\r\n        // TODO: Replace mock with real function\r\n        $scope.addProductsToCartMock = function () {\r\n            var rejection = {\r\n                data: {\r\n                    message: \"The 1 product(s) below was not added to cart:\",\r\n                    modelState: {\r\n                        \"Test\": \"Test\"\r\n                    }\r\n                }\r\n            };\r\n            var items = [\r\n                {\r\n                    id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                    name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$896.39\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$1,075.67\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$995.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$1,195.19\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,792.78\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$2,151.34\"\r\n                        }\r\n                    },\r\n                    quantity: 2,\r\n                    url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n                },\r\n                {\r\n                    id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                    name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$530.99\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$637.19\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$589.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$707.99\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,592.97\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$1,911.57\"\r\n                        }\r\n                    },\r\n                    quantity: 5,\r\n                    url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n                }\r\n            ];\r\n            var dialogData = toDialogDataModelMock(items, rejection);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        }\r\n\r\n        $scope.addProductToCartById = function (productId, quantity, event) {\r\n            event.preventDefault();\r\n            catalogService.getProduct([productId]).then(function (response) {\r\n                if (response.data && response.data.length) {\r\n                    var product = response.data[0];\r\n                    $scope.addProductToCart(product, quantity);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n            quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n            });\r\n        }\r\n\r\n        function toDialogDataModel(product, quantity) {\r\n            return { items: [angular.extend({ }, product, { quantity: quantity })] };\r\n            //     return {\r\n            //         id: product.id,\r\n            //         name: product.name,\r\n            //         imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            //         listPrice: product.price.listPrice,\r\n            //listPriceWithTax: product.price.listPriceWithTax,\r\n            //         placedPrice: product.price.actualPrice,\r\n            //         placedPriceWithTax: product.price.actualPriceWithTax,\r\n            //         quantity: quantity,\r\n            //         updated: false\r\n            //     }\r\n        }\r\n\r\n        function toDialogDataModelMock(items, rejection) {\r\n            var dialogDataModel = {};\r\n            if (rejection) {\r\n                dialogDataModel.errorMessage = rejection.data.message;\r\n                dialogDataModel.errors = rejection.data.modelState;\r\n            }\r\n            dialogDataModel.items = items;\r\n            return dialogDataModel;\r\n        }\r\n\r\n        function initialize(filters) {\r\n            var productIds = _.map($window.products, function (product) { return product.id });\r\n            if (!productIds || !productIds.length) {\r\n                return;\r\n            }\r\n            catalogService.getProduct(productIds).then(function (response) {\r\n\t\t\t\tvar product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                var allVariations = [product].concat(product.variations || []);\r\n                var filteredVariations = allVariations;\r\n                $scope.allVariations.length = 0;\r\n                if (filters) {\r\n                    var variationPropsKeys = Object.keys(filters.terms || {});\r\n                    filteredVariations = _.filter(allVariations, function(variation) {\r\n                        return _.all(variation.variationProperties, function(property) {\r\n                            return !variationPropsKeys.includes(property.displayName) || filters.terms[property.displayName].includes(property.value);\r\n                        });\r\n                    });\r\n                }\r\n                Array.prototype.push.apply($scope.allVariations, filteredVariations);\r\n                angular.copy(_.object(filteredVariations.map(function (variation) { return [variation.id, variation]; })), $scope.allVariationsMap);\r\n                angular.copy(getFlatternDistinctPropertiesMap(allVariations), $scope.allVariationPropsMap);\r\n                angular.copy(_.pick($scope.allVariationPropsMap, function (value, key, object) { return value.length > 1; }), $scope.filterableVariationPropsMap);\r\n\r\n                //Auto select initial product as default variation  (its possible because all our products is variations)\r\n                //var propertyMap = getVariationPropertyMap(product);\r\n                //_.each(_.keys(propertyMap), function (x) {\r\n                //    $scope.checkProperty(propertyMap[x][0])\r\n                //});\r\n                $scope.selectedVariation = product;\r\n            });\r\n        };\r\n\r\n        function getFlatternDistinctPropertiesMap(variations) {\r\n            var retVal = {};\r\n            _.each(variations, function (variation) {\r\n                var propertyMap = getVariationPropertyMap(variation);\r\n                //merge\r\n                _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n                });\r\n            });\r\n            return retVal;\r\n        };\r\n\r\n        function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n        function getSelectedPropsMap(variationPropsMap) {\r\n            var retVal = {};\r\n            _.each(_.keys(variationPropsMap), function (x) {\r\n                var property = _.find(variationPropsMap[x], function (y) {\r\n                    return y.selected;\r\n                });\r\n                if (property) {\r\n                    retVal[x] = [property];\r\n                }\r\n            });\r\n            return retVal;\r\n        }\r\n\r\n        function comparePropertyMaps(propMap1, propMap2) {\r\n            return _.every(_.keys(propMap1), function (x) {\r\n                var retVal = propMap2.hasOwnProperty(x);\r\n                if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n                }\r\n                return retVal;\r\n            });\r\n        };\r\n\r\n        //function findVariationBySelectedProps(variations, selectedPropMap) {\r\n        //    return _.find(variations, function (x) {\r\n        //        return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        //    });\r\n        //}\r\n\r\n        ////Method called from View when user clicks one property value\r\n        //$scope.checkProperty = function (property) {\r\n        //    //Select appropriate property and unselect previous selection\r\n        //    _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n        //        x.selected = x != property ? false : !x.selected;\r\n        //    });\r\n\r\n        //    //try to find the best variation match for selected properties\r\n        //    $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n        //};\r\n\r\n        $scope.sendToEmail = function (storeId, productId, productUrl, language) {\r\n            dialogService.showDialog({ storeId: storeId, productId: productId, productUrl: productUrl, language: language }, 'recentlyAddedCartItemDialogController', 'storefront.send-product-to-email.tpl');\r\n        };\r\n\r\n        $scope.$watch('filters', initialize);\r\n    }]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'mailingService', 'dialogData', function ($scope, $window, $uibModalInstance, mailingService, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.dismiss('cancel');\r\n    }\r\n\r\n    $scope.send = function(email) {\r\n        mailingService.sendProduct(dialogData.productId, { email: email, storeId: dialogData.storeId, productUrl: dialogData.productUrl, language: dialogData.language });\r\n        $uibModalInstance.close();\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('fulfillmentCenterService', ['$http', 'apiBaseUrl', function($http, apiBaseUrl) {\r\n    return {\r\n        searchFulfillmentCenters: function (criteria) {\r\n            return $http.post(apiBaseUrl + 'api/fulfillment/search/centers', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', { products: products });\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'storefrontApp', 'satellizer'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n.service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}])\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, loader) {\r\n\r\n    $scope.loader = loader;\r\n    $scope.memberComponent = null;\r\n    $scope.newMember = null;\r\n\r\n    $scope.registerMemberFieldsConfig = [\r\n        {\r\n            field: 'CompanyName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Email',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'UserName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Password',\r\n            disabled: false,\r\n            visible:  true,\r\n            required: true\r\n        }\r\n    ];\r\n\r\n    function getParams() {\r\n        var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n        for (i in params) {\r\n            if (params.hasOwnProperty(i)) {\r\n                if (params[i] === \"\") continue;\r\n\r\n                param = params[i].split(\"=\");\r\n                result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    $scope.init = function (storeId) {\r\n        $scope.newMember = {};\r\n        $scope.newMember.storeId = storeId;\r\n\r\n        $scope.complete = false;\r\n\r\n        var invite = getParams().invite;\r\n        if (invite) {\r\n            $scope.registerMemberFieldsConfig[0] = {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n            $scope.registerMemberFieldsConfig[1] = {\r\n                field: 'Email',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n\r\n            $scope.newMember.invite = invite;\r\n            $scope.loader.wrapLoading(function() {\r\n                return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                    .then(function(result) {\r\n                        if (result.message) {\r\n                            $scope.error = result.message;\r\n                            return $q.reject(\"Invite is invalid\");\r\n                        }\r\n                        $scope.newMember.companyName = result.companyName;\r\n                        $scope.newMember.email = result.email;\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.register = function () {\r\n        $scope.error = null;\r\n\r\n        if (this.memberComponent.validate()) {\r\n            if ($scope.newMember.invite) {\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerByInvite({ invite: $scope.newMember.invite }, $scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            } else {\r\n                $scope.loader.wrapLoading(function() {\r\n                    return corporateRegisterApi.register($scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { url: apiBaseUrl + 'api/b2b/register', method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutCoupon', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-coupon.tpl.liquid\",\r\n\tbindings: {\r\n\t\tcoupon: '=',\r\n\t\tonApplyCoupon: '&',\r\n\t\tonRemoveCoupon: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\t\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutEmail', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-email.tpl.html\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\temail: '='\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\r\n\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t};\r\n\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutShippingMethods', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-shippingMethods.tpl.liquid\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\tshipment: '=',\r\n\t\tgetAvailShippingMethods: '&',\r\n\t\tonSelectShippingMethod: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\r\n\t\tvar ctrl = this;\r\n\t\t\r\n\t\tctrl.availShippingMethods = [];\r\n\t\tctrl.selectedMethod = {};\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t\tctrl.loading = true;\r\n\t\t\tctrl.getAvailShippingMethods(ctrl.shipment).then(function (availMethods) {\r\n\t\t\t\tctrl.availShippingMethods = availMethods;\r\n\t\t\t\t_.each(ctrl.availShippingMethods, function (x) {\r\n\t\t\t\t\tx.id = getMethodId(x);\r\n\t\t\t\t});\r\n\t\t\t\tctrl.selectedMethod = _.find(ctrl.availShippingMethods, function (x) { return ctrl.shipment.shipmentMethodCode == x.shipmentMethodCode && ctrl.shipment.shipmentMethodOption == x.optionName });\r\n\t\t\t\tctrl.loading = false;\r\n\t\t\t});\r\n\t\t};\t\t\r\n\t\t\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\t\t\r\n\t\tfunction getMethodId(method) {\r\n\t\t\tvar retVal = method.shipmentMethodCode;\r\n\t\t\tif (method.optionName) {\r\n\t\t\t\tretVal += ':' + method.optionName;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\t\tctrl.selectMethod = function (method) {\r\n\t\t\tctrl.selectedMethod = method;\r\n\t\t\tctrl.onSelectShippingMethod({ shippingMethod: method });\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizardStep', {\r\n    templateUrl: \"themes/assets/js/checkout/checkout-wizard-step.tpl.html\",\r\n    transclude: true,\r\n    require: {\r\n        wizard: '^vcCheckoutWizard'\r\n    },\r\n    bindings: {\r\n        name: '@',\r\n        title: '@',\r\n        stepDisabled: '=?',\r\n        onNextStep: '&?',\r\n        canEnter: '=?',\r\n        final: '<?'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.components = [];\r\n        ctrl.canEnter = true;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.wizard.addStep(this);\r\n        };\r\n\r\n        ctrl.addComponent = function (component) {\r\n            ctrl.components.push(component);\r\n        };\r\n        ctrl.removeComponent = function (component) {\r\n            ctrl.components = _.without(ctrl.components, component);\r\n        };\r\n        ctrl.validate = function () {\r\n            return _.every(ctrl.components, function (x) { return typeof x.validate !== \"function\" || x.validate(); });\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizard', {\r\n\ttransclude: true,\r\n\ttemplateUrl: 'themes/assets/js/checkout/checkout-wizard.tpl.html',\r\n\tbindings: {\r\n\t\twizard: '=',\r\n\t\tloading: '=',\r\n\t\tonFinish: '&?',\r\n\t\tonInitialized: '&?'\r\n\t},\r\n\tcontroller: ['$scope', function ($scope) {\r\n\t\tvar ctrl = this;\r\n\t\tctrl.wizard = ctrl;\r\n\t\tctrl.steps = [];\t\r\n\t\tctrl.goToStep = function (step) {\r\n\t\t\tif (angular.isString(step))\r\n\t\t\t{\r\n\t\t\t\tstep = _.find(ctrl.steps, function (x) { return x.name == step; });\r\n\t\t\t}\r\n\t\t\tif (step && ctrl.currentStep != step && step.canEnter) {\r\n\t\t\t\tif (!step.final) {\r\n\t\t\t\t\tstep.isActive = true;\r\n\t\t\t\t\tif (ctrl.currentStep) {\r\n\t\t\t\t\t\tctrl.currentStep.isActive = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctrl.currentStep = step;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ctrl.onFinish)\r\n\t\t\t\t{\r\n\t\t\t\t\tctrl.onFinish();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.nextStep = function () {\r\n\t\t\tif (!ctrl.currentStep.validate || ctrl.currentStep.validate()) {\r\n\t\t\t\tif (ctrl.currentStep.nextStep) {\r\n\t\t\t\t\tif (ctrl.currentStep.onNextStep) {\r\n\t\t\t\t\t\t//evaluate onNextStep function\r\n\t\t\t\t\t\tvar promise = ctrl.currentStep.onNextStep();\r\n\t\t\t\t\t\t//For promise function need to delay going to next step\r\n\t\t\t\t\t\tif (promise && angular.isFunction(promise.then)) {\r\n\t\t\t\t\t\t\tpromise.then(function () {\r\n\t\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.prevStep = function () {\r\n\t\t\tctrl.goToStep(ctrl.currentStep.prevStep);\r\n\t\t};\r\n\r\n\t\tfunction rebuildStepsLinkedList(steps) {\r\n\t\t\tvar nextStep = undefined;\r\n\t\t\tfor (var i = steps.length; i-- > 0;) {\r\n\t\t\t\tsteps[i].prevStep = undefined;\r\n\t\t\t\tsteps[i].nextStep = undefined;\r\n\t\t\t\tif (nextStep && !steps[i].disabled) {\r\n\t\t\t\t\tnextStep.prevStep = steps[i]\r\n\t\t\t\t};\t\t\t\t\r\n\t\t\t\tif (!steps[i].disabled) {\r\n\t\t\t\t\tsteps[i].nextStep = nextStep;\r\n\t\t\t\t\tnextStep = steps[i];\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t};\r\n\t\t\r\n\t\tctrl.addStep = function (step) {\r\n\t\t\tctrl.steps.push(step);\r\n\t\t\t$scope.$watch(function () { return step.disabled; }, function () {\r\n\t\t\t\trebuildStepsLinkedList(ctrl.steps);\t\t\t\r\n\t\t\t});\r\n\t\t\trebuildStepsLinkedList(ctrl.steps);\r\n\t\t\tif(!ctrl.currentStep)\r\n\t\t\t{\r\n\t\t\t\tctrl.goToStep(step);\r\n\t\t\t}\r\n\t\t\tif (step.final && ctrl.onInitialized)\r\n\t\t\t{\r\n\t\t\t\tctrl.onInitialized();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}]\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.checkout\";\r\n\r\nif (storefrontAppDependencies != undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['credit-cards', 'angular.filter'])\r\n.controller('checkoutController', ['$rootScope', '$scope', '$window', 'cartService',\r\n    function ($rootScope, $scope, $window, cartService) {\r\n        $scope.checkout = {\r\n            wizard: {},\r\n            paymentMethod: {},\r\n            shipment: {},\r\n            payment: {},\r\n            coupon: {},\r\n            availCountries: [],\r\n            loading: false,\r\n            isValid: false\r\n        };\r\n\r\n        $scope.validateCheckout = function (checkout) {\r\n            checkout.isValid = checkout.payment && checkout.payment.paymentGatewayCode;\r\n            if (checkout.isValid && !checkout.billingAddressEqualsShipping) {\r\n                checkout.isValid = angular.isObject(checkout.payment.billingAddress);\r\n            }\r\n            if (checkout.isValid && checkout.cart && checkout.cart.hasPhysicalProducts) {\r\n                checkout.isValid = angular.isObject(checkout.shipment)\r\n                                && checkout.shipment.shipmentMethodCode\r\n                                && angular.isObject(checkout.shipment.deliveryAddress);\r\n            }\r\n        };\r\n\r\n        $scope.reloadCart = function () {\r\n            return cartService.getCart().then(function (response) {\r\n                var cart = response.data;\r\n                if (!cart || !cart.id) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart');\r\n                }\r\n                else {\r\n                    $scope.checkout.cart = cart;\r\n                    $scope.checkout.coupon = cart.coupon || $scope.checkout.coupon;\r\n                    if ($scope.checkout.coupon.code && !$scope.checkout.coupon.appliedSuccessfully) {\r\n                        $scope.checkout.coupon.errorCode = 'InvalidCouponCode';\r\n                    }\r\n                    if (cart.payments.length) {\r\n                        $scope.checkout.payment = cart.payments[0];\r\n                        $scope.checkout.paymentMethod.code = $scope.checkout.payment.paymentGatewayCode;\r\n                    }\r\n                    if (cart.shipments.length) {\r\n                        $scope.checkout.shipment = cart.shipments[0];\r\n                    }\r\n                    $scope.checkout.billingAddressEqualsShipping = cart.hasPhysicalProducts && !angular.isObject($scope.checkout.payment.billingAddress);\r\n\r\n                    $scope.checkout.canCartBeRecurring = $scope.customer.isRegisteredUser && _.all(cart.items, function (x) { return !x.isReccuring });\r\n                    $scope.checkout.paymentPlan = cart.paymentPlan && _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: cart.paymentPlan.intervalCount, interval: cart.paymentPlan.interval }) ||\r\n                                                                      _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n                }\r\n                $scope.validateCheckout($scope.checkout);\r\n                return cart;\r\n            });\r\n        };\r\n\r\n        $scope.applyCoupon = function (coupon) {\r\n            coupon.processing = true;\r\n            cartService.addCoupon(coupon.code).then(function () {\r\n                coupon.processing = false;\r\n                $scope.reloadCart();\r\n            }, function (response) {\r\n                coupon.processing = false;\r\n            });\r\n        }\r\n\r\n        $scope.removeCoupon = function (coupon) {\r\n            coupon.processing = true;\r\n            cartService.removeCoupon().then(function (response) {\r\n                coupon.processing = false;\r\n                $scope.checkout.coupon = {};\r\n                $scope.reloadCart();\r\n            }, function (response) {\r\n                coupon.processing = false;\r\n            });\r\n        }\r\n\r\n        $scope.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($scope.checkout.payment, paymentMethod);\r\n            $scope.checkout.payment.paymentGatewayCode = paymentMethod.code;\r\n            $scope.checkout.payment.amount = angular.copy($scope.checkout.cart.total);\r\n            $scope.checkout.payment.amount.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            updatePayment($scope.checkout.payment);\r\n        };\r\n\r\n        function getAvailCountries() {\r\n            //Load avail countries\r\n            return cartService.getCountries().then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCountryRegions = function (country) {\r\n            return cartService.getCountryRegions(country.code3).then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getAvailShippingMethods = function (shipment) {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailableShippingMethods(shipment.id).then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        }\r\n\r\n        $scope.getAvailPaymentMethods = function () {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailablePaymentMethods().then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.selectShippingMethod = function (shippingMethod) {\r\n            if (shippingMethod) {\r\n                $scope.checkout.shipment.shipmentMethodCode = shippingMethod.shipmentMethodCode;\r\n                $scope.checkout.shipment.shipmentMethodOption = shippingMethod.optionName;\r\n            }\r\n            else {\r\n                $scope.checkout.shipment.shipmentMethodCode = undefined;\r\n                $scope.checkout.shipment.shipmentMethodOption = undefined;\r\n            }\r\n            $scope.updateShipment($scope.checkout.shipment);\r\n        };\r\n\r\n        $scope.updateShipment = function (shipment) {\r\n            if (shipment.deliveryAddress) {\r\n                $scope.checkout.shipment.deliveryAddress.type = 'Shipping';\r\n            };\r\n            //Does not pass validation errors to API\r\n            shipment.validationErrors = undefined;\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdateShipment(shipment).then($scope.reloadCart);\r\n            });\r\n        };\r\n\r\n        $scope.createOrder = function () {\r\n            updatePayment($scope.checkout.payment).then(function () {\r\n                $scope.checkout.loading = true;\r\n                cartService.createOrder($scope.checkout.paymentMethod.card).then(function (response) {\r\n                    var order = response.data.order;\r\n                    var orderProcessingResult = response.data.orderProcessingResult;\r\n                    var paymentMethod = response.data.paymentMethod;\r\n                    handlePostPaymentResult(order, orderProcessingResult, paymentMethod);\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.savePaymentPlan = function () {\r\n            wrapLoading(function () {\r\n                return cartService.addOrUpdatePaymentPlan($scope.checkout.paymentPlan).then(function () {\r\n                    $scope.checkout.cart.paymentPlan = $scope.checkout.paymentPlan;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.isRecurringChanged = function (isRecurring) {\r\n            if ($scope.checkout.paymentPlan) {\r\n                if (isRecurring) {\r\n                    $scope.savePaymentPlan();\r\n                } else {\r\n                    wrapLoading(function () {\r\n                        return cartService.removePaymentPlan().then(function () {\r\n                            $scope.checkout.cart.paymentPlan = undefined;\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        function updatePayment(payment) {\r\n            if ($scope.checkout.billingAddressEqualsShipping) {\r\n                payment.billingAddress = undefined;\r\n            }\r\n\r\n            if (payment.billingAddress) {\r\n                payment.billingAddress.type = 'Billing';\r\n            }\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdatePayment(payment).then($scope.reloadCart);\r\n            });\r\n        }\r\n\r\n        function handlePostPaymentResult(order, orderProcessingResult, paymentMethod) {\r\n            if (!orderProcessingResult.isSuccess) {\r\n                $scope.checkout.loading = false;\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: ['Error in new order processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                    message: orderProcessingResult.error,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'preparedform' && orderProcessingResult.htmlForm) {\r\n                $scope.outerRedirect($scope.baseUrl + 'cart/checkout/paymentform?orderNumber=' + order.number);\r\n            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'redirection' && orderProcessingResult.redirectUrl) {\r\n                $window.location.href = orderProcessingResult.redirectUrl;\r\n            } else {\r\n                if (!$scope.customer.isRegisteredUser) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart/thanks/' + order.number);\r\n                } else {\r\n                    $scope.outerRedirect($scope.baseUrl + 'account#/orders/' + order.number);\r\n                }\r\n            }\r\n        }\r\n\r\n        function wrapLoading(func) {\r\n            $scope.checkout.loading = true;\r\n            return func().then(function (result) {\r\n                $scope.checkout.loading = false;\r\n                return result;\r\n            },\r\n                function () {\r\n                    $scope.checkout.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.initialize = function () {\r\n\r\n            $scope.reloadCart().then(function (cart) {\r\n                $scope.checkout.wizard.goToStep(cart.hasPhysicalProducts ? 'shipping-address' : 'payment-method');\r\n            });\r\n        };\r\n\r\n        getAvailCountries().then(function (countries) {\r\n            $scope.checkout.availCountries = countries;\r\n        });\r\n\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentPlan', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentPlan.tpl.html\",\r\n    bindings: {\r\n    },\r\n    controller: ['$scope', '$localStorage', function($scope, $localStorage) {\r\n        var $ctrl = this;\r\n\r\n        $scope.$watch(function() {\r\n            return $ctrl.availablePaymentPlans;\r\n        }, function (availablePaymentPlans) {\r\n            if (availablePaymentPlans) {\r\n                $ctrl.paymentPlan = $localStorage['paymentPlan'];\r\n                $ctrl.type = $ctrl.paymentPlan ? 'auto-reorder' : 'one-time';\r\n                $ctrl.paymentPlan = ($ctrl.paymentPlan ? _.findWhere($ctrl.availablePaymentPlans, { intervalCount: $ctrl.paymentPlan.intervalCount, interval: $ctrl.paymentPlan.interval }) : undefined) ||\r\n                    _.findWhere($ctrl.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n            }\r\n        });\r\n\r\n        $ctrl.save = function() {\r\n            if ($ctrl.type === 'auto-reorder') {\r\n                $localStorage['paymentPlan'] = $ctrl.paymentPlan;\r\n            } else {\r\n                $localStorage['paymentPlan'] = undefined;\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcSearchBar', {\r\n    templateUrl: \"themes/assets/js/common-components/searchBar.tpl.html\",\r\n    bindings: {\r\n        placeholder: '<',\r\n        searching: '<',\r\n        noResults: '<',\r\n        query: '@',\r\n        categoriesLabel: '<',\r\n        productsLabel: '<',\r\n        submitLabel: '<',\r\n        categoryLimit: '@',\r\n        productLimit: '@'\r\n    },\r\n    controller: ['$scope', '$q', 'catalogService', function ($scope, $q, catalogService) {\r\n        var $ctrl = this;\r\n        $ctrl.hasHint = false;\r\n\r\n        $scope.$watch('$ctrl.isOpen', function (isOpen) {\r\n            $ctrl.hasHint = !!$ctrl.query && !isOpen;\r\n        });\r\n\r\n        $scope.$watch('$ctrl.query', function(query) {\r\n            $ctrl.hasHint = !!query && !$ctrl.isOpen;\r\n        });\r\n\r\n        $ctrl.getSuggestions = function () {\r\n            var searchCriteria = { keyword: $ctrl.query, start: 0 };\r\n            return $q.all([\r\n                catalogService.searchCategories(angular.extend({ }, searchCriteria, { pageSize: $ctrl.categoryLimit })),\r\n                catalogService.search(angular.extend({ }, searchCriteria, { pageSize: $ctrl.productLimit }))\r\n            ]).then(function(results) {\r\n                var process = function(within) {\r\n                    return (results[0].data[within] || results[1].data[within]).map(function (suggestion) {\r\n                        suggestion['within'] = within;\r\n                        return suggestion;\r\n                    });\r\n                }\r\n                return process('categories').concat(process('products')).map(function (suggestion, index) {\r\n                    suggestion['index'] = index;\r\n                    return suggestion;\r\n                });\r\n            });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcShippingType', {\r\n    templateUrl: \"themes/assets/js/common-components/shippingType.tpl.html\",\r\n    bindings: {\r\n        isDropdown: '<',\r\n        title: \"@\",\r\n        subtitle: \"@\",\r\n        pickupMethodCode: \"@\"\r\n    },\r\n    controller: ['$scope', '$localStorage', 'storefrontApp.mainContext', 'dialogService', function($scope, $localStorage, mainContext, dialogService) {\r\n        var $ctrl = this;\r\n        $ctrl.shipmentType = $localStorage['shipmentType'];\r\n        if (!$ctrl.shipmentType) {\r\n            $ctrl.shipmentType = 'shipping';\r\n            $ctrl.isChanging = true;\r\n        }\r\n        $ctrl.shipmentAddress = $localStorage['shipmentAddress'];\r\n        $ctrl.shipmentFulfillmentCenter = $localStorage['shipmentFulfillmentCenter'];\r\n        $scope.$watch(\r\n            function() { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    $ctrl.customer = customer;\r\n                    if (!$ctrl.shipmentAddress && $ctrl.customer.defaultShippingAddress) {\r\n                        $ctrl.shipmentAddress = { postalCode: $ctrl.customer.defaultShippingAddress.postalCode };\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        $ctrl.selectFulfillmentCenter = function () {\r\n            var modalInstance = dialogService.showDialog(null, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n            modalInstance.result.then(function(fulfillmentCenter) {\r\n                $ctrl.shipmentFulfillmentCenter = fulfillmentCenter;\r\n                if (!$ctrl.isDropdown) {\r\n                    $ctrl.save();\r\n                }\r\n            });\r\n        };\r\n        $ctrl.save = function (isDefined) {\r\n            if (isDefined !== false) {\r\n                $localStorage['shipmentType'] = $ctrl.shipmentType;\r\n                if ($ctrl.shipmentType === 'shipping') {\r\n                    $localStorage['shipmentAddress'] = $ctrl.shipmentAddress;\r\n                } else {\r\n                    $localStorage['shipmentFulfillmentCenter'] = $ctrl.shipmentFulfillmentCenter;\r\n                }\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<',\r\n        isReview: '@',\r\n        isComplete: '@'\r\n\t}\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownService', ['$delegate', function($delegate) {\r\n        var service = $delegate;\r\n        var close = service.close;\r\n        service.close = function (dropdownScope, element, appendTo) {\r\n            dropdownScope.focusToggleElement = function() {};\r\n            close(dropdownScope, element, appendTo);\r\n        }\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function () {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('dropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","// based on https://github.com/angular/angular.js/blob/master/src/ng/directive/ngInclude.js\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('ngIncludeDirective', ['$delegate', function ($delegate) {\r\n        var includeFillContentDirective = $delegate[1];\r\n        var link = includeFillContentDirective.link;\r\n        includeFillContentDirective.link = function (scope, $element, $attr, ctrl) {\r\n            if (!Object.keys($attr).includes('raw')) {\r\n                link(scope, $element, $attr, ctrl);\r\n            } else {\r\n                $element.text(ctrl.template);\r\n            }\r\n        };\r\n        includeFillContentDirective.compile = function () {\r\n            return includeFillContentDirective.link;\r\n        };\r\n        $delegate[1] = includeFillContentDirective;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcQuerySource', ['$parse', '$location', '$httpParamSerializer', 'searchQueryService', function ($parse, $location, $httpParamSerializer, searchQueryService) {\r\n    return {\r\n        restrict: \"A\",\r\n        compile: function (tElem, tAttr) {\r\n            if (!tAttr.href) {\r\n                return function (scope, element, attrs) {\r\n                    // If the linked element is not an anchor tag anymore, do nothing\r\n                    if (element[0].nodeName.toLowerCase() !== 'a') return;\r\n\r\n                    // get query from current url, replace query parts with specified parts and set href\r\n                    scope.$watch(function () {\r\n                        return [attrs.vcQuerySource, attrs.switchable];\r\n                    }, function (obj) {\r\n                        var querySource = $parse(obj[0])(scope);\r\n                        var switchable = obj[1] == 'true';\r\n                        var state = searchQueryService.deserialize($location.search(), {});\r\n                        var result = searchQueryService.merge(state, querySource, switchable);\r\n                        var params = searchQueryService.serialize(result, {});\r\n                        var url = new URL($location.absUrl());\r\n                        url.search = $httpParamSerializer(params);\r\n                        element.attr(\"href\", url.href);\r\n                    }, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcQueryTarget', ['$parse', '$location', 'searchQueryService', function ($parse, $location, searchQueryService) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            var vcQueryTarget = $parse(attrs.vcQueryTarget);\r\n            // get requested keys and set ng-model value to value of ?key1=value1&key2=value2\r\n            var state = searchQueryService.deserialize($location.search(), vcQueryTarget(scope));\r\n            vcQueryTarget.assign(scope, state);\r\n        }\r\n    }\r\n}]);\r\n","storefrontApp.directive('vcScope', ['$animate', '$compile', function ($animate) {\r\n    return {\r\n        multiElement: true,\r\n        transclude: 'element',\r\n        priority: 600,\r\n        terminal: true,\r\n        restrict: 'A',\r\n        $$tlb: true,\r\n        link: function ($scope, $element, $attr, ctrl, $transclude) {\r\n            $transclude(function (clone) {\r\n                $element.after(clone);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcToggleOnMouseEnter', function () {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            var dropdownToggleCtrl = ctrls[1];\r\n            if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                return;\r\n            }\r\n\r\n            element.addClass('toggle-on-mouse-enter');\r\n\r\n            var openDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(true);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('mouseenter', openDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('mouseenter', openDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('searchQueryService', [function () {\r\n    return {\r\n        // Deserializes search query strings like 'key=value1[,value2]' or 'key=key1:value1[,value2[;key2:value3[,value4]]]'\r\n        deserialize: function (searchQuery, defaults) {\r\n            var deserializeValues = function(string) {\r\n                return string.split(',');\r\n            };\r\n            var deserializePairs = function (string) {\r\n                return _.object(string.split(';').map(function(pairString) {\r\n                    return _.reduce(pairString.split(':'), function (key, value) {\r\n                        return [key, deserializeValues(value)];\r\n                    });\r\n                }));\r\n            };\r\n            searchQuery = searchQuery || {};\r\n            defaults = defaults || {};\r\n            var result = {};\r\n            _.each(Object.keys(searchQuery), (function (key) {\r\n                var string = searchQuery[key];\r\n                if (string) {\r\n                    var deserialize = string.includes(':') ? deserializePairs : deserializeValues;\r\n                    result[key] = deserialize(string);\r\n                }\r\n            }));\r\n            result = _.defaults(result, defaults);\r\n            return result;\r\n        },\r\n\r\n        merge: function (searchQuery, changes, switchable) {\r\n            if (!switchable) {\r\n                return _.extend(searchQuery, changes);\r\n            } else {\r\n                var mergeValues = function (searchQueryValues, changeValues) {\r\n                    var checkedValues = _.difference((searchQueryValues || []).concat(changeValues || []), _.intersection(searchQueryValues, changeValues));\r\n                    return changeValues !== null && checkedValues.length ? checkedValues : null;\r\n                };\r\n                var mergePairs = function (searchQueryPairs, changePairs) {\r\n                    return _.object(_.compact(_.union(Object.keys(searchQueryPairs), Object.keys(changePairs)).map(function (key) {\r\n                        var mergedValues = mergeValues(searchQueryPairs[key], changePairs[key]);\r\n                        return mergedValues !== null ? [key, mergedValues] : null;\r\n                    })));\r\n                };\r\n                return _.object(_.compact(_.union(Object.keys(searchQuery), Object.keys(changes)).map(function (key) {\r\n                    var searchQueryValues = searchQuery[key];\r\n                    var changeValues = changes[key];\r\n                    if (changeValues !== null) {\r\n                        if (searchQueryValues && changeValues && angular.isArray(searchQueryValues) !== angular.isArray(changeValues)) {\r\n                            throw 'Type of ' + key + ' in search query is' + typeof (searchQueryValues[key]) + ' while in changes is' + typeof (changeValues[key]);\r\n                        }\r\n                        if (!angular.isArray(changeValues)) {\r\n                            return [key, mergePairs(searchQueryValues || [], changeValues || [])];\r\n                        } else {\r\n                            var mergedValues = mergeValues(searchQueryValues, changeValues);\r\n                            return mergedValues !== null ? [key, mergedValues] : null;\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })));\r\n            }\r\n        },\r\n\r\n        // Serializes search query objects like { view: ['list'], terms: { Color: [\"Black, \"Red\"], Brand: [\"VirtoCommerce\", \"Microsoft\"] } }  to string \r\n        serialize: function (searchQuery, defaults) {\r\n            var serializeValues = function (values) {\r\n                return values.join(',');\r\n            };\r\n            var serializePairs = function (pairs) {\r\n                return _.map(Object.keys(pairs), function(key) {\r\n                    return [key, serializeValues(pairs[key])].join(':');\r\n                }).join(';');\r\n            };\r\n            searchQuery = searchQuery || {};\r\n            defaults = defaults || {};\r\n            var result = _.defaults(searchQuery, defaults);\r\n            return _.mapObject(result, function(values, key) {\r\n                return values !== null ? !angular.isArray(values) ? serializePairs(values) : serializeValues(values) : null;\r\n            });\r\n        }\r\n    }\r\n}]);\r\n"]}