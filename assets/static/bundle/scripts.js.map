{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/list.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/product-compare.js","../../../assets/js/product-list.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/searchBar.js","../../../assets/js/services.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/dropdown-close.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/toggle-on-hover.js","../../../assets/js/common-components/totals.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-lists.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","console","log","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","split","some","permissionWithScope","constant","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","parse","data","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","protocol","host","parseFloat","get","now","storefrontApp","controller","$scope","cartService","catalogService","getCart","cartIsUpdating","then","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","changeLineItemQuantity","lineItemId","quantity","lineItem","find","$invalid","initialQuantity","cancel","changeLineItemPrice","newPrice","initialItems","removeLineItem","copy","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","outerRedirect","baseUrl","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","criteria","keyword","start","pageSize","search","products","selectSearchedProduct","product","selectedSearchedProduct","addProductToCart","addLineItem","getCartItemsCount","cartItemsCount","$on","$uibModalInstance","dialogData","close","redirect","url","directive","marketingService","restrict","link","scope","element","attrs","getDynamicContent","html","replace","errorHandler","attr","fallbackSrc","off","on","filter","input","extention","pop","suffix","listService","$translate","availableLists","selectedList","inProgress","itemAdded","addProductToList","selectList","list","initialize","lists","forEach","titleKey","descriptionKey","translations","description","translationIds","contains","customerService","$watch","currentPath","$$path","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","absUrl","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","getCurrentCustomer","addressId","each","addresses","isContact","memberType","orderService","orderNumber","getOrder","order","authService","toggleVisibilityBasedOnPermission","permissionValue","show","hide","vaPermission","$localStorage","dialogService","formatNumber","number","float","isNaN","isInProductCompareList","productId","p","addProductToCompareList","preventDefault","existingProduct","showDialog","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","toLowerCase","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","pricingService","productListPricesLoaded","productListPrices","getActualProductPrices","productList","prices","productListPricesSize","quoteRequestService","toDialogDataModel","imageUrl","primaryImage","listPrice","price","listPriceWithTax","placedPrice","actualPrice","placedPriceWithTax","actualPriceWithTax","updated","toDialogDataModelMock","rejection","dialogDataModel","errorMessage","message","errors","modelState","getFlatternDistinctPropertiesMap","variations","retVal","variation","propertyMap","getVariationPropertyMap","keys","union","groupBy","variationProperties","getSelectedPropsMap","variationPropsMap","selected","comparePropertyMaps","propMap1","propMap2","every","findVariationBySelectedProps","selectedPropMap","compareProductInLists","buttonInvalid","listNames","listName","allVariations","selectedVariation","allVariationPropsMap","productPrice","productPriceLoaded","addProductsToCartMock","Test","formattedAmount","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToWishlist","addProductToActualQuoteRequest","addProductToQuoteRequest","checkProperty","productIds","concat","getQuoteRequest","quoteRequest","billingAddress","countryCode","getCountryRegions","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","getCountries","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","amount","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","a","submitQuoteRequest","email","isRegisteredUser","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","isString","match","values","getRecommendedProducts","startRecordInteraction","query","searchQuery","getSuggestions","searching","categorySuggestions","productSuggestions","searchCriteria","skip","take","suggestionsLimit","searchCategories","categories","first","$uibModal","templateUrl","resolve","$http","postFeedback","post","model","getTime","placeName","put","delete","clearCart","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","getWishlist","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","component","bindings","validationContainer","editMode","onUpdate","require","checkoutStep","populateRegionalDataForAddress","findWhere","ctrl","regions","setAddressRegion","region","undefined","types","$onInit","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","card","$filter","val","bankCardHolderName","ctrls","dropdownCtrl","closeDropdown","hasClass","disabled","$apply","toggle","level","$ctrl","placeholder","required","requiredError","autofocus","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","label","pattern","member","memberComponent","fieldsConfig","getFieldConfig","field","configItem","visible","extend","rolesComponent","showField","disableField","requiredField","elem","$parsers","unshift","isValid","$$parentForm","Password","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","method","accounts","roleService","loader","available","availableRoles","availableRole","getRole","$onChanges","selectRole","role","assigned","compile","autoClose","dropdownToggleCtrl","addClass","openDropdown","moduleName","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","$templateCache","$routeConfig","useAsDefault","accountApi","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","getCompanyMember","companyId","organizations","emails","parent","prev","$q","confirm","when","isLoading","func","accountManager","confirmService","corporateApiErrorHelper","currentMember","addNewAddress","last","components","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirmed","splice","companyMember","handler","clearErrors","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","entries","totalItems","totalCount","securityAccounts","addNewMemberFieldsConfig","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","adminName","adminEmail","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","submitMember","all","addToCart","productAdded","$event","keyCode","querySelector","orderHelper","orderApi","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","showPayment","preselectedMaymentMethod","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","join","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","getParams","param","substring","decodeURIComponent","registerMemberFieldsConfig","complete","getRegisterInfoByInvite","reject","companyName","register","registerByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","updateUser","getRoles"],"mappings":"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","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['marketingService', function (marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html(response.data);\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    $scope.dialogData = dialogData;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        listService.addLineItem(dialogData.id, $scope.selectedList.name).then(function (response) {\r\n            if (response.data) {\r\n                $scope.inProgress = false;\r\n                $scope.itemAdded = true;\r\n            }\r\n        })\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {        \r\n        $scope.lists = lists;\r\n        angular.forEach($scope.lists, function (list) {\r\n            var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n            var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n            $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                list.title = translations[titleKey];\r\n                list.description = translations[descriptionKey];\r\n            }, function (translationIds) {\r\n                list.title = translationIds[titleKey];\r\n                list.description = translationIds[descriptionKey];\r\n                });\r\n            listService.contains(dialogData.id, list.name).then(function (response) {\r\n                list.contains = response.data.contains;\r\n            });            \r\n        });\r\n      \r\n    };\r\n\r\n\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productListController', ['$scope', '$window', 'pricingService', function ($scope, $window, pricingService) {\r\n    $scope.productListPricesLoaded = false;\r\n    $scope.productListPrices = [];\r\n\r\n    pricingService.getActualProductPrices($window.productList).then(function (response) {\r\n        var prices = response.data;\r\n        if (prices.length) {\r\n            for (var i = 0; i < prices.length; i++) {\r\n                $scope.productListPrices[prices[i].productId] = prices[i];\r\n            }\r\n        }\r\n        var productListPricesSize = $scope.getObjectSize($scope.productListPrices);\r\n        $scope.productListPricesLoaded = productListPricesSize > 0;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService', 'customerService', 'listService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService, customerService, listService) {\r\n    //TODO: prevent add to cart not selected variation\r\n    // display validator please select property\r\n    // display price range\r\n\r\n    var allVariations = [];\r\n  \r\n    $scope.selectedVariation = {};\r\n    $scope.allVariationPropsMap = {};\r\n    $scope.productPrice = null;\r\n    $scope.productPriceLoaded = false;\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        var dialogData = toDialogDataModel(product, quantity);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    // TODO: Replace mock with real function\r\n    $scope.addProductsToCartMock = function () {\r\n        var rejection = {\r\n            data: {\r\n                message: \"The 1 product(s) below was not added to cart:\",\r\n                modelState: {\r\n                    \"Test\": \"Test\"\r\n                }\r\n            }\r\n        };\r\n        var items = [\r\n            {\r\n                id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                price: {\r\n                    actualPrice: {\r\n                        formattedAmount: \"$896.39\"\r\n                    },\r\n                    actualPriceWithTax: {\r\n                        formattedAmount: \"$1,075.67\"\r\n                    },\r\n                    listPrice: {\r\n                        formattedAmount: \"$995.99\"\r\n                    },\r\n                    listPriceWithTax: {\r\n                        formattedAmount: \"$1,195.19\"\r\n                    },\r\n                    extendedPrice: {\r\n                        formattedAmount: \"$1,792.78\"\r\n                    },\r\n                    extendedPriceWithTax: {\r\n                        formattedAmount: \"$2,151.34\"\r\n                    }\r\n                },\r\n                quantity: 2,\r\n                url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n            },\r\n            {\r\n                id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                price: {\r\n                    actualPrice: {\r\n                        formattedAmount: \"$530.99\"\r\n                    },\r\n                    actualPriceWithTax: {\r\n                        formattedAmount: \"$637.19\"\r\n                    },\r\n                    listPrice: {\r\n                        formattedAmount: \"$589.99\"\r\n                    },\r\n                    listPriceWithTax: {\r\n                        formattedAmount: \"$707.99\"\r\n                    },\r\n                    extendedPrice: {\r\n                        formattedAmount: \"$1,592.97\"\r\n                    },\r\n                    extendedPriceWithTax: {\r\n                        formattedAmount: \"$1,911.57\"\r\n                    }\r\n                },\r\n                quantity: 5,\r\n                url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n            }\r\n        ];\r\n        var dialogData = toDialogDataModelMock(items, rejection);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n    }\r\n\r\n    $scope.addProductToCartById = function (productId, quantity, event) {\r\n        event.preventDefault();\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                $scope.addProductToCart(product, quantity);\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.addProductToWishlist = function (product) {\r\n        var dialogData = toDialogDataModel(product, 1);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n    }\r\n\r\n    $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n        var dialogData = toDialogDataModel(product, quantity);\r\n        dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n        quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        });\r\n    }\r\n\r\n    function toDialogDataModel(items, quantity) {\r\n        return {\r\n            id: product.id,\r\n            name: product.name,\r\n            imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            listPrice: product.price.listPrice,\r\n\t\t\tlistPriceWithTax: product.price.listPriceWithTax,\r\n            placedPrice: product.price.actualPrice,\r\n            placedPriceWithTax: product.price.actualPriceWithTax,\r\n            quantity: quantity,\r\n            updated: false\r\n        }\r\n    }\r\n\r\n    function toDialogDataModelMock(items, rejection) {\r\n        var dialogDataModel = {};\r\n        if (rejection) {\r\n            dialogDataModel.errorMessage = rejection.data.message;\r\n            dialogDataModel.errors = rejection.data.modelState;\r\n        }\r\n        dialogDataModel.items = items;\r\n        return dialogDataModel;\r\n    }\r\n\r\n    function initialize() {\r\n        var productIds = _.map($window.products, function (product) { return product.id });\r\n        if (!productIds || !productIds.length) {\r\n            return;\r\n        }\r\n        catalogService.getProduct(productIds).then(function (response) {\r\n            var product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                allVariations = [product].concat(product.variations || []);\r\n                $scope.allVariationPropsMap = getFlatternDistinctPropertiesMap(allVariations);\r\n\r\n            //Auto select initial product as default variation  (its possible because all our products is variations)\r\n            var propertyMap = getVariationPropertyMap(product);\r\n            _.each(_.keys(propertyMap), function (x) {\r\n                $scope.checkProperty(propertyMap[x][0])\r\n            });\r\n            $scope.selectedVariation = product;\r\n            compareProductInLists(product.id);\r\n        });        \r\n    };\r\n\r\n    function getFlatternDistinctPropertiesMap(variations) {\r\n        var retVal = {};\r\n        _.each(variations, function (variation) {\r\n            var propertyMap = getVariationPropertyMap(variation);\r\n            //merge\r\n            _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n            });\r\n        });\r\n        return retVal;\r\n    };\r\n\r\n    function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n    function getSelectedPropsMap(variationPropsMap) {\r\n        var retVal = {};\r\n        _.each(_.keys(variationPropsMap), function (x) {\r\n            var property = _.find(variationPropsMap[x], function (y) {\r\n                return y.selected;\r\n            });\r\n            if (property) {\r\n                retVal[x] = [property];\r\n            }\r\n        });\r\n        return retVal;\r\n        }\r\n\r\n    function comparePropertyMaps(propMap1, propMap2) {\r\n        return _.every(_.keys(propMap1), function (x) {\r\n            var retVal = propMap2.hasOwnProperty(x);\r\n            if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n            }\r\n            return retVal;\r\n        });\r\n    };\r\n\r\n    function findVariationBySelectedProps(variations, selectedPropMap) {\r\n            return _.find(variations, function (x) {\r\n                return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        });\r\n    }\r\n\r\n    function compareProductInLists(productId) {\r\n        $scope.buttonInvalid = true;\r\n        var listNames = [{ title: 'shopping' }, { title: 'wish' }];\r\n        angular.forEach(listNames, function (listName) {\r\n            listService.contains(productId, listName.title).then(function (result) {\r\n                if (result && (result.data.contains == false)) {\r\n                    $scope.buttonInvalid = false;\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n        //Method called from View when user clicks one property value\r\n    $scope.checkProperty = function (property) {\r\n            //Select appropriate property and unselect previous selection\r\n            _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n            x.selected = x != property ? false : !x.selected;\r\n        });\r\n\r\n            //try to find the best variation match for selected properties\r\n            $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n    };  \r\n\r\n    initialize();\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('searchBarController', ['$scope', '$timeout', '$window', 'catalogService', function ($scope, $timeout, $window, catalogService) {\r\n    var timer;\r\n\r\n    $scope.query = $window.searchQuery;\r\n\r\n    $scope.getSuggestions = function () {\r\n        if (!$scope.query) {\r\n            return;\r\n        }\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.searching = true;\r\n            $scope.categorySuggestions = [];\r\n            $scope.productSuggestions = [];\r\n            var searchCriteria = {\r\n                keyword: $scope.query,\r\n                skip: 0,\r\n                take: $window.suggestionsLimit\r\n            }\r\n            catalogService.searchCategories(searchCriteria).then(function (response) {\r\n                var categories = response.data.categories;\r\n                if (categories.length > 5) {\r\n                    searchCriteria.take = $window.suggestionsLimit - 5;\r\n                    $scope.categorySuggestions = _.first(categories, 5);\r\n                } else {\r\n                    searchCriteria.take = $window.suggestionsLimit - categories.length;\r\n                    $scope.categorySuggestions = categories;\r\n                }\r\n                catalogService.search(searchCriteria).then(function (response) {\r\n                    var products = response.data.products;\r\n                    $scope.productSuggestions = products;\r\n                    $scope.searching = false;\r\n                });\r\n            });\r\n        }, 300);\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', { products: products });\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', { searchCriteria: criteria });\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', { searchCriteria: criteria });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$http', function ($http) {\r\n    return {\r\n        getWishlist: function (listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '?t=' + new Date().getTime());\r\n        },\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName +'/items/'+ productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n        removeLineItem: function (lineItemId, listName) {\r\n            return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('dropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function() {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function() {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n\r\nstorefrontApp.directive('toggleOnMouseEnter', function() {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            var dropdownToggleCtrl = ctrls[1];\r\n            if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                return;\r\n            }\r\n\r\n            element.addClass('toggle-on-mouse-enter');\r\n\r\n            var openDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(true);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('mouseenter', openDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('mouseenter', openDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<'\r\n\t}\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'storefrontApp', 'satellizer'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/wishlist', name: 'WishList', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"themes/assets/js/account/account-lists.tpl.liquid\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'WishList', component: 'vcAccountLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', function (listService, $rootScope, cartService, $translate, loader, $timeout) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n            $ctrl.selectedList = {};\r\n\r\n            $ctrl.initialize = function (lists) {\r\n                if (lists && lists.length > 0) {\r\n                    $ctrl.lists = lists;\r\n                    $ctrl.selectList(lists[0]);\r\n                    angular.forEach($ctrl.lists, function (list) {\r\n                        var titleKey = 'wishlist.general.' + list.name + '_list_title';\r\n                        var descriptionKey = 'wishlist.general.' + list.name + '_list_description';\r\n                        $translate([titleKey, descriptionKey]).then(function (translations) {\r\n                            list.title = translations[titleKey];\r\n                            list.description = translations[descriptionKey];\r\n                        }, function (translationIds) {\r\n                            list.title = translationIds[titleKey];\r\n                            list.description = translationIds[descriptionKey];\r\n                        });\r\n                    });\r\n                }\r\n            };\r\n\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n                loader.wrapLoading(function () {\r\n                    return listService.getWishlist(list.name).then(function (response) {\r\n                        $ctrl.selectedList.items = response.data.items;                     \r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem, list) {  \r\n                loader.wrapLoading(function () {\r\n                    return listService.removeLineItem(lineItem.id, list.name).then(function (response) {\r\n                        $ctrl.selectList(list);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            }\r\n        }]\r\n    });\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, loader) {\r\n\r\n    $scope.loader = loader;\r\n    $scope.memberComponent = null;\r\n    $scope.newMember = null;\r\n\r\n    $scope.registerMemberFieldsConfig = [\r\n        {\r\n            field: 'CompanyName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Email',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'UserName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Password',\r\n            disabled: false,\r\n            visible:  true,\r\n            required: true\r\n        }\r\n    ];\r\n\r\n    function getParams() {\r\n        var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n        for (i in params) {\r\n            if (params.hasOwnProperty(i)) {\r\n                if (params[i] === \"\") continue;\r\n\r\n                param = params[i].split(\"=\");\r\n                result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    $scope.init = function (storeId) {\r\n        $scope.newMember = {};\r\n        $scope.newMember.storeId = storeId;\r\n\r\n        $scope.complete = false;\r\n\r\n        var invite = getParams().invite;\r\n        if (invite) {\r\n            $scope.registerMemberFieldsConfig[0] = {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n            $scope.registerMemberFieldsConfig[1] = {\r\n                field: 'Email',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n\r\n            $scope.newMember.invite = invite;\r\n            $scope.loader.wrapLoading(function() {\r\n                return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                    .then(function(result) {\r\n                        if (result.message) {\r\n                            $scope.error = result.message;\r\n                            return $q.reject(\"Invite is invalid\");\r\n                        }\r\n                        $scope.newMember.companyName = result.companyName;\r\n                        $scope.newMember.email = result.email;\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.register = function () {\r\n        $scope.error = null;\r\n\r\n        if (this.memberComponent.validate()) {\r\n            if ($scope.newMember.invite) {\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerByInvite({ invite: $scope.newMember.invite }, $scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            } else {\r\n                $scope.loader.wrapLoading(function() {\r\n                    return corporateRegisterApi.register($scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { url: apiBaseUrl + 'api/b2b/register', method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);"]}