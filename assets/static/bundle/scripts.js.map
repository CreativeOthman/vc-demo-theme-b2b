{"version":3,"sources":["../../../assets/interactor.js","../../../assets/js/auth.js","../../../assets/js/cart.js","../../../assets/js/collection.js","../../../assets/js/dialogs.js","../../../assets/js/directives.js","../../../assets/js/filtres.js","../../../assets/js/inventory.js","../../../assets/js/main.js","../../../assets/js/order.js","../../../assets/js/permission.js","../../../assets/js/prism.js","../../../assets/js/product-compare.js","../../../assets/js/product-list.js","../../../assets/js/product.js","../../../assets/js/quote-request.js","../../../assets/js/recommendations.js","../../../assets/js/searchBar.js","../../../assets/js/services.js","../../../assets/js/account/$account.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/checkout/checkout-coupon.js","../../../assets/js/checkout/checkout-email.js","../../../assets/js/checkout/checkout-shippingMethods.js","../../../assets/js/checkout/checkout-wizard-step.js","../../../assets/js/checkout/checkout-wizard.js","../../../assets/js/checkout/checkout.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/paymentPlan.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/shippingType.js","../../../assets/js/common-components/totals.js","../../../assets/js/directives/dropdown.js","../../../assets/js/directives/dropdownClose.js","../../../assets/js/directives/includeRaw.js","../../../assets/js/directives/scope.js","../../../assets/js/directives/toggleOnMouseEnter.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js"],"names":["Interactor","config","this","__init__","prototype","interactor","interactions","interactionElements","Array","isArray","interactionEvents","endpoint","async","debug","records","session","loadTime","Date","__initializeSession__","__bindEvents__","i","length","ev","elIndex","className","targets","document","getElementsByClassName","j","targetElement","interationArg","getAttributeNode","eventListener","content","value","handleEvent","e","stopPropagation","__addInteraction__","removeEventListener","addEventListener","window","onbeforeunload","__sendInteractions__","type","arg","interaction","event","targetTag","target","nodeName","targetClasses","clientPosition","x","clientX","y","clientY","screenPosition","screenX","screenY","createdAt","push","__closeSession__","console","log","unloadTime","language","navigator","platform","port","location","clientStart","name","appVersion","innerWidth","innerHeight","outerWidth","outerHeight","page","pathname","href","origin","title","clientEnd","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","split","some","permissionWithScope","constant","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","parse","data","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","protocol","host","parseFloat","get","now","storefrontApp","controller","$scope","cartService","catalogService","getCart","cartIsUpdating","then","cart","hasValidationErrors","validationErrors","items","item","timer","setCartForm","form","formCart","changeLineItemQuantity","lineItemId","quantity","lineItem","find","$invalid","initialQuantity","cancel","changeLineItemPrice","newPrice","initialItems","removeLineItem","copy","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","outerRedirect","baseUrl","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","criteria","keyword","start","pageSize","search","products","selectSearchedProduct","product","selectedSearchedProduct","addProductToCart","addLineItem","getCartItemsCount","cartItemsCount","$on","$uibModalInstance","dialogData","close","redirect","url","$ctrl","sortModes","manual","best-selling","title-ascending","title-descending","price-ascending","price-descending","createddate-descending","createddate-ascending","viewQuery","view","generatePageSizes","capacity","steps","pageSizeQuery","page_size","pageSizes","range","keywordQuery","dismiss","directive","$compile","marketingService","restrict","link","scope","element","attrs","getDynamicContent","html","replace","ctrl","onKeyPress","keyCode","click","on","off","require","$parse","searchQueryService","compile","tElem","tAttr","toLowerCase","$watch","vcQuerySource","queryType","obj","querySource","getLink","attr","vcQueryTarget","t","state","getState","assign","errorHandler","fallbackSrc","filter","input","extention","pop","suffix","dialogService","fulfillmentCenterService","selectFulfillmentCenter","showDialog","isFilter","searchFulfillmentCenters","searchPhrase","fulfillmentCenters","customerService","currentPath","$$path","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","absUrl","innerRedirect","path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","key","size","hasOwnProperty","getCustomer","getCurrentCustomer","addressId","each","addresses","isContact","memberType","orderService","orderNumber","getOrder","order","authService","toggleVisibilityBasedOnPermission","permissionValue","show","hide","vaPermission","Prism","languages","markup","insertBefore","script","pattern","lookbehind","inside","alias","$localStorage","formatNumber","number","float","isNaN","isInProductCompareList","productId","p","addProductToCompareList","preventDefault","existingProduct","productCompareListCapacity","capacityExceeded","getProduct","properties","property","valueType","getProductProperties","grouped","flatten","propertyDisplayNames","uniq","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","itemsCount","pricingService","loaded","prices","getActualProductPrices","productList","object","price","quoteRequestService","toDialogDataModel","extend","toDialogDataModelMock","rejection","dialogDataModel","errorMessage","message","errors","modelState","initialize","filters","productIds","allVariations","concat","variations","filteredVariations","variationPropsKeys","Object","keys","terms","variation","all","variationProperties","includes","allVariationsMap","getFlatternDistinctPropertiesMap","allVariationPropsMap","pick","filterableVariationPropsMap","selectedVariation","retVal","propertyMap","getVariationPropertyMap","union","groupBy","productPrice","productPriceLoaded","addProductsToCartMock","Test","imageUrl","actualPrice","formattedAmount","actualPriceWithTax","listPrice","listPriceWithTax","extendedPrice","extendedPriceWithTax","addProductToCartById","addProductToActualQuoteRequest","addProductToQuoteRequest","sendToEmail","storeId","productUrl","print","mailingService","email","sendProduct","getQuoteRequest","quoteRequest","billingAddress","countryCode","getCountryRegions","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","getCountries","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","amount","quoteRequestNumber","currentQuoteRequestNumber","billingCountry","shippingCountry","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","contains","addTierPrice","salePrice","changeTierPriceQuantity","removeTierPrice","removeProductFromQuoteRequest","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","code","selectCustomerAddress","a","submitQuoteRequest","isRegisteredUser","rejectQuoteRequest","selectTierPrice","getTotals","totals","confirmQuoteRequest","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","getCurrentQuoteRequest","actualQuoteRequest","updated","recommendationService","isBlockVisible","productListRecommendationsLoaded","productListRecommendations","getRecommendations","evalContext","isString","match","values","getRecommendedProducts","startRecordInteraction","query","searchQuery","getSuggestions","searching","categorySuggestions","productSuggestions","searchCriteria","skip","take","suggestionsLimit","searchCategories","categories","first","$uibModal","templateUrl","resolve","$http","post","postFeedback","model","getTime","placeName","put","delete","clearCart","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","$q","getOrCreateMyLists","lists","list","author","Math","floor","random","toString","reject","getSharedLists","sharedLists","cartId","isDefined","getWishlist","listName","addItemToList","listId","containsInList","currentList","addSharedList","myLists","sharedCartId","searchedList","clearList","removeFromFriendsLists","currentId","getQuoteRequestItemsCount","quoteItemId","quoteForm","updateQuoteRequest","requestData","$httpParamSerializer","valueString","pairs","pairsString","pairString","pair","process","src","dest","fn","chain","compact","selectValue","srcVal","destVal","difference","intersection","join","isObject","subKey","subSrcVal","subDestVal","subVal","URL","moduleName","undefined","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","BASE_URL","preferredLanguage","$templateCache","component","bindings","$routeConfig","useAsDefault","accountApi","loader","getQuotes","pageNumber","sortInfos","callback","wrapLoading","$promise","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePassword","changePasswordData","getCompanyMember","member","companyId","organizations","emails","parent","prev","confirm","when","isLoading","func","accountManager","confirmService","$translate","corporateApiErrorHelper","currentMember","addNewAddress","last","components","validate","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirmed","splice","companyMember","handler","clearErrors","addComponent","removeComponent","getCompanyById","company","updateCompanyInfo","updateCompany","handleErrors","submitCompanyAddress","$router","corporateRegisterApi","roleService","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","entries","totalItems","totalCount","available","forEach","role","securityAccounts","addNewMemberFieldsConfig","field","disabled","visible","required","init","cultureName","registrationUrl","$routerOnActivate","next","params","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","rawEmails","adminName","adminEmail","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","fieldsConfig","memberComponent","submitMember","$event","querySelector","orderHelper","orderApi","isShowPayment","lastPayment","sortBy","inPayments","findWhere","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","showPayment","getAvailPaymentMethods","preselectedMaymentMethod","paymentMethod","isValid","every","card","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","paymentMethodType","htmlForm","redirectUrl","cancelPayment","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","label","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","$setPristine","setForm","frm","getParams","param","substring","decodeURIComponent","registerMemberFieldsConfig","complete","getRegisterInfoByInvite","companyName","register","registerByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","$resource","method","updateUser","getRoles","coupon","onApplyCoupon","onRemoveCoupon","checkoutStep","$onInit","$onDestroy","getAvailShippingMethods","onSelectShippingMethod","getMethodId","shipmentMethodCode","optionName","availShippingMethods","selectedMethod","loading","availMethods","shipmentMethodOption","selectMethod","shippingMethod","transclude","wizard","stepDisabled","onNextStep","canEnter","final","addStep","onFinish","onInitialized","rebuildStepsLinkedList","nextStep","prevStep","goToStep","step","currentStep","promise","isFunction","updatePayment","checkout","reloadCart","handlePostPaymentResult","validateCheckout","paymentGatewayCode","deliveryAddress","appliedSuccessfully","errorCode","payments","canCartBeRecurring","isReccuring","paymentPlan","availablePaymentPlans","intervalCount","applyCoupon","processing","totalWithTax","selectShippingMethod","updateShipment","savePaymentPlan","isRecurringChanged","isRecurring","validationContainer","editMode","onUpdate","populateRegionalDataForAddress","regions","setAddressRegion","region","types","$valid","$filter","val","bankCardHolderName","level","inputClass","placeholder","requiredError","autofocus","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","getFieldConfig","configItem","rolesComponent","showField","disableField","requiredField","elem","$parsers","unshift","$$parentForm","Password","onSelectMethod","methods","availPaymentMethods","priority","save","accounts","availableRoles","availableRole","getRole","$onChanges","selectRole","assigned","isDropdown","subtitle","pickupMethodCode","shipmentType","isChanging","shipmentAddress","shipmentFulfillmentCenter","defaultShippingAddress","fulfillmentCenter","dropdownScope","appendTo","focusToggleElement","dropdownCtrl","autoClose","toggle","closeDropdown","$apply","ctrls","hasClass","includeFillContentDirective","$element","$attr","template","$animate","multiElement","terminal","$$tlb","$transclude","clone","after","dropdownToggleCtrl","addClass","openDropdown","listService","selectDefault","default","selected","selectList","isEmpty","user","selectTab","tabName","selectedList","selectedTab","addToCart","productAdded","removeList","reload","generateLink","sharedLink","substr","lastIndexOf","addToCartAllProducts","createList","listSettings","accountLists","listPreSetting","checkLocation","compareProductInLists","buttonInvalid","toListsDialogDataModel","addProductToWishlist","signInToProceed","availableLists","primaryImage","createdDate","inProgress","itemAdded","addProductToList","modifiedBy","description","setDefault","submitSettings"],"mappings":"AA4BA,GAAAA,YAAA,SAAAC,QAEAC,KAAAC,SAAAF,QAGAD,YAAAI,WAGAD,SAAA,SAAAF,QAEA,GAAAI,YAAAH,IAkBA,OAfAG,YAAAC,aAAA,iBAAAL,QAAA,cAAAA,OAAAK,aACAD,WAAAE,qBAAA,IAAAC,MAAAC,QAAAR,OAAAM,qBAAAN,OAAAM,qBAAA,eACAF,WAAAK,mBAAA,IAAAF,MAAAC,QAAAR,OAAAS,mBAAAT,OAAAS,mBAAA,UAAA,YACAL,WAAAM,SAAA,gBAAAV,QAAA,SAAAA,OAAAU,SAAA,gBACAN,WAAAO,MAAA,iBAAAX,QAAA,OAAAA,OAAAW,MACAP,WAAAQ,MAAA,iBAAAZ,QAAA,OAAAA,OAAAY,MACAR,WAAAS,WACAT,WAAAU,WACAV,WAAAW,SAAA,GAAAC,MAGAZ,WAAAa,wBAEAb,WAAAc,iBAEAd,YAIAc,eAAA,WAEA,GAAAd,YAAAH,IAGA,KAAA,IAAAG,WAAAC,aACA,IAAA,GAAAc,GAAA,EAAAA,EAAAf,WAAAK,kBAAAW,OAAAD,IAEA,IAAA,GADAE,IAAAjB,WAAAK,kBAAAU,GACAG,QAAA,EAAAA,QAAAlB,WAAAE,oBAAAc,OAAAE,UAAA,CACA,GAAAC,WAAAnB,WAAAE,oBAAAgB,SACAE,QAAAC,SAAAC,uBAAAH,UACA,IAAAC,QACA,IAAA,GAAAG,GAAA,EAAAA,EAAAH,QAAAJ,OAAAO,IAAA,CACA,GAAAC,eAAAJ,QAAAG,GACAE,cAAAD,cAAAE,iBAAA,kBACAC,eACAR,UAAAA,UACAS,QAAAH,cAAAA,cAAAI,MAAA,GACAC,YAAA,SAAAC,GACAA,EAAAC,kBACAhC,WAAAiC,mBAAAF,EAAAlC,KAAAsB,UAAAtB,KAAA+B,UAGAR,SAAAG,GAAAW,oBAAAjB,GAAAU,eACAP,QAAAG,GAAAY,iBAAAlB,GAAAU,gBAYA,MAJAS,QAAAC,eAAA,SAAAN,GACA/B,WAAAsC,wBAGAtC,YAIAiC,mBAAA,SAAAF,EAAAQ,KAAAC,KAGA,GAAAxC,YAAAH,KAGA4C,aACAF,KAAAA,KACAG,MAAAX,EAAAQ,KACAI,UAAAZ,EAAAa,OAAAC,SACAC,cAAAf,EAAAa,OAAAzB,UACAS,QAAAY,IACAO,gBACAC,EAAAjB,EAAAkB,QACAC,EAAAnB,EAAAoB,SAEAC,gBACAJ,EAAAjB,EAAAsB,QACAH,EAAAnB,EAAAuB,SAEAC,UAAA,GAAA3C,MAaA,OATAZ,YAAAS,QAAA+C,KAAAf,aAGAzC,WAAAQ,QAEAR,WAAAyD,mBACAC,QAAAC,IAAA,aAAA3D,WAAAU,UAGAV,YAIAa,sBAAA,WACA,GAAAb,YAAAH,IAyBA,OAtBAG,YAAAU,SACAC,SAAAX,WAAAW,SACAiD,WAAA,GAAAhD,MACAiD,SAAAzB,OAAA0B,UAAAD,SACAE,SAAA3B,OAAA0B,UAAAC,SACAC,KAAA5B,OAAA6B,SAAAD,KACAE,aACAC,KAAA/B,OAAA0B,UAAAM,WACAC,WAAAjC,OAAAiC,WACAC,YAAAlC,OAAAkC,YACAC,WAAAnC,OAAAmC,WACAC,YAAApC,OAAAoC,aAEAC,MACAR,SAAA7B,OAAA6B,SAAAS,SACAC,KAAAvC,OAAA6B,SAAAU,KACAC,OAAAxC,OAAA6B,SAAAW,OACAC,MAAAxD,SAAAwD,OAEAvE,SAAAN,WAAAM,UAGAN,YAIAyD,iBAAA,WAEA,GAAAzD,YAAAH,IAaA,OAVAG,YAAAU,QAAAkD,WAAA,GAAAhD,MACAZ,WAAAU,QAAAT,aAAAD,WAAAS,QACAT,WAAAU,QAAAoE,WACAX,KAAA/B,OAAA0B,UAAAM,WACAC,WAAAjC,OAAAiC,WACAC,YAAAlC,OAAAkC,YACAC,WAAAnC,OAAAmC,WACAC,YAAApC,OAAAoC,aAGAxE,YAKAsC,qBAAA,WAEA,GAAAtC,YAAAH,KAEAkF,IAAA,GAAAC,eAUA,OAPAhF,YAAAyD,mBAGAsB,IAAAE,KAAA,OAAAjF,WAAAM,SAAAN,WAAAO,OACAwE,IAAAG,iBAAA,eAAA,mCACAH,IAAAI,KAAAC,KAAAC,UAAArF,WAAAU,UAEAV,aCzMAsF,QAAAC,OAAA,iBACAC,QAAA,eAAA,4BAAA,QAAA,6BAAA,eAAA,aAAA,iCACA,SAAAC,YAAAC,MAAAC,2BAAAC,aAAAC,WAAAC,qBAuDA,QAAAC,YAAAC,SACAC,YAAAC,OAAAF,QAAAG,GACAF,YAAAG,MAAAJ,QAAAI,MACAH,YAAAI,YAAAL,QAAAK,YACAJ,YAAAK,UAAAN,QAAAO,SACAN,YAAAO,SAAAR,QAAAM,UACAL,YAAAQ,gBAAA,MAAAT,QAAAO,SACAN,YAAAS,SAAAV,QAAAU,SACAT,YAAAU,gBAAAX,QAAAW,gBAEAV,YAAAI,cACAJ,YAAAI,YAAAO,EAAAC,IAAAZ,YAAAI,YAAA,SAAArD,GACA,MAAA4C,cAAA5C,GAAAiD,gBAjEA,GAAAA,cACAC,OAAA,KACAI,UAAA,KACAE,SAAA,KACAE,SAAA,KACAN,MAAA,KACAC,YAAA,KACAI,iBAAA,EA+DA,OA5DAR,aAAAa,MAAA,SAAAA,MAAAC,UACA,MAAArB,OAAAoB,MAAAnB,4BACAY,SAAAO,MACAC,SAAAA,SACAC,WAAA,cAEAC,SAAAC,OAAA,mBAAAC,eAAA,wCAIAlB,YAAAmB,aAAA,WACA,MAAAtB,qBAAAuB,SAAAd,SAAAd,YAAA6B,SAAAf,UACA,SAAAgB,QACAxB,WAAAwB,QACA1B,WAAA2B,WAAA,qBAAAvB,cAEA,SAAAwB,WAGAxB,YAAAyB,gBAAA,SAAAC,WAAAC,gBAGA,GAAAC,eAAA5B,YAAAU,eAkBA,QAjBAkB,eAAAF,aACAA,WAAAA,WAAAG,SAEAD,cAAAE,EAAAC,QAAAL,WAAA1B,YAAAI,cAAA,IACAuB,iBACA,gBAAAA,iBAAAtC,QAAAlF,QAAAwH,mBACAA,eAAAtC,QAAAlF,QAAAwH,gBAAAA,eAAAA,eAAAK,MAAA,KAEAJ,cAAAjB,EAAAsB,KAAAN,eAAA,SAAA5E,GACA,GAAAmF,qBAAAR,WAAA,IAAA3E,CAGA,OAFA+E,GAAAC,QAAAG,oBAAAlC,YAAAI,cAAA,MAOAwB,eAoBA5B,eAEAmC,SAAA,sBAAA,yCACAxI,QAAA,gBAAA,WAAA,aAAA,SAAAyI,cAAAC,SAAAC,YACAF,cAAAG,SAAAD,WAAA,QACAF,cAAAI,UAAA,eACAJ,cAAAK,YAAA,WACAL,cAAAM,QACAxE,KAAA,WACAyE,SAAA,QAEAN,SAAAO,UAAA,oBAAA,YAAA,sBAAA,SAAAC,UAAAC,qBACA,GAAAC,SAAAF,UACAG,iBAAAD,QAAAE,QAMA,OALAF,SAAAE,SAAA,SAAAC,UACAF,iBAAAG,MAAAJ,QAAAK,UACA,IAAAC,gBAAA1I,KAAA2I,MAAAJ,SAAAK,KAAA,YACA3J,MAAA4J,kBAAAC,IAAAX,oBAAAO,iBAEAN,cAGAW,KAAA,QAAA,mBAAA,oBAAA,sBAAA,WAAA,UAAA,YAAA,SAAAjE,MAAA2C,cAAAuB,aAAAb,oBAAAc,SAAAC,QAAAC,WACA,GAAAC,QAAA,WACAtE,MAAAuE,SACAL,aAAAM,OAAAnB,qBACAe,QAAA7F,SAAAU,KAAAoF,UAAAI,WAAA,MAAAJ,UAAAK,OAAA,IAAAL,UAAA/F,OAAA,kBAGA0B,OAAAe,mBACAoD,SAAAG,OAAAK,WAAAT,aAAAU,IAAAvB,sBAAAnI,KAAA2J,SCxGA,IAAAC,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,kBAAA,aAAA,SAAA,WAAA,cAAA,iBAAA,SAAA5E,WAAA6E,OAAAb,SAAAc,YAAAC,gBAkHA,QAAAC,WACAH,OAAAI,gBAAA,EACAH,YAAAE,UAAAE,KAAA,SAAA5B,UACA,GAAA6B,MAAA7B,SAAAK,IACAwB,MAAAC,oBAAArE,EAAAsB,KAAA8C,KAAAE,mBAAAtE,EAAAsB,KAAA8C,KAAAG,MAAA,SAAAC,MAAA,MAAAxE,GAAAsB,KAAAkD,KAAAF,oBACAR,OAAAM,KAAAA,KACAN,OAAAI,gBAAA,GACA,SAAA3B,UACAuB,OAAAI,gBAAA,IAzHA,GAAAO,QA6GA,WACAR,aA1GAH,OAAAY,YAAA,SAAAC,MACAb,OAAAc,SAAAD,MAGAb,OAAAe,uBAAA,SAAAC,WAAAC,UACA,GAAAC,UAAAhF,EAAAiF,KAAAnB,OAAAM,KAAAG,MAAA,SAAApK,GAAA,MAAAA,GAAAoF,IAAAuF,YACA,OAAAE,UAAAD,SAAA,GAAAjB,OAAAI,gBAAAJ,OAAAc,SAAAM,UAAA,CAGA,GAAAC,iBAAAH,SAAAD,QACAC,UAAAD,SAAAA,SACA9B,SAAAmC,OAAAX,OACAA,MAAAxB,SAAA,WACAa,OAAAI,gBAAA,EACAH,YAAAc,uBAAAC,WAAAC,UAAAZ,KAAA,SAAA5B,UACA0B,UACAhF,WAAA2B,WAAA,qBACA,SAAA2B,UACAyC,SAAAD,SAAAI,gBACArB,OAAAI,gBAAA,KAEA,OAGAJ,OAAAuB,oBAAA,SAAAP,WAAAQ,UACAtF,EAAAiF,KAAAnB,OAAAM,KAAAG,MAAA,SAAApK,GAAA,MAAAA,GAAAoF,IAAAuF,eACAhB,OAAAI,iBAGAJ,OAAAI,gBAAA,EACAH,YAAAsB,oBAAAP,WAAAQ,UAAAnB,KAAA,SAAA5B,UACA0B,UACAhF,WAAA2B,WAAA,qBACA,SAAA2B,UACAuB,OAAAM,KAAAG,MAAAgB,aACAzB,OAAAI,gBAAA,MAGAJ,OAAA0B,eAAA,SAAAV,YACA,GAAAE,UAAAhF,EAAAiF,KAAAnB,OAAAM,KAAAG,MAAA,SAAApK,GAAA,MAAAA,GAAAoF,IAAAuF,YACA,IAAAE,WAAAlB,OAAAI,eAAA,CAGAJ,OAAAI,gBAAA,CACA,IAAAqB,cAAA7G,QAAA+G,KAAA3B,OAAAM,KAAAG,MACAT,QAAA4B,4BAAA,EACA5B,OAAAM,KAAAG,MAAAvE,EAAA2F,QAAA7B,OAAAM,KAAAG,MAAAS,UACAjB,YAAAyB,eAAAV,YAAAX,KAAA,SAAA5B,UACA0B,UACAhF,WAAA2B,WAAA,qBACA,SAAA2B,UACAuB,OAAAM,KAAAG,MAAAgB,aACAzB,OAAAI,gBAAA,MAIAJ,OAAA8B,WAAA,WACA9B,OAAAc,SAAAiB,gBACA/B,OAAAc,SAAAM,WAGApB,OAAAM,KAAA0B,oBACAhC,OAAAiC,cAAAjC,OAAAkC,QAAA,mBAMAlC,OAAAmC,cAAA,WACAnC,OAAAoC,oBAAA,KACApC,OAAAqC,mBACAlD,SAAAmC,OAAAX,OACAA,MAAAxB,SAAA,WACAa,OAAAsC,yBAAA,CACA,IAAAC,WACAC,QAAAxC,OAAAqC,iBACAI,MAAA,EACAC,SAAA,EAEAxC,gBAAAyC,OAAAJ,UAAAlC,KAAA,SAAA5B,UACAuB,OAAAsC,yBAAA,EACAtC,OAAAoC,oBAAA3D,SAAAK,KAAA8D,UACA,SAAAnE,UACAuB,OAAAsC,yBAAA,KAEA,OAIAtC,OAAA6C,sBAAA,SAAAC,SACA9C,OAAAoC,oBAAA,KACApC,OAAA+C,wBAAAD,QACA9C,OAAAqC,iBAAAS,QAAArJ,MAGAuG,OAAAgD,iBAAA,SAAAF,QAAA7B,UACAjB,OAAAI,gBAAA,EACAH,YAAAgD,YAAAH,QAAArH,GAAAwF,UAAAZ,KAAA,SAAA5B,UACA0B,UACAH,OAAAqC,iBAAA,KACArC,OAAA+C,wBAAA,KACA5H,WAAA2B,WAAA,0BAqBAgD,cAAAC,WAAA,qBAAA,SAAA,cAAA,SAAAC,OAAAC,aAOA,QAAAiD,qBACAjD,YAAAiD,oBAAA7C,KAAA,SAAA5B,UACAuB,OAAAmD,eAAA1E,SAAAK,OARAoE,oBAEAlD,OAAAoD,IAAA,mBAAA,SAAApL,MAAA8G,MACAoE,yBAUApD,cAAAC,WAAA,yCAAA,SAAA,UAAA,oBAAA,aAAA,SAAAC,OAAAZ,QAAAiE,kBAAAC,YACAtD,OAAAsD,WAAAA,WAEAtD,OAAAuD,MAAA,WACAF,kBAAAE,SAGAvD,OAAAwD,SAAA,SAAAC,KACArE,QAAA7F,SAAAkK,OCvJA,IAAA3D,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,wBAAA,SAAA,YAAA,SAAAC,OAAAX,WACA,GAAAqE,OAAAvO,IACAuO,OAAAC,WACAC,OAAA,+BACAC,eAAA,mCACAC,kBAAA,yBACAC,mBAAA,yBACAC,kBAAA,sCACAC,mBAAA,uCACAC,yBAAA,sCACAC,wBAAA,sCAEAT,MAAAU,WAAAC,KAAA,QACAX,MAAAY,kBAAA,SAAAC,SAAAC,OACAd,MAAAe,eAAAC,UAAAH,UAEAb,MAAAiB,UAAAzI,EAAA0I,MAAAL,SAAAA,SAAAC,MAAA,EAAAD,WAEAb,MAAAmB,cAAArC,QAAA,SCpBA1C,cAAAC,WAAA,6BAAA,SAAA,oBAAA,aAAA,SAAAC,OAAAqD,kBAAAC,YACAtD,OAAAsD,WAAAA,WAEAtD,OAAAuD,MAAA,SAAA1G,QACAA,OACAwG,kBAAAE,MAAA1G,QAEAwG,kBAAAyB,QAAA,aCPA,IAAAhF,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAiF,UAAA,kBAAA,WAAA,mBAAA,SAAAC,SAAAC,kBACA,OACAC,SAAA,IACAC,KAAA,SAAAC,MAAAC,QAAAC,OACAL,iBAAAM,kBAAAD,MAAA7J,IAAA4E,KAAA,SAAA5B,UACA4G,QAAAG,KAAAR,SAAAvG,SAAAK,MAAAsG,WAGAK,SAAA,MAIA3F,cAAAiF,UAAA,iBAAA,WAAA,SAAA5F,UACA,OACA+F,SAAA,IACAnF,WAAA,aACAoF,KAAA,SAAAC,MAAAC,QAAAC,MAAAI,MACA,GAAAC,YAAA,SAAA3N,OACA,KAAAA,MAAA4N,SACAF,KAAAL,QAAA,GAAAQ,QAGAR,SAAAS,GAAA,WAAAH,YACAP,MAAAhC,IAAA,WAAA,WACAiC,QAAAU,IAAA,WAAAJ,mBAMA7F,cAAAiF,UAAA,iBAAA,WACA,OACAG,SAAA,IACAc,QAAA,iBACAb,KAAA,SAAAC,MAAAC,QAAAC,MAAAI,MACAA,KAAAL,QAAAA,aAKAvF,cAAAiF,UAAA,iBAAA,SAAA,qBAAA,SAAAkB,OAAAC,oBACA,OACAhB,SAAA,IACAiB,QAAA,SAAAC,MAAAC,OACA,IAAAA,MAAApM,KACA,MAAA,UAAAmL,MAAAC,QAAAC,OAEA,MAAAD,QAAA,GAAAlN,SAAAmO,eAGAlB,MAAAmB,OAAA,WACA,OAAAjB,MAAAkB,cAAAlB,MAAAmB,YACA,SAAAC,KACA,GAAAC,aAAAV,OAAAS,IAAA,IAAAtB,OACAqB,UAAAR,OAAAS,IAAA,IAAAtB,OACAnL,KAAAiM,mBAAAU,QAAAD,YAAAF,UACApB,SAAAwB,KAAA,OAAA5M,QACA,SAOA6F,cAAAiF,UAAA,iBAAA,SAAA,qBAAA,SAAAkB,OAAAC,oBACA,OACAhB,SAAA,IACAC,KAAA,SAAAC,MAAAC,QAAAC,OACA,GAAAwB,eAAAb,OAAAX,MAAAwB,eAEAC,EAAAD,cAAA1B,OACA4B,MAAAd,mBAAAe,SAAAF,EACAD,eAAAI,OAAA9B,MAAA4B,YAKAlH,cAAAiF,UAAA,cAAA,WACA,OACAI,KAAA,SAAAC,MAAAC,QAAAC,OAOA,QAAA6B,cAAAnP,OACAqN,QAAAwB,KAAA,SAAAvB,MAAA8B,YACA/B,QAAAwB,KAAA,MAAAvB,MAAA8B,aAGA/B,QAAAU,IAAA/N,OAXAqN,QAAAS,GAAA,QAAAqB,cAEA/B,MAAAhC,IAAA,WAAA,WACAiC,QAAAU,IAAA,QAAAoB,mBCrFA,IAAArH,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAuH,OAAA,SAAA,WACA,MAAA,UAAAC,MAAAzP,MACA,IAAAA,KACA,MAAAyP,MAEA,IAAAC,WAAA,IAAAD,MAAA/J,MAAA,KAAAiK,MACAC,OAAA,IAAA5P,IAEA,OADAyP,OAAA7B,QAAA8B,UAAAE,OAAAF,aCTA,IAAAzH,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,uBAAA,gBAAA,2BAAA,SAAA2H,cAAAC,0BACA,GAAAjE,OAAAvO,IAEAuO,OAAAkE,wBAAA,WACAF,cAAAG,YAAAC,UAAA,GAAA,4BAAA,oDAGApE,MAAAqE,yBAAA,WACAJ,yBAAAI,0BAAAC,aAAAtE,MAAAsE,eAAA3H,KAAA,SAAA5B,UACAiF,MAAAuE,mBAAAxJ,SAAAK,KAAAxD,aCXA,IAAAwE,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,kBAAA,aAAA,SAAA,YAAA,UAAA,kBAAA,4BACA,SAAA5E,WAAA6E,OAAAX,UAAAD,QAAA8I,gBAAAnN,aAGAiF,OAAAkC,WAEAlC,OAAAuG,OAAA,WACAvG,OAAAmI,YAAA9I,UAAA+I,OAAA3C,QAAA,IAAA,MAGAtK,WAAAiI,IAAA,kBAAA,SAAApL,MAAA8G,MACA3D,WAAAkN,uBAAAvJ,KACA3D,WAAAkN,uBAAAC,gBAAA,IAGAnN,WAAAoN,0BAAA,WACApN,WAAAkN,uBAAAC,gBAAAnN,WAAAkN,uBAAAC,gBAGAnN,WAAAqN,kBAAA,WACArN,WAAAkN,uBAAA,MAIArI,OAAAiC,cAAA,SAAAwG,QACArJ,QAAA7F,SAAAU,KAAAwO,QAIAzI,OAAA0I,cAAA,SAAAC,MACAtJ,UAAAsJ,KAAAA,MACA3I,OAAAmI,YAAA9I,UAAA+I,OAAA3C,QAAA,IAAA,KAGAzF,OAAA4I,iBAAA,SAAAC,SACA,GAAAC,oBAAAD,QAAAE,UAAA,IAAAF,QAAAG,SAAA,IAQA,OAPAF,qBAAAD,QAAAI,aAAAJ,QAAAI,aAAA,KAAA,GACAH,oBAAAD,QAAAK,YAAA,KACAJ,oBAAAD,QAAAM,WAAAN,QAAAM,WAAA,KAAA,GACAL,oBAAAD,QAAAO,KAAA,IACAN,oBAAAD,QAAAQ,MAAA,KACAP,oBAAAD,QAAAS,MAAAT,QAAAS,MAAA,GACAR,oBAAAD,QAAAU,YAIAvJ,OAAAwJ,cAAA,SAAA9C,KACA,GAAA+C,KAAAC,KAAA,CACA,KAAAD,MAAA/C,KACAA,IAAAiD,eAAAF,MACAC,MAGA,OAAAA,OAGA3O,YAAA6O,YAAA5J,OAAA4J,YAAA,WACA1B,gBAAA2B,qBAAAxJ,KAAA,SAAA5B,UACA,GAAAqL,WAAA,CACA5N,GAAA6N,KAAAtL,SAAAK,KAAAkL,UAAA,SAAAnB,SACAA,QAAApN,GAAAqO,UACAA,cAEArL,SAAAK,KAAAmL,UAAA,YAAAxL,SAAAK,KAAAoL,WACAnP,YAAA6B,SAAAoD,OAAApD,SAAA6B,SAAAK,QAIAkB,OAAA4J,iBAGA9O,QAAA,4BAAA,WACA,UC1EA,IAAAgF,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAC,WAAA,mBAAA,SAAA,UAAA,eAAA,SAAAC,OAAAZ,QAAA+K,eAGA,SAAAC,aACAD,aAAAE,SAAAD,aAAA/J,KAAA,SAAA5B,UACAA,UAAAA,SAAAK,OACAkB,OAAAsK,MAAA7L,SAAAK,SALAM,QAAAgL,gBCFAxP,QAAAC,OAAA,iBACAkK,UAAA,gBAAA,cAAA,SAAAwF,aACA,OACApF,KAAA,SAAAC,MAAAC,QAAAC,OAWA,QAAAkF,mCAAAtN,gBACAqN,YAAAvN,gBAAAyN,gBAAAvN,gBAEAtC,QAAAyK,QAAAA,SAAAqF,OAEA9P,QAAAyK,QAAAA,SAAAsF,OAfA,GAAArF,MAAAsF,aAAA,CACA,GAAAH,iBAAAnF,MAAAsF,aAAAxN,MAGAgI,OAAAmB,OAAAjB,MAAApI,eAAA,SAAA/F,OACAA,OACAqT,kCAAArT,SAYAqT,oCACApF,MAAAhC,IAAA,qBAAAoH,yCCvBAK,MAAAC,UAAAC,QACAF,MAAAC,UAAAE,aAAA,SAAA,OACAC,QACAC,QAAA,4EACAC,YAAA,EACAC,OAAAP,MAAAC,UAAAtF,KACA6F,MAAA,kBCNA,IAAAvL,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,gCAAA,aAAA,SAAA,gBAAA,UAAA,iBAAA,gBACA,SAAA5E,WAAA6E,OAAAsL,cAAAlM,QAAAc,eAAAwH,eA8EA,QAAA6D,cAAAC,QACA,GAAAC,OAAA9L,WAAA6L,OACA,OAAAE,OAAAD,OAAAD,OAAAC,MA/EAH,cAAA,qBACAA,cAAA,uBAGAtL,OAAA4C,SAAA0I,cAAA,mBAEAtL,OAAA2L,uBAAA,SAAAC,WACA,MAAA1P,GAAAsB,KAAA8N,cAAA,mBAAA,SAAAO,GAAA,MAAAA,GAAApQ,IAAAmQ,aAGA5L,OAAA8L,wBAAA,SAAAF,UAAA5T,OACAA,MAAA+T,gBACA,IAAAC,iBAAA9P,EAAAiF,KAAAmK,cAAA,mBAAA,SAAAO,GAAA,MAAAA,GAAApQ,KAAAmQ,WACA,OAAAI,qBACAtE,eAAAG,WAAAmE,gBAAA,qCAAA,8CAGA5M,QAAA6M,4BAAAX,cAAA,mBAAAhV,WACAoR,eAAAG,YAAAqE,kBAAA,GAAA,qCAAA,kDAGAhM,gBAAAiM,YAAAP,YAAAvL,KAAA,SAAA5B,UACA,GAAAA,SAAAK,MAAAL,SAAAK,KAAAxI,OAAA,CACA,GAAAwM,SAAArE,SAAAK,KAAA,EACA5C,GAAA6N,KAAAjH,QAAAsJ,WAAA,SAAAC,UACAA,SAAAT,UAAA9I,QAAArH,GACA,WAAA4Q,SAAAC,UAAAhG,gBACA+F,SAAAlV,MAAAoU,aAAAc,SAAAlV,UAGAmU,cAAA,mBAAAxS,KAAAgK,SACA4E,cAAAG,WAAA/E,QAAA,qCAAA,8CACA3H,WAAA2B,WAAA,iCAKAkD,OAAAuM,qBAAA,WACA,GAAAC,YACAJ,WAAAlQ,EAAAuQ,QAAAvQ,EAAAC,IAAA6D,OAAA4C,SAAA,SAAAE,SAAA,MAAAA,SAAAsJ,cACAM,qBAAAxQ,EAAAyQ,KAAAzQ,EAAAC,IAAAiQ,WAAA,SAAAC,UAAA,MAAAA,UAAAO,cACA1Q,GAAA6N,KAAA2C,qBAAA,SAAAE,aACAJ,QAAAI,eACA,IAAAC,OAAA3Q,EAAA4Q,MAAAV,YAAAQ,YAAAA,aACA1Q,GAAA6N,KAAA/J,OAAA4C,SAAA,SAAAE,SACA,GAAAiK,iBAAA7Q,EAAAiF,KAAA0L,MAAA,SAAAG,MAAA,MAAAA,MAAApB,YAAA9I,QAAArH,IACAsR,iBACAP,QAAAI,aAAA9T,KAAAiU,iBAEAP,QAAAI,aAAA9T,MAAAwT,UAAA,YAAAnV,MAAA,UAIA6I,OAAAoM,WAAAI,SAGAxM,OAAAiN,UAAA,SAAAb,WAAAc,iBACA,GAAAC,cAAAjR,EAAAyQ,KAAAzQ,EAAAC,IAAAiQ,WAAA,SAAAP,GAAA,MAAAA,GAAA1U,QACA,SAAA+V,iBAAAd,WAAA9V,OAAA,GAAA,GAAA6W,aAAA7W,SAMA0J,OAAAoN,iBAAA,WACA9B,cAAA,sBACAnQ,WAAA2B,WAAA,6BACAkD,OAAA4C,SAAA0I,cAAA,oBAGAtL,OAAAqN,cAAA,SAAAvK,SACAwI,cAAA,mBAAApP,EAAA2F,QAAAyJ,cAAA,mBAAAxI,SACA9C,OAAA4C,SAAA0I,cAAA,mBACAnQ,WAAA2B,WAAA,6BACAkD,OAAAuM,2BASAzM,cAAAC,WAAA,sCAAA,SAAA,UAAA,aAAA,oBACA,SAAAC,OAAAZ,QAAAkE,WAAAD,mBACArD,OAAAsD,WAAAA,WAEAtD,OAAAuD,MAAA,WACAF,kBAAAE,SAGAvD,OAAAwD,SAAA,SAAAC,KACArE,QAAA7F,SAAAkK,QAIA3D,cAAAC,WAAA,mCAAA,SAAA,gBACA,SAAAC,OAAAsL,eACAtL,OAAAsN,WAAAhC,cAAA,mBAAAA,cAAA,mBAAAhV,OAAA,EACA0J,OAAAoD,IAAA,4BAAA,SAAApL,MAAA8G,MACAkB,OAAAsN,WAAAhC,cAAA,mBAAAhV,WCxGA,IAAAwJ,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,yBAAA,SAAA,UAAA,iBAAA,SAAAC,OAAAZ,QAAAmO,gBACA,GAAA7J,OAAAvO,IAEAuO,OAAA8J,QAAA,EACA9J,MAAA+J,UAEAF,eAAAG,uBAAAtO,QAAAuO,aAAAtN,KAAA,SAAA5B,UACA,GAAAgP,QAAAhP,SAAAK,IACA4E,OAAA+J,OAAAvR,EAAA0R,OAAA1R,EAAAC,IAAAsR,OAAA,SAAAI,OACA,OAAAA,MAAAjC,UAAAiC,UAEAnK,MAAA8J,SAAAC,OAAAnX,WCbA,IAAAwJ,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,qBAAA,aAAA,SAAA,UAAA,WAAA,gBAAA,iBAAA,cAAA,sBACA,SAAA5E,WAAA6E,OAAAZ,QAAAD,SAAAuI,cAAAxH,eAAAD,YAAA6N,qBA6GA,QAAAC,mBAAAjL,QAAA7B,UACA,OAAAR,OAAA7F,QAAAoT,UAAAlL,SAAA7B,SAAAA,aAcA,QAAAgN,uBAAAxN,MAAAyN,WACA,GAAAC,mBAMA,OALAD,aACAC,gBAAAC,aAAAF,UAAApP,KAAAuP,QACAF,gBAAAG,OAAAJ,UAAApP,KAAAyP,YAEAJ,gBAAA1N,MAAAA,MACA0N,gBAGA,QAAAK,YAAAC,SACA,GAAAC,YAAAxS,EAAAC,IAAAiD,QAAAwD,SAAA,SAAAE,SAAA,MAAAA,SAAArH,IACAiT,aAAAA,WAAApY,QAGA4J,eAAAiM,WAAAuC,YAAArO,KAAA,SAAA5B,UACA,GAAAqE,SAAArE,SAAAK,KAAA,GAEA6P,eAAA7L,SAAA8L,OAAA9L,QAAA+L,gBACAC,mBAAAH,aAEA,IADA3O,OAAA2O,cAAArY,OAAA,EACAmY,QAAA,CACA,GAAAM,oBAAAC,OAAAC,KAAAR,QAAAS,UACAJ,oBAAA5S,EAAAmL,OAAAsH,cAAA,SAAAQ,WACA,MAAAjT,GAAAkT,IAAAD,UAAAE,oBAAA,SAAAhD,UACA,OAAA0C,mBAAAO,SAAAjD,SAAAO,cAAA6B,QAAAS,MAAA7C,SAAAO,aAAA0C,SAAAjD,SAAAlV,WAIA1B,MAAAJ,UAAAyD,KAAA4F,MAAAsB,OAAA2O,cAAAG,oBACAlU,QAAA+G,KAAAzF,EAAA0R,OAAAkB,mBAAA3S,IAAA,SAAAgT,WAAA,OAAAA,UAAA1T,GAAA0T,cAAAnP,OAAAuP,kBACA3U,QAAA+G,KAAA6N,iCAAAb,eAAA3O,OAAAyP,sBACA7U,QAAA+G,KAAAzF,EAAAwT,KAAA1P,OAAAyP,qBAAA,SAAAtY,MAAAsS,IAAAmE,QAAA,MAAAzW,OAAAb,OAAA,IAAA0J,OAAA2P,6BAOA3P,OAAA4P,kBAAA9M,UAIA,QAAA0M,kCAAAX,YACA,GAAAgB,UAQA,OAPA3T,GAAA6N,KAAA8E,WAAA,SAAAM,WACA,GAAAW,aAAAC,wBAAAZ,UAEAjT,GAAA6N,KAAA7N,EAAA+S,KAAAa,aAAA,SAAAxX,GACAuX,OAAAvX,GAAA4D,EAAAyQ,KAAAzQ,EAAA8T,MAAAH,OAAAvX,GAAAwX,YAAAxX,IAAA,aAGAuX,OAGA,QAAAE,yBAAAZ,WACA,MAAAjT,GAAA+T,QAAAd,UAAAE,oBAAA,SAAA/W,GAAA,MAAAA,GAAAsU,cA/KA5M,OAAA2O,iBACA3O,OAAAuP,oBACAvP,OAAAyP,wBACAzP,OAAA2P,+BACA3P,OAAA4P,qBACA5P,OAAAkQ,aAAA,KACAlQ,OAAAmQ,oBAAA,EAEAnQ,OAAAgD,iBAAA,SAAAF,QAAA7B,UACA,GAAAqC,YAAAyK,kBAAAjL,QAAA7B,SACAyG,eAAAG,WAAAvE,WAAA,wCAAA,kDACArD,YAAAgD,YAAAH,QAAArH,GAAAwF,UAAAZ,KAAA,SAAA5B,UACAtD,WAAA2B,WAAA,uBAKAkD,OAAAoQ,sBAAA,WACA,GAAAlC,YACApP,MACAuP,QAAA,gDACAE,YACA8B,KAAA,UAIA5P,QAEAhF,GAAA,mCACAhC,KAAA,kCACA6W,SAAA,6DACAzC,OACA0C,aACAC,gBAAA,WAEAC,oBACAD,gBAAA,aAEAE,WACAF,gBAAA,WAEAG,kBACAH,gBAAA,aAEAI,eACAJ,gBAAA,aAEAK,sBACAL,gBAAA,cAGAvP,SAAA,EACAwC,IAAA,qEAGAhI,GAAA,mCACAhC,KAAA,sCACA6W,SAAA,6DACAzC,OACA0C,aACAC,gBAAA,WAEAC,oBACAD,gBAAA,WAEAE,WACAF,gBAAA,WAEAG,kBACAH,gBAAA,WAEAI,eACAJ,gBAAA,aAEAK,sBACAL,gBAAA,cAGAvP,SAAA,EACAwC,IAAA,sDAGAH,WAAA2K,sBAAAxN,MAAAyN,UACAxG,eAAAG,WAAAvE,WAAA,wCAAA,mDAGAtD,OAAA8Q,qBAAA,SAAAlF,UAAA3K,SAAAjJ,OACAA,MAAA+T,iBACA7L,eAAAiM,YAAAP,YAAAvL,KAAA,SAAA5B,UACA,GAAAA,SAAAK,MAAAL,SAAAK,KAAAxI,OAAA,CACA,GAAAwM,SAAArE,SAAAK,KAAA,EACAkB,QAAAgD,iBAAAF,QAAA7B,cAKAjB,OAAA+Q,+BAAA,SAAAjO,QAAA7B,UACA,GAAAqC,YAAAyK,kBAAAjL,QAAA7B,SACAyG,eAAAG,WAAAvE,WAAA,sDAAA,kEACAwK,oBAAAkD,yBAAAlO,QAAArH,GAAAwF,UAAAZ,KAAA,SAAA5B,UACAtD,WAAA2B,WAAA,qCAsHAkD,OAAAiR,YAAA,SAAAC,QAAAtF,UAAAuF,WAAAhY,UACAuO,cAAAG,YAAAqJ,QAAAA,QAAAtF,UAAAA,UAAAuF,WAAAA,WAAAhY,SAAAA,UAAA,wCAAA,yCAGA6G,OAAAoR,MAAA,WACAhS,QAAAgS,SAGApR,OAAAuG,OAAA,UAAAiI,eAGA1O,cAAAC,WAAA,yCAAA,SAAA,UAAA,oBAAA,iBAAA,aAAA,SAAAC,OAAAZ,QAAAiE,kBAAAgO,eAAA/N,YACAtD,OAAAsD,WAAAA,WAEAtD,OAAAuD,MAAA,WACAF,kBAAAyB,QAAA,WAGA9E,OAAAvF,KAAA,SAAA6W,OACAD,eAAAE,YAAAjO,WAAAsI,WAAA0F,MAAAA,MAAAJ,QAAA5N,WAAA4N,QAAAC,WAAA7N,WAAA6N,WAAAhY,SAAAmK,WAAAnK,WACAkK,kBAAAE,WCtPA,IAAAzD,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,0BAAA,aAAA,SAAA,UAAA,YAAA,sBAAA,cACA,SAAA5E,WAAA6E,OAAAZ,QAAAC,UAAAyO,oBAAA7N,aAgMA,QAAAuR,iBAAAhG,QACAsC,oBAAA0D,gBAAAhG,QAAAnL,KAAA,SAAA5B,UACA,GAAAgT,cAAAhT,SAAAK,IACA2S,cAAAC,iBACA1R,OAAApD,SAAAoN,UAAA1T,QACAmb,aAAAC,eAAA9W,QAAA+G,KAAA3B,OAAApD,SAAAoN,UAAA,IACAyH,aAAAC,eAAA7Z,KAAA,UACA4Z,aAAAC,eAAAC,aACAC,kBAAA,UAAAH,aAAAC,eAAAC,cAGAF,aAAAC,gBACA3I,UAAA/I,OAAApD,SAAAmM,UACAC,SAAAhJ,OAAApD,SAAAoM,WAIA9M,EAAA6N,KAAA0H,aAAAhR,MAAA,SAAAoR,WACA,GAAAxb,GAAA,CACA6F,GAAA6N,KAAA8H,UAAAC,eAAA,SAAAC,WACAA,UAAAtW,GAAApF,EACAwb,UAAAG,kBAAA/Q,UAAA8Q,UAAA9Q,WACA4Q,UAAAG,kBAAAD,WAEA1b,QAGAob,aAAAQ,sBAAA,EACAjS,OAAAyR,aAAAA,eAIA,QAAAS,gBACAjS,YAAAiS,eAAA7R,KAAA,SAAA5B,UACAuB,OAAAmS,UAAA1T,SAAAK,OAIA,QAAA8S,mBAAAQ,YAAAT,aACA1R,YAAA2R,kBAAAD,aAAAtR,KAAA,SAAA5B,UACA,GAAA4T,gBAAA5T,SAAAK,IACA,YAAAsT,cACApS,OAAAsS,sBAAAD,oBAEA,YAAAD,cACApS,OAAAuS,uBAAAF,sBAKA,QAAAG,aAAAf,cACA,GAAAgB,wBACAhX,GAAAgW,aAAAhW,GACAiX,IAAAjB,aAAAiB,IACAC,OAAAlB,aAAAkB,OACAC,QAAAnB,aAAAmB,QACAlB,eAAAD,aAAAC,eACAmB,gBAAApB,aAAAoB,gBACApS,SAqBA,OAnBAvE,GAAA6N,KAAA0H,aAAAhR,MAAA,SAAAoR,WACA,GAAAiB,qBACArX,GAAAoW,UAAApW,GACAmX,QAAAf,UAAAe,QACAZ,mBACAnE,MAAAgE,UAAAG,kBAAAnE,MAAAkF,OACA9R,SAAA4Q,UAAAG,kBAAA/Q,UAEA6Q,kBAEA5V,GAAA6N,KAAA8H,UAAAC,eAAA,SAAAC,WACAe,mBAAAhB,eAAAhZ,MACA+U,MAAAkE,UAAAlE,MAAAkF,OACA9R,SAAA8Q,UAAA9Q,aAGAwR,sBAAAhS,MAAA3H,KAAAga,sBAGAL,uBA3FA,WACA,GAAAO,oBAAA3T,UAAAoE,MAAAgC,QAAA,IAAA,KAAArG,QAAA6T,yBACAjT,QAAAkT,eAAA,KACAlT,OAAAmT,gBAAA,KACAjB,eACAc,mBACAxB,gBAAAwB,oBAEAhT,OAAAyR,cAAAnE,WAAA,MAzLAtN,OAAAoT,oBAAA,SAAAvS,MACAb,OAAAqT,iBAAAxS,MAGAb,OAAAsT,mBAAA,SAAAC,UACA,MAAArX,GAAAsX,SAAAD,SAAAvT,OAAAyR,aAAAkB,SAGA3S,OAAAyT,aAAA,SAAA5B,WACAA,UAAAC,eAAAhZ,MACA2C,GAAAoW,UAAAC,eAAAxb,OAAA,EACAuX,MAAAgE,UAAA6B,UACAzS,SAAA,KAIAjB,OAAA2T,wBAAA,SAAA5B,UAAA9Q,UACAA,SAAA,GAAAA,SAAAyK,QAGAqG,UAAA9Q,SAAAA,WAGAjB,OAAA4T,gBAAA,SAAA/B,UAAAE,WACAF,UAAAC,eAAA5V,EAAA2F,QAAAgQ,UAAAC,eAAAC,YAGA/R,OAAA6T,8BAAA,SAAAhC,WACA,GAAAiC,mBAAAlZ,QAAA+G,KAAA3B,OAAAyR,aAAAhR,MACAT,QAAAyR,aAAAhR,MAAAvE,EAAA2F,QAAA7B,OAAAyR,aAAAhR,MAAAoR,WACA/D,oBAAA+F,8BAAA7T,OAAAyR,aAAAhW,GAAAoW,UAAApW,IAAA4E,KAAA,SAAA5B,UACA+S,gBAAAxR,OAAAyR,aAAAhW,IACAN,WAAA2B,WAAA,mCACA,SAAA2B,UACAuB,OAAAyR,aAAAhR,MAAAqT,qBAIA9T,OAAA+T,WAAA,SAAA3B,YAAAlJ,aACA,GAAA8K,SAAA9X,EAAAiF,KAAAnB,OAAAmS,UAAA,SAAA8B,GAAA,MAAAA,GAAAxa,MAAAyP,aACA8K,WAGA,WAAA5B,cACApS,OAAAkT,eAAAc,QACAhU,OAAAsS,yBACAtS,OAAAyR,aAAAC,eAAAC,YAAAqC,QAAAE,OAAAF,QAAAG,MACAnU,OAAAyR,aAAAC,eAAA0C,SAAA,KACApU,OAAAyR,aAAAC,eAAAvI,WAAA,MAEA,YAAAiJ,cACApS,OAAAmT,gBAAAa,QACAhU,OAAAuS,0BACAvS,OAAAyR,aAAAoB,gBAAAlB,YAAAqC,QAAAE,OAAAF,QAAAG,MACAnU,OAAAyR,aAAAoB,gBAAAuB,SAAA,KACApU,OAAAyR,aAAAoB,gBAAA1J,WAAA,MAEA6K,QAAAE,OACAtC,kBAAAQ,YAAA4B,QAAAE,SAIAlU,OAAAqU,iBAAA,SAAAjC,aACA,GAAA,WAAAA,YAAA,CACA,GAAAkC,eAAApY,EAAAiF,KAAAnB,OAAAsS,sBAAA,SAAAiC,GAAA,MAAAA,GAAA9a,MAAAuG,OAAAyR,aAAAC,eAAAvI,YACA,KAAAmL,cACA,MAEAtU,QAAAyR,aAAAC,eAAA0C,SAAAE,cAAAE,KAEA,GAAA,YAAApC,YAAA,CACA,GAAAkC,eAAApY,EAAAiF,KAAAnB,OAAAuS,uBAAA,SAAAgC,GAAA,MAAAA,GAAA9a,MAAAuG,OAAAyR,aAAAoB,gBAAA1J,YACA,KAAAmL,cACA,MAEAtU,QAAAyR,aAAAoB,gBAAAuB,SAAAE,cAAAE,OAIAxU,OAAAyU,sBAAA,SAAArC,aACA,GAAA,YAAAA,YAAA,CACA,GAAAV,gBAAAxV,EAAAiF,KAAAnB,OAAApD,SAAAoN,UAAA,SAAA0K,GAAA,MAAAA,GAAAjZ,KAAAuE,OAAAyR,aAAAC,eAAAjW,IACAiW,kBACAA,eAAA7Z,KAAA,UACA6Z,eAAAC,aACAC,kBAAA,UAAAF,eAAAC,aAEA3R,OAAAyR,aAAAC,eAAA9W,QAAA+G,KAAA+P,iBAGA,GAAA,aAAAU,YAAA,CACA,GAAAS,iBAAA3W,EAAAiF,KAAAnB,OAAApD,SAAAoN,UAAA,SAAA0K;iEAAA,MAAAA,GAAAjZ,KAAAuE,OAAAyR,aAAAoB,gBAAApX,IACAoX,mBACAA,gBAAAhb,KAAA,WACAgb,gBAAAlB,aACAC,kBAAA,WAAAiB,gBAAAlB,aAEA3R,OAAAyR,aAAAoB,gBAAAjY,QAAA+G,KAAAkR,oBAKA7S,OAAA4I,iBAAA,SAAAC,SACA,GAAAA,QAAA,CAGA,GAAAC,oBAAAD,QAAAE,UAAA,IAAAF,QAAAG,SAAA,IAQA,OAPAF,qBAAAD,QAAAI,aAAAJ,QAAAI,aAAA,KAAA,GACAH,oBAAAD,QAAAK,YAAA,KACAJ,oBAAAD,QAAAM,WAAAN,QAAAM,WAAA,KAAA,GACAL,oBAAAD,QAAAO,KAAA,IACAN,oBAAAD,QAAAQ,MAAA,KACAP,oBAAAD,QAAAS,MAAAT,QAAAS,MAAA,GACAR,oBAAAD,QAAAU,aAIAvJ,OAAA2U,mBAAA,WACA3U,OAAAqT,iBAAAtR,gBACA/B,OAAAqT,iBAAAjS,WAGApB,OAAAyR,aAAAC,eAAAJ,MAAAtR,OAAAyR,aAAAH,MACAtR,OAAAyR,aAAAoB,kBACA7S,OAAAyR,aAAAoB,gBAAAvB,MAAAtR,OAAAyR,aAAAH,OAEAxD,oBAAA6G,mBAAA3U,OAAAyR,aAAAhW,GAAA+W,YAAAxS,OAAAyR,eAAApR,KAAA,SAAA5B,UACAuB,OAAApD,SAAAgY,iBACA5U,OAAAiC,cAAAjC,OAAAkC,QAAA,yBAEAlC,OAAAiC,cAAAjC,OAAAkC,QAAA,qBAKAlC,OAAA6U,mBAAA,WACA/G,oBAAA+G,mBAAA7U,OAAAyR,aAAAhW,IAAA4E,KAAA,SAAA5B,UACAqP,oBAAA0D,gBAAAxR,OAAAyR,aAAAhW,IAAA4E,KAAA,SAAA5B,UACAuB,OAAAyR,aAAAhT,SAAAK,UAKAkB,OAAA8U,gBAAA,WACAhH,oBAAAiH,UAAA/U,OAAAyR,aAAAhW,GAAA+W,YAAAxS,OAAAyR,eAAApR,KAAA,SAAA5B,UACAuB,OAAAyR,aAAAuD,OAAAvW,SAAAK,QAIAkB,OAAAiV,oBAAA,WACAnH,oBAAAmH,oBAAAjV,OAAAyR,aAAAhW,GAAA+W,YAAAxS,OAAAyR,eAAApR,KAAA,SAAA5B,UACAuB,OAAAiC,cAAAjC,OAAAkC,QAAA,uCAIAlC,OAAAkV,wBAAA,WACAlV,OAAAyR,aAAAQ,uBACAjS,OAAAyR,aAAAoB,gBAAA,OAIA7S,OAAAmV,gCAAA,WACAnV,OAAAyR,aAAA2D,+BACApV,OAAAyR,aAAAoB,gBAAAjY,QAAA+G,KAAA3B,OAAAyR,aAAAC,gBACA1R,OAAAyR,aAAAoB,gBAAAhb,KAAA,WACAmI,OAAAyR,aAAAoB,gBAAAlB,cACA3R,OAAAmT,gBAAAnT,OAAAkT,eACAtB,kBAAA,WAAA5R,OAAAyR,aAAAoB,gBAAAlB,gBAKA3R,OAAAqV,iBAAA,SAAAxD,WACA,GAAAyD,YAAApZ,EAAAC,IAAA0V,UAAAC,eAAA,SAAAjG,GAAA,MAAAA,GAAA5K,UACA,OAAA/E,GAAAyQ,KAAA2I,YAAAhf,QAAAub,UAAAC,eAAAxb,WAkGAwJ,cAAAC,WAAA,mCAAA,SAAA,sBAAA,SAAAC,OAAA8N,qBAOA,QAAAyH,0BACAzH,oBAAAyH,yBAAAlV,KAAA,SAAA5B,UACAuB,OAAAwV,mBAAA/W,SAAAK,OARAyW,yBAEAvV,OAAAoD,IAAA,iCAAA,SAAApL,MAAA8G,MACAyW,8BAUAzV,cAAAC,WAAA,uDAAA,SAAA,UAAA,oBAAA,aACA,SAAAC,OAAAZ,QAAAiE,kBAAAC,YAEAtD,OAAAoD,IAAA,iCAAA,SAAApL,MAAA8G,MACAwE,WAAAmS,SAAA,IAGAzV,OAAAsD,WAAAA,WAEAtD,OAAAuD,MAAA,WACAF,kBAAAE,SAGAvD,OAAAwD,SAAA,SAAAC,KACArE,QAAA7F,SAAAkK,OClTA,IAAA3D,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,6BAAA,SAAA,WAAA,wBAAA,SAAAC,OAAAb,SAAAuW,uBAEA1V,OAAA2V,gBAAA,EACA3V,OAAA4V,kCAAA,EACA5V,OAAA6V,8BAEA7V,OAAA8V,mBAAA,SAAAC,aAEA,GAAA7Z,EAAA8Z,SAAAD,YAAArH,YACA,GAAAqH,YAAArH,WAAAuH,MAAA,KAAA,CACA,GAAAC,QAAAH,YAAArH,WAAAnR,MAAA,IACAwY,aAAArH,WAAAwH,WAGAH,aAAArH,YAAAqH,YAAArH,WAGAgH,uBAAAS,uBAAAJ,aAAA1V,KAAA,SAAA5B,UACA,GAAAmE,UAAAnE,SAAAK,IACA,IAAA8D,SAAAtM,OAAA,CACA,IAAA,GAAAD,GAAA,EAAAA,EAAAuM,SAAAtM,OAAAD,IACA2J,OAAA6V,2BAAA/c,KAAA8J,SAAAvM,GAGA2J,QAAA2V,eAAA/S,SAAAtM,OAAA,EAGA0J,OAAA4V,kCAAA,KAGA5V,OAAAoW,uBAAA,WAEAjX,SAAA,WACAzH,OAAA0e,8BCnCA,IAAAtW,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAC,WAAA,uBAAA,SAAA,WAAA,UAAA,iBAAA,SAAAC,OAAAb,SAAAC,QAAAc,gBACA,GAAAS,MAEAX,QAAAqW,MAAAjX,QAAAkX,YAEAtW,OAAAuW,eAAA,WACAvW,OAAAqW,QAGAlX,SAAAmC,OAAAX,OACAA,MAAAxB,SAAA,WACAa,OAAAwW,WAAA,EACAxW,OAAAyW,uBACAzW,OAAA0W,qBACA,IAAAC,iBACAnU,QAAAxC,OAAAqW,MACAO,KAAA,EACAC,KAAAzX,QAAA0X,iBAEA5W,gBAAA6W,iBAAAJ,gBAAAtW,KAAA,SAAA5B,UACA,GAAAuY,YAAAvY,SAAAK,KAAAkY,UACAA,YAAA1gB,OAAA,GACAqgB,eAAAE,KAAAzX,QAAA0X,iBAAA,EACA9W,OAAAyW,oBAAAva,EAAA+a,MAAAD,WAAA,KAEAL,eAAAE,KAAAzX,QAAA0X,iBAAAE,WAAA1gB,OACA0J,OAAAyW,oBAAAO,YAEA9W,eAAAyC,OAAAgU,gBAAAtW,KAAA,SAAA5B,UACA,GAAAmE,UAAAnE,SAAAK,KAAA8D,QACA5C,QAAA0W,mBAAA9T,SACA5C,OAAAwW,WAAA,OAGA,SCnCA,IAAA1W,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAxB,QAAA,iBAAA,YAAA,SAAA4Y,WACA,OACArP,WAAA,SAAAvE,WAAAvD,WAAAoX,aAUA,MATAD,WAAA3c,MACAwF,WAAAA,WACAoX,YAAAA,YACAC,SACA9T,WAAA,WACA,MAAAA,qBASAxD,cAAAxB,QAAA,kBAAA,QAAA,aAAA,SAAA+Y,MAAAxZ,YACA,OACA0T,YAAA,SAAA9V,GAAAqD,MACA,MAAAuY,OAAAC,KAAAzZ,WAAA,wBAAApC,GAAAqD,WAKAgB,cAAAxB,QAAA,mBAAA,QAAA,SAAA+Y,OACA,OACAE,aAAA,SAAAzY,MACA,MAAAuY,OAAAC,KAAA,0BAAAE,MAAA1Y,YAKAgB,cAAAxB,QAAA,mBAAA,QAAA,SAAA+Y,OACA,OACAxN,mBAAA,WACA,MAAAwN,OAAAzX,IAAA,4BAAA,GAAA1J,OAAAuhB,gBAKA3X,cAAAxB,QAAA,4BAAA,QAAA,aAAA,SAAA+Y,MAAAxZ,YACA,OACAkK,yBAAA,SAAAxF,UACA,MAAA8U,OAAAC,KAAAzZ,WAAA,iCAAA0E,eAKAzC,cAAAxB,QAAA,oBAAA,QAAA,SAAA+Y,OACA,OACA9R,kBAAA,SAAAmS,WACA,MAAAL,OAAAzX,IAAA,0CAAA8X,UAAA,OAAA,GAAAxhB,OAAAuhB,gBAKA3X,cAAAxB,QAAA,kBAAA,QAAA,SAAA+Y,OACA,OACA3J,uBAAA,SAAA9K,UACA,MAAAyU,OAAAC,KAAA,sCAAA1U,SAAAA,gBAKA9C,cAAAxB,QAAA,kBAAA,QAAA,SAAA+Y,OACA,OACAlL,WAAA,SAAAuC,YACA,MAAA2I,OAAAzX,IAAA,qCAAA8O,WAAA,OAAA,GAAAxY,OAAAuhB,YAEA9U,OAAA,SAAAJ,UACA,MAAA8U,OAAAC,KAAA,gCAAAX,eAAApU,YAEAwU,iBAAA,SAAAxU,UACA,MAAA8U,OAAAC,KAAA,mCAAAX,eAAApU,gBAKAzC,cAAAxB,QAAA,eAAA,QAAA,SAAA+Y,OACA,OACAlX,QAAA,WACA,MAAAkX,OAAAzX,IAAA,yBAAA,GAAA1J,OAAAuhB,YAEAvU,kBAAA,WACA,MAAAmU,OAAAzX,IAAA,oCAAA,GAAA1J,OAAAuhB,YAEAxU,YAAA,SAAA2I,UAAA3K,UACA,MAAAoW,OAAAC,KAAA,4BAAA7b,GAAAmQ,UAAA3K,SAAAA,YAEAF,uBAAA,SAAAC,WAAAC,UACA,MAAAoW,OAAAM,IAAA,4BAAA3W,WAAAA,WAAAC,SAAAA,YAEAS,eAAA,SAAAV,YACA,MAAAqW,OAAAO,OAAA,uCAAA5W,aAEAO,oBAAA,SAAAP,WAAAQ,UACA,MAAA6V,OAAAM,IAAA,kCAAA3W,WAAAA,WAAAQ,SAAAA,YAEAqW,UAAA,WACA,MAAAR,OAAAC,KAAA,6BAEApF,aAAA,WACA,MAAAmF,OAAAzX,IAAA,8BAAA,GAAA1J,OAAAuhB,YAEA7F,kBAAA,SAAAD,aACA,MAAA0F,OAAAzX,IAAA,2BAAA+R,YAAA,eAAA,GAAAzb,OAAAuhB,YAEAK,UAAA,SAAAC,YACA,MAAAV,OAAAC,KAAA,8BAAAS,aAEAC,aAAA,WACA,MAAAX,OAAAO,OAAA,+BAEAK,oBAAA,SAAAC,UACA,MAAAb,OAAAC,KAAA,+BAAAY,WAEAC,mBAAA,SAAAC,SACA,MAAAf,OAAAC,KAAA,8BAAAc,UAEAC,4BAAA,SAAAC,YACA,MAAAjB,OAAAzX,IAAA,gCAAA0Y,WAAA,uBAAA,GAAApiB,OAAAuhB,YAEAc,2BAAA,WACA,MAAAlB,OAAAzX,IAAA,wCAAA,GAAA1J,OAAAuhB,YAEAe,uBAAA,SAAAC,MACA,MAAApB,OAAAC,KAAA,iCAAAmB,OAEAC,kBAAA,WACA,MAAArB,OAAAO,OAAA,mCAEAe,YAAA,SAAAC,cACA,MAAAvB,OAAAC,KAAA,kCAAAsB,aAAAA,oBAKA9Y,cAAAxB,QAAA,eAAA,KAAA,QAAA,gBAAA,kBAAA,SAAAua,GAAAxB,MAAA/L,cAAApD,iBACA,OACA4Q,mBAAA,SAAAjd,SAAAkd,OAYA,MAXAzN,eAAA,QACAA,cAAA,SACAA,cAAA,MAAAzP,aACAyP,cAAA,kBACAA,cAAA,eAAAzP,aACAK,EAAA6N,KAAAgP,MAAA,SAAAC,MACAA,KAAAC,OAAApd,SACAmd,KAAAvd,GAAAyd,KAAAC,MAAA,kBAAAD,KAAAE,SAAA,GAAAC,aAEAnd,EAAA8R,OAAA1C,cAAA,MAAAzP,UAAAkd,QAEAF,GAAA,SAAAzB,QAAAkC,QAAAlC,QAAA9L,cAAA,MAAAzP,cAGA0d,eAAA,SAAA1d,UACA,GAAAkd,OAAAzN,cAAA,MACAkO,cAWA,OAVAlO,eAAA,gBACApP,EAAA6N,KAAAuB,cAAA,eAAAzP,UAAA,SAAA4d,QACAvd,EAAA6N,KAAAgP,MAAA,SAAAC,MACApe,QAAA8e,UAAAxd,EAAAiF,KAAA6X,MAAAvd,GAAAge,OAAAJ,eACAG,YAAA1gB,KAAAoD,EAAAiF,KAAA6X,MAAAvd,GAAAge,cAMAZ,GAAA,SAAAzB,QAAAkC,QAAAlC,QAAAoC,gBAEAG,YAAA,SAAAC,SAAA3c,WAAAxB,GAAAI,UAMA,MALAK,GAAAsX,SAAAlI,cAAA,MAAAzP,UAAAK,EAAAiF,KAAAmK,cAAA,MAAAzP,WAAApC,KAAAmgB,aAAAhf,QAAA8e,UAAA7d,UACAyP,cAAA,MAAAzP,UAAA/C,MAAAW,KAAAmgB,SAAA,EAAA3c,WAAAA,WAAAxB,GAAAA,GAAAgF,SAAAwY,OAAApd,WAEAyP,cAAA,MAAAzP,UAAA/C,MAAAW,KAAAmgB,SAAA3c,WAAAA,WAAAxB,GAAAA,GAAAgF,SAAAwY,OAAApd,WAEAK,EAAAiF,KAAAmK,cAAA,MAAAzP,WAAApC,KAAAmgB,YAGAC,cAAA,SAAAC,OAAAhX,SACA5G,EAAA6N,KAAAuB,cAAA,MAAA,SAAA0N,MACA,GAAApe,QAAA8e,UAAAxd,EAAAiF,KAAA6X,MAAAvd,GAAAqe,UAAA,CACA5d,EAAAiF,KAAA6X,MAAAvd,GAAAqe,SACArZ,MAAA3H,KAAAgK,aAMAiX,eAAA,SAAAnO,UAAA6N,QACA,GACAjG,UADAuF,MAAAne,QAAA+G,KAAA2J,cAAA,MAWA,OATApP,GAAA6N,KAAAgP,MAAA,SAAAC,MACA,GAAApe,QAAA8e,UAAAxd,EAAAiF,KAAA6X,MAAAvd,GAAAge,UAAA,CACA,GAAAO,aAAA9d,EAAAiF,KAAA6X,MAAAvd,GAAAge,QAEAjG,YADA5Y,QAAA8e,UAAAxd,EAAAiF,KAAA6Y,YAAAvZ,OAAAmL,UAAAA,gBAMAiN,GAAA,SAAAzB,QAAAkC,QAAAlC,SAAA5D,SAAAA,cAGAyG,cAAA,SAAApe,SAAAqe,QAAAC,cACA,MAAAje,GAAAsB,KAAA8N,cAAA,eAAAzP,UAAA,SAAAvD,GAAA,MAAAA,KAAA6hB,gBAAAje,EAAAiF,KAAA+Y,SAAAze,GAAA0e,eAMAtB,GAAA,SAAAzB,QAAAkC,QACAlC,aANA9L,cAAA,eAAAzP,UAAA/C,KAAAqhB,cACAtB,GAAA,SAAAzB,QAAAkC,QACAlC,cAQA5D,SAAA,SAAA5H,UAAAgO,UACA,MAAAvC,OAAAzX,IAAA,uBAAAga,SAAA,UAAAhO,UAAA,gBAAA,GAAA1V,OAAAuhB,YAEAxU,YAAA,SAAA2I,UAAAgO,UACA,MAAAvC,OAAAC,KAAA,uBAAAsC,SAAA,UAAAhO,UAAAA,aAGAlK,eAAA,SAAAV,WAAA8Y,OAAAje,UACA,GAAAue,cAAAle,EAAAiF,KAAAmK,cAAA,MAAAzP,WAAAJ,GAAAqe,QAEA,OADAM,cAAA3Z,MAAAvE,EAAAmL,OAAA+S,aAAA3Z,MAAA,SAAAC,MAAA,MAAAA,MAAAjF,IAAAuF,aACA6X,GAAA,SAAAzB,QAAAkC,QACAlC,QAAAgD,iBAIAC,UAAA,SAAAZ,OAAA5d,UACAyP,cAAA,MAAAzP,UAAAK,EAAAmL,OAAAiE,cAAA,MAAAzP,UAAA,SAAAvD,GAAA,MAAAA,GAAAmD,IAAAge,UAGAa,uBAAA,SAAAC,UAAA1e,UACAyP,cAAA,eAAAzP,UAAAK,EAAAmL,OAAAiE,cAAA,eAAAzP,UAAA,SAAA4d,QACA,MAAAZ,IAAA,SAAAzB,QAAAkC,QACAlC,QAAAqC,SAAAc,oBAOAza,cAAAxB,QAAA,uBAAA,QAAA,SAAA+Y,OACA,OACA9B,uBAAA,WACA,MAAA8B,OAAAzX,IAAA,yCAAA,GAAA1J,OAAAuhB,YAEAjG,gBAAA,SAAAhG,QACA,MAAA6L,OAAAzX,IAAA,+BAAA4L,OAAA,OAAA,GAAAtV,OAAAuhB,YAEA+C,0BAAA,SAAAhP,QACA,MAAA6L,OAAAzX,IAAA,+BAAA4L,OAAA,kBAAA,GAAAtV,OAAAuhB,YAEAzG,yBAAA,SAAApF,UAAA3K,UACA,MAAAoW,OAAAC,KAAA,6CAAA1L,UAAAA,UAAA3K,SAAAA,YAEA4S,8BAAA,SAAAb,mBAAAyH,aACA,MAAApD,OAAAO,OAAA,+BAAA5E,mBAAA,UAAAyH,cAEA9F,mBAAA,SAAA3B,mBAAAvB,cACA,MAAA4F,OAAAC,KAAA,+BAAAtE,mBAAA,WAAA0H,UAAAjJ,gBAEAoD,mBAAA,SAAA7B,oBACA,MAAAqE,OAAAC,KAAA,+BAAAtE,mBAAA,YAEA2H,mBAAA,SAAA3H,mBAAAvB,cACA,MAAA4F,OAAAM,IAAA,+BAAA3E,mBAAA,WAAAvB,aAAAA,gBAEAsD,UAAA,SAAA/B,mBAAAvB,cACA,MAAA4F,OAAAC,KAAA,+BAAAtE,mBAAA,WAAAvB,aAAAA,gBAEAwD,oBAAA,SAAAjC,mBAAAvB,cACA,MAAA4F,OAAAC,KAAA,+BAAAtE,mBAAA,YAAAvB,aAAAA,oBAKA3R,cAAAxB,QAAA,yBAAA,QAAA,SAAA+Y,OACA,OACAlB,uBAAA,SAAAyE,aACA,MAAAvD,OAAAC,KAAA,gCAAAsD,kBAKA9a,cAAAxB,QAAA,gBAAA,QAAA,SAAA+Y,OACA,OACAhN,SAAA,SAAAD,aACA,MAAAiN,OAAAzX,IAAA,wBAAAwK,YAAA,OAAA,GAAAlU,OAAAuhB,gBAKA3X,cAAAxB,QAAA,sBAAA,YAAA,uBAAA,SAAAe,UAAAwb,sBACA,OAEA5T,SAAA,SAAAP,KACA,GAAA7J,UAwBA,OAtBAX,GAAA6N,KAAAiF,OAAAC,KAAAvI,KAAA,SAAA+C,KACA,GAAAqR,aAAAzb,UAAAsD,SAAA8G,IAEA,IAAAqR,YAAA,CACA,GAAAA,YAAA7E,MAAA,QAEA,CACA,GAAA8E,UAEAC,YAAAF,YAAAvd,MAAA,IACArB,GAAA6N,KAAAiR,YAAA,SAAAC,YACA,GAAAC,MAAAD,WAAA1d,MAAA,KACAkM,IAAAyR,KAAA,GACAhF,OAAAgF,KAAA,GAAA3d,MAAA,IACAwd,OAAAtR,KAAAyM,SAEArZ,OAAA4M,KAAAsR,UAXAle,QAAA4M,KAAAqR,YAAAvd,MAAA,IAaAV,QAAA4M,KAAA7O,QAAAlF,QAAAgR,IAAA+C,OAAA,IAAA5M,OAAA4M,KAAAnT,OAAAuG,OAAA4M,KAAA5M,OAAA4M,KAAA,MAGA5M,OAAAjC,QAAAoT,UAAAtH,IAAA7J,SAKA+J,QAAA,SAAAF,IAAA7O,MACA,GAAAwe,OAAAhX,UAAAsD,SACAqE,MAAA7R,KAAA8R,SAAAoP,OAEA8E,QAAA,SAAAC,IAAAC,KAAAC,GAAA5lB,SACA,GAAA6lB,OAAArf,EAAAqf,MAAArf,EAAA8T,MAAAqL,KAAArM,OAAAC,KAAAoM,SAAAD,IAAApM,OAAAC,KAAAmM,UACA/T,OAAA,SAAAoC,KACA,MAAA4R,QAAAA,KAAA5R,QAAAA,MAAA4R,SAAAD,IAAA3R,QAAAA,MAAA2R,QAEAjf,IAAA,SAAAsN,KACA,MAAA6R,IAAA7R,IAAA2R,IAAAA,IAAA3R,KAAA,KAAA4R,KAAAA,KAAA5R,KAAA,QAEA+R,SAIA,OAHA9lB,WACA6lB,MAAAA,MAAA3N,UAEA2N,MAAApkB,SAEAskB,YAAA,SAAAC,OAAAC,SACA,MAAAA,UAAA/gB,QAAAlF,QAAAimB,UAAA/gB,QAAAlF,QAAAgmB,SACAC,QAAAA,QAAAzf,EAAAsf,QAAAG,SAAA,KACAD,OAAAxf,EAAAqf,OAAAG,SAAAjP,UAAA+O,UAAArkB,SACA,cAAAU,KAAAqE,EAAA0f,YAAAD,aAAA/M,OAAA8M,QAAAxf,EAAA2f,aAAAF,QAAAD,SAAAC,SAAAD,QAAAI,KAAA,MAEAH,SAAAD,QAGA7e,OAAAse,QAAAnU,MAAAN,IAAA,SAAA+C,IAAAiS,OAAAC,SACA,GAAAxkB,MAEA,IAAAwkB,SAAA/gB,QAAAmhB,SAAAJ,WAAA/gB,QAAAlF,QAAAimB,UAAA/gB,QAAAmhB,SAAAL,UAAA9gB,QAAAlF,QAAAgmB,QAAA,CACA,GAAAA,QACA,IAAA9gB,QAAAmhB,SAAAL,SAAA9gB,QAAAlF,QAAAgmB,QACA,KAAA,WAAAjS,IAAA,+CAEAiS,QAAA9gB,QAAAlF,QAAAimB,cAEAxkB,OAAAgkB,QAAAO,OAAAC,QAAA,SAAAK,OAAAC,UAAAC,YACA,GAAAC,QAAAV,YAAAQ,UAAAC,WACA,OAAAC,QAAAH,OAAA,KAAAphB,QAAAlF,QAAAymB,QAAAA,OAAAL,KAAA,KAAAK,QAAA,OACA,GACAhlB,MAAAA,MAAA2kB,KAAA,SAEA3kB,OAAAskB,YAAAC,OAAAC,QAEA,OAAAxkB,QAAAsS,IAAAtS,YACA,GACAsM,IAAA,GAAA2Y,KAAA/c,UAAAoJ,SAEA,OADAhF,KAAAd,OAAAkY,qBAAAhe,QACA4G,IAAAxJ,SC1XA,IAAAoiB,YAAA,yBAEAC,KAAAC,2BACAA,0BAAAzjB,KAAAujB,YAEAzhB,QAAAC,OAAAwhB,YAAA,aAAA,oBAAA,yBAAA,aAAA,gBAAA,eAEAnnB,QAAA,qBAAA,SAAAsnB,oBACAA,mBAAAC,yBAAA,sBACAD,mBAAAE,aAAAC,SAAA,4BACAH,mBAAAI,kBAAA,SAGA3d,KAAA,iBAAA,SAAA4d,gBAEAA,eAAAlF,IAAA,qBAAA,2YAGAxgB,MAAA,uBAAA,oBACAmH,QAAA,wBAAA,YAAA,SAAA4Y,WACA,OACArP,WAAA,SAAAvE,WAAAvD,WAAAoX,aACAD,UAAA3c,MACAwF,WAAAA,WACAoX,YAAAA,YACAC,SACA9T,WAAA,WACA,MAAAA,qBAQAwZ,UAAA,oBACA3F,YAAA,sBACA4F,UACA7a,QAAA,IACAtF,SAAA,KAEAogB,eACArU,KAAA,cAAAlP,KAAA,SAAAqjB,UAAA,oBACAnU,KAAA,qBAAAlP,KAAA,gBAAAqjB,UAAA,2BACAnU,KAAA,UAAAlP,KAAA,SAAAqjB,UAAA,oBACAnU,KAAA,WAAAlP,KAAA,UAAAqjB,UAAA,yBAAAG,cAAA,IACAtU,KAAA,aAAAlP,KAAA,YAAAqjB,UAAA,uBACAnU,KAAA,kBAAAlP,KAAA,iBAAAqjB,UAAA,4BACAnU,KAAA,eAAAlP,KAAA,cAAAqjB,UAAA,yBACAnU,KAAA,sBAAAlP,KAAA,iBAAAqjB,UAAA,4BACAnU,KAAA,aAAAlP,KAAA,QAAAqjB,UAAA,mBAEA/c,YAAA,SAAA,WAAA,wBAAA,4BAAA,cAAA,iCAAA,0BAAA,SAAAC,OAAAb,SAAA+d,WAAAniB,YAAAwP,YAAAnP,oBAAA+hB,QACA,GAAAzZ,OAAAvO,IACAuO,OAAAyZ,OAAAA,OAEAzZ,MAAA0Z,UAAA,SAAAC,WAAA3a,SAAA4a,UAAAC,UACAJ,OAAAK,YAAA,WACA,MAAAN,YAAAE,WAAAC,WAAAA,WAAA3a,SAAAA,SAAA4a,UAAAA,WAAAC,UAAAE,YAIA/Z,MAAAga,cAAA,SAAAC,eACAR,OAAAK,YAAA,WACA,MAAAN,YAAAU,cAAAD,cAAA5iB,YAAA6O,aAAA6T,YAIA/Z,MAAAma,gBAAA,SAAA/e,MACA,MAAAqe,QAAAK,YAAA,WACA,MAAAN,YAAAW,gBAAA/e,KAAA/D,YAAA6O,aAAA6T,YAIA/Z,MAAAoa,eAAAZ,WAAAhL,eAEAxO,MAAAkO,kBAAA,SAAAoC,SACA,MAAAkJ,YAAAtL,kBAAAoC,SAAAyJ,UAGA/Z,MAAAqa,eAAA,SAAAC,oBACA,MAAAb,QAAAK,YAAA,WACA,MAAAN,YAAAa,eAAAC,oBAAAP,YAIAzd,OAAAuG,OAAA,WACA,MAAAxL,aAAA6B,UACA,SAAAA,UACAA,WACAugB,OAAAK,YAAA,WACA,MAAApiB,qBAAA6iB,kBAAAxiB,GAAAmB,SAAAnB,IAAA,SAAAyiB,QACAthB,SAAAuhB,UAAAjiB,EAAA+a,MAAAiH,OAAAE,eACAxhB,SAAA0U,MAAApV,EAAA+a,MAAAiH,OAAAG,UACAZ,WAEAlT,YAAA7N,kBAIAsD,OAAAoD,IAAA,qBAAA,WACAjE,SAAA,WACA9B,EAAA,iBAAAihB,SAAAC,OAAApd,KAAA,cAAAwJ,eAMArM,QAAA,kBAAA,KAAA,SAAAua,IACA1jB,KAAAqpB,QAAA,SAAAnQ,SACA,MAAAwK,IAAA4F,KAAA/mB,OAAA8mB,QAAAnQ,SAAA,kBAIAvT,QAAA,0BAAA,WACA,GAAA+U,SACA6O,WAAA,EACAlB,YAAA,SAAAmB,MAEA,MADA9O,QAAA6O,WAAA,EACAC,OAAAte,KAAA,SAAAxD,QAEA,MADAgT,QAAA6O,WAAA,EACA7hB,QAEA,WAAAgT,OAAA6O,WAAA,KAIA,OAAA7O,UChIAjV,QAAAC,OAAA,sBACAiiB,UAAA,sBACA3F,YAAA,6CACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,4BAAA,iBAAA,aAAA,SAAA,iCAAA,qCAAA,0BAAA,SAAAhF,YAAA8jB,eAAAC,WAAA9e,OAAA5E,oBAAA2jB,wBAAA5B,QACA,GAAAzZ,OAAAvO,IACAuO,OAAAyZ,OAAAA,OAEAnd,OAAAuG,OACA,WAAA,MAAAxL,aAAA6B,UACA,SAAAA,UACAA,UACAugB,OAAAK,YAAA,WACA,MAAApiB,qBAAA6iB,kBAAAxiB,GAAAmB,SAAAnB,IAAA,SAAAyiB,QACAxa,MAAAsb,cAAAd,SACAT,aAKA/Z,MAAAub,cAAA,WACA/iB,EAAAgjB,KAAAC,YAAAC,aACA1b,MAAAsb,cAAAhV,UAAAlR,KAAA4K,MAAA2b,YACA3b,MAAA2b,WAAA,KACA3b,MAAA4b,oBAAA5b,MAAAsb,iBAIAtb,MAAA6b,OAAA,WACAJ,WAAAzb,MAAA8b,SAAAJ,aACAxkB,QAAA+G,KAAA+B,MAAA+b,SAAA/b,MAAAsb,cAAAhV,UAAAtG,MAAA8b,UACA9b,MAAA4b,oBAAA5b,MAAAsb,cAAAtb,MAAApC,UAIAoC,MAAApC,OAAA,WACAoC,MAAA8b,SAAA,EACA9b,MAAA+b,SAAA,MAGA/b,MAAAgc,KAAA,SAAAC,QACAjc,MAAA8b,QAAAG,OACAjc,MAAA+b,SAAA7kB,QAAA+G,KAAA+B,MAAAsb,cAAAhV,UAAAtG,MAAA8b,WAGA9b,MAAAkU,OAAA,SAAA+H,QACA,GAAA9X,YAAA,SAAA+X,MACAf,eAAAL,QAAAoB,MAAAvf,KAAA,SAAAwf,WACAA,YACAnc,MAAAsb,cAAAhV,UAAA8V,OAAAH,OAAA,GACAjc,MAAA4b,oBAAA5b,MAAAsb,kBAKAF,YAAA,qCAAAze,KAAAwH,WAAAA,aAGAnE,MAAA4b,oBAAA,SAAAS,cAAAC,SACA,MAAA7C,QAAAK,YAAA,WACA,MAAApiB,qBAAAkkB,oBAAAS,cAAAC,QAAA,SAAAvhB,UACAsgB,wBAAAkB,YAAAjgB,UACAyd,WAIA,IAAA0B,cACAzb,OAAAwc,aAAA,SAAApD,WACAqC,WAAArmB,KAAAgkB,YAEApZ,MAAAyc,gBAAA,SAAArD,WACAqC,WAAAjjB,EAAA2F,QAAAsd,WAAArC,gBCzEAliB,QAAAC,OAAA,sBACAiiB,UAAA,wBACA3F,YAAA,gDACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,4BAAA,SAAA,aAAA,iCAAA,qCAAA,0BAAA,iBAAA,SAAAhF,YAAAiF,OAAA8e,WAAA1jB,oBAAA2jB,wBAAA5B,OAAA0B,gBACA,GAAAnb,OAAAvO,IACAuO,OAAAyZ,OAAAA,OAEAnd,OAAAuG,OACA,WAAA,MAAAxL,aAAA6B,SAAAuhB,WACA,SAAAA,WACAA,WACAhB,OAAAK,YAAA,WACA,MAAApiB,qBAAAglB,gBAAA3kB,GAAA0iB,WAAA,SAAAkC,SACA3c,MAAA2c,QAAAA,UACA5C,aAMA/Z,MAAA4c,kBAAA,SAAAD,SACA,MAAAlD,QAAAK,YAAA,WACA,MAAApiB,qBAAAmlB,cAAAF,QAAA,SAAA5hB,UACAsgB,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,YAIA/Z,MAAAub,cAAA,WACA/iB,EAAAgjB,KAAAC,YAAAC,aACA1b,MAAA2c,QAAArW,UAAAlR,KAAA4K,MAAA2b,YACA3b,MAAA2b,WAAA,KACA3b,MAAA4c,kBAAA5c,MAAA2c,WAIA3c,MAAA+c,qBAAA,WACAtB,WAAAzb,MAAA8b,SAAAJ,aACAxkB,QAAA+G,KAAA+B,MAAA+b,SAAA/b,MAAA2c,QAAArW,UAAAtG,MAAA8b,UACA9b,MAAA4c,kBAAA5c,MAAA2c,SAAAhgB,KAAAqD,MAAApC,UAIAoC,MAAApC,OAAA,WACAoC,MAAA8b,SAAA,EACA9b,MAAA+b,SAAA,MAGA/b,MAAAgc,KAAA,SAAAC,QACAjc,MAAA8b,QAAAG,OACAjc,MAAA+b,SAAA7kB,QAAA+G,KAAA+B,MAAA2c,QAAArW,UAAAtG,MAAA8b,WAGA9b,MAAAkU,OAAA,SAAA+H,QACA,GAAA9X,YAAA,SAAA+X,MACAf,eAAAL,QAAAoB,MAAAvf,KAAA,SAAAwf,WACAA,YACAnc,MAAA2c,QAAArW,UAAA8V,OAAAH,OAAA,GACAjc,MAAA4c,kBAAA5c,MAAA2c,YAKAvB,YAAA,qCAAAze,KAAAwH,WAAAA,YAGA,IAAAsX,cACAzb,OAAAwc,aAAA,SAAApD,WACAqC,WAAArmB,KAAAgkB,YAEApZ,MAAAyc,gBAAA,SAAArD,WACAqC,WAAAjjB,EAAA2F,QAAAsd,WAAArC,gBC5EAliB,QAAAC,OAAA,sBACAiiB,UAAA,2BACA3F,YAAA,mDACA6F,eACArU,KAAA,IAAAlP,KAAA,aAAAqjB,UAAA,8BAAAG,cAAA,IACAtU,KAAA,WAAAlP,KAAA,eAAAqjB,UAAA,iCAEA/c,YAAA,wBAAA,SAAAmd,iBAKAJ,UAAA,+BACA3F,YAAA,mCACA4F,UAAA2D,QAAA,KACA3gB,YAAA,4BAAA,SAAA,iCAAA,kCAAA,qCAAA,cAAA,0BAAA,iBAAA,YAAA,aAAA,SAAAhF,YAAAiF,OAAA5E,oBAAAulB,qBAAA5B,wBAAA6B,YAAAzD,OAAA0B,eAAAxf,UAAAyf,YACA,GAAApb,OAAAvO,IACAuO,OAAAmd,gBAAA9lB,YAAA6B,SAAAnB,GACAiI,MAAAod,mBAAA,KACApd,MAAAyZ,OAAAA,OACAzZ,MAAAqd,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACAxd,MAAAqd,aAAAI,YAAA,WACAhE,OAAAK,YAAA,WACA,MAAApiB,qBAAAgmB,mBACAC,SAAAtmB,YAAA6B,SAAAuhB,UACAvH,MAAAlT,MAAAqd,aAAAC,YAAA,GAAAtd,MAAAqd,aAAAE,kBACApK,KAAAnT,MAAAqd,aAAAE,kBACA3D,UAAA5Z,MAAA4Z,WACA,SAAAxe,MACA4E,MAAA4d,QAAAxiB,KAAAxD,QACAoI,MAAAqd,aAAAQ,WAAAziB,KAAA0iB,WAEAxhB,OAAAuG,OAAA,WACA,MAAAqa,aAAAa,WACA,WACA7mB,QAAA8mB,QAAAhe,MAAA4d,QAAA,SAAApD,QACA,GAAAyD,MAAAf,YAAAhhB,IAAAse,OAAA0D,iBACA1D,QAAAyD,KAAAA,KAAAA,KAAAloB,KAAA,WAGAgkB,YAIA/Z,MAAAme,2BAEAC,MAAA,cACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,QACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,WACAC,UAAA,EACAC,SAAA,IAGAF,MAAA,WACAC,UAAA,EACAC,SAAA,IAGAF,MAAA,QACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAIAjiB,OAAAkiB,KAAA,SAAAhR,QAAAiR,YAAAC,iBACA1e,MAAAwN,QAAAA,QACAxN,MAAAye,YAAAA,YACAze,MAAA0e,gBAAAA,iBAGAjtB,KAAAktB,kBAAA,SAAAC,MACA5e,MAAAqd,aAAAC,YAAAsB,KAAAC,OAAAlF,YAAA3Z,MAAAqd,aAAAC,aAGAhhB,OAAAuG,OACA,WAAA,MAAAxL,aAAA6B,SAAAuhB,WACA,SAAAA,WACAA,WACAza,MAAAqd,aAAAI,gBAKAzd,MAAA8e,8BAAA,GAAAC,QAAA,yGACA/e,MAAAgf,OAAA,WACAhf,MAAAif,WAAAtE,OAAA3a,MAAAif,WAAAC,UAAArlB,MAAA,oBACA4f,OAAAK,YAAA,WACA,MAAApiB,qBAAAsnB,QACAxR,QAAAxN,MAAAwN,QACAiN,UAAApjB,YAAA6B,SAAAuhB,UACAE,OAAA3a,MAAAif,WAAAtE,OACAwE,UAAA9nB,YAAA6B,SAAAd,SACAgnB,WAAA/nB,YAAA6B,SAAA0U,MACAjD,QAAA3K,MAAAif,WAAAtU,QACAlV,SAAAuK,MAAAye,YACAY,YAAA1jB,UAAAI,WAAA,MAAAJ,UAAAK,OAAA,IAAAL,UAAA/F,OAAAoK,MAAA0e,iBACA,SAAA3jB,UACAiF,MAAApC,SACAoC,MAAAqd,aAAAI,cACApC,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,YAIA/Z,MAAAsf,aAAA,WACAtf,MAAAod,mBAAA1B,aACA1b,MAAAuf,UAAA9E,UAAApjB,YAAA6B,SAAAuhB,UACAza,MAAAuf,UAAAtB,KAAAje,MAAAuf,UAAAtB,KAAAloB,KACAiK,MAAAuf,UAAA/R,QAAAxN,MAAAwN,QAEAiM,OAAAK,YAAA,WACA,MAAAmD,sBAAAuC,eAAAxf,MAAAuf,UAAA,SAAAxkB,UACAiF,MAAApC,SACAoC,MAAAqd,aAAAC,YAAA,EACAtd,MAAAqd,aAAAI,cACApC,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,aAKA/Z,MAAApC,OAAA,WACAoC,MAAAif,WAAA,KACAjf,MAAAuf,UAAA,MAGAvf,MAAAyf,aAAA,SAAA9B,UACAlE,OAAAK,YAAA,WACA,MAAApiB,qBAAA6iB,kBAAAxiB,GAAA4lB,UAAA,SAAAnD,QACAA,OAAAkF,UAAAlF,OAAAkF,SACAjG,OAAAK,YAAA,WACA,MAAApiB,qBAAAkkB,oBAAAS,cAAA,SAAAthB,UACAiF,MAAAqd,aAAAI,cACApC,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,aAEAA,YAIA/Z,MAAAgc,KAAA,SAAA2B,UACAlsB,KAAAurB,QAAA2C,UAAA,gBAAAnF,OAAAmD,SAAAhE,WAAA3Z,MAAAqd,aAAAC,gBAGAtd,MAAAkU,OAAA,SAAAyJ,UACA,GAAAxZ,YAAA,SAAA+X,MACAf,eAAAL,QAAAoB,MAAAvf,KAAA,SAAAwf,WACAA,WACA1C,OAAAK,YAAA,WACA,MAAApiB,qBAAAkoB,qBAAAC,IAAAlC,UAAA,SAAA5iB,UACAiF,MAAAqd,aAAAI,cACApC,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,aAMAqB,YAAA,gDAAAze,KAAAwH,WAAAA,aAGAnE,MAAA0b,SAAA,WAEA,MADA1b,OAAA8f,WAAAzhB,gBACA2B,MAAA8f,WAAAC,OAGA/f,MAAAggB,YAAA,SAAAxF,QACA,MAAAA,QAAAziB,IAAAV,YAAA6B,SAAAnB,QAKAqhB,UAAA,gCACA3F,YAAA,qCACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,KAAA,aAAA,SAAA,UAAA,cAAA,iCAAA,qCAAA,0BAAA,iBAAA,SAAA8Y,GAAA1d,WAAA6E,OAAAZ,QAAAwhB,YAAAxlB,oBAAA2jB,wBAAA5B,OAAA0B,gBAuCA,QAAA8E,WACAxG,OAAAK,YAAA,WACA,MAAApiB,qBAAA6iB,kBAAAxiB,GAAAiI,MAAAkgB,cAAA,SAAA1F,QACAxa,MAAAwa,QACAziB,GAAAyiB,OAAAziB,GACAsN,UAAAmV,OAAAnV,UACAC,SAAAkV,OAAAlV,SACAsI,MAAApV,EAAA+a,MAAAiH,OAAAG,QACAD,cAAAF,OAAAE,cACAjkB,MAAA+jB,OAAA/jB,MACAynB,iBAAA1D,OAAA0D,oBAEAnE,WAlDA,GAAA/Z,OAAAvO,IACAuO,OAAAyZ,OAAAA,OACAzZ,MAAAmgB,eAEA/B,MAAA,cACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,QACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,WACAC,UAAA,EACAC,SAAA,IAGAF,MAAA,WACAC,UAAA,EACAC,SAAA,IAGAF,MAAA,QACAC,UAAA,EACAC,SAAA,IAIAte,MAAAogB,gBAAA,KAEA9jB,OAAAkiB,KAAA,SAAAhR,SACAxN,MAAAwN,QAAAA,SAmBA/b,KAAAktB,kBAAA,SAAAC,MACA5e,MAAA2Z,WAAAiF,KAAAC,OAAAlF,YAAA,EACA3Z,MAAAkgB,aAAAtB,KAAAC,OAAArE,OAEAyF,WAGAjgB,MAAAqgB,aAAA,WACArgB,MAAAogB,gBAAA1E,YACAjC,OAAAK,YAAA,WAGA,MAFA9Z,OAAAwa,OAAApiB,SAAA4H,MAAAwa,OAAAnV,UAAA,IAAArF,MAAAwa,OAAAlV,SACAtF,MAAAwa,OAAAG,QAAA3a,MAAAwa,OAAA5M,OACAuH,GAAAzJ,KACAwR,YAAA5hB,IAAA0E,MAAAwa,OAAA0D,iBAAAle,MAAAwa,OAAAyD,MACAvmB,oBAAAkkB,oBAAA5b,MAAAwa,OAAA,SAAAzf,UACAsgB,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,iBC7QA,IAAA3d,eAAAlF,QAAAC,OAAA,gBAEAiF,eACAC,WAAA,0BAAA,SAAA,cAAA,SAAAC,OAAAuK,aACAvK,OAAA5D,MAAA,SAAA4nB,QACA,IAAAA,QAAA,KAAAA,OAAApe,QAAA,CACA,GAAA2Z,QAAA,WACA3kB,QAAAyK,QAAA1O,SAAAstB,cAAA,oBAAA1E,SAGAhV,aAAAnO,MAAA4D,OAAAnE,SAAAmE,OAAA3D,UAAAgE,KAAAkf,OAAAA,aCVA3kB,QAAAC,OAAA,sBACAiiB,UAAA,mBACA3F,YAAA,qDACA6F;eACArU,KAAA,IAAAlP,KAAA,YAAAqjB,UAAA,sBAAAG,cAAA,IACAtU,KAAA,WAAAlP,KAAA,cAAAqjB,UAAA,yBAEA/c,YAAA,cAAA,SAAAmkB,aACA/uB,KACA+uB,YAAAA,gBAIApH,UAAA,uBACA3F,YAAA,0BACApX,YAAA,sBAAA,0BAAA,SAAAokB,SAAAhH,QACA,GAAAzX,MAAAvQ,IACAuQ,MAAAyX,OAAAA,OACAzX,KAAAqb,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACAxb,KAAAqb,aAAAI,YAAA,WACAhE,OAAAK,YAAA,WACA,MAAA2G,UAAAxhB,QACA0a,WAAA3X,KAAAqb,aAAAC,YACAte,SAAAgD,KAAAqb,aAAAE,kBACA3D,UAAA5X,KAAA4X,WACA,SAAAxe,MACA4G,KAAA4b,QAAAxiB,KAAAxD,QACAoK,KAAAqb,aAAAQ,WAAAziB,KAAA0iB,aACA/D,YAIAtoB,KAAAktB,kBAAA,SAAAC,MACA5c,KAAAqb,aAAAC,YAAAsB,KAAAC,OAAAlF,YAAA3X,KAAAqb,aAAAC,YACAtb,KAAAqb,aAAAI,mBAKArE,UAAA,wBACA3F,YAAA,2BACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,sBAAA,aAAA,UAAA,0BAAA,iBAAA,cAAA,SAAAokB,SAAAhpB,WAAAiE,QAAA+d,OAAA0B,eAAAqF,aAKA,QAAAP,WACAxG,OAAAK,YAAA,WAiBA,MAhBA9Z,OAAA4G,MAAA6Z,SAAAvkB,KAAA4L,OAAA9H,MAAA0G,aAAA,SAAAvN,QACA6G,MAAA0gB,eAAA,CACA,IAAAC,aAAAnoB,EAAAgjB,KAAAhjB,EAAAooB,OAAA5gB,MAAA4G,MAAAia,WAAA,eACA7gB,OAAAgO,eAAA2S,aAAAA,YAAA3S,gBACAxV,EAAAsoB,UAAA9gB,MAAA4G,MAAAN,WAAAnS,KAAA,aACAqE,EAAA+a,MAAAvT,MAAA4G,MAAAN,WACAtG,MAAA+gB,YAAAP,YAAAQ,cAAAhhB,MAAA4G,OAAAqa,IAAA5R,OAEArP,MAAA+gB,YAAA,IACA/gB,MAAAkhB,8BAAA,EACAC,YAAAV,SAAAW,mBAAAtZ,OAAA9H,MAAA0G,aAAA,SAAAvN,QAEAkoB,iBAAAloB,OAAAmoB,eAAAnoB,OAAAub,WACAqF,YAGA/Z,MAAA4G,MAAAmT,WA2GA,QAAAsH,kBAAAC,eAAAC,oBACAvhB,MAAA0U,QAAA8L,YAAAQ,cAAAhhB,MAAA4G,MAAA0a,eAAAC,oBACAvhB,MAAA0U,QAAA8M,QAAAxhB,MAAA0U,QAAA8M,SAAA,mBACAxhB,MAAA+gB,YAAA/gB,MAAA0U,QAAAuM,IAAA5R,OAEArP,MAAAyhB,iBAAAzhB,MAAA0U,QAAA3c,KAAAwpB,mBAAAxpB,GACAiI,MAAAyhB,kBACAzhB,MAAA0hB,oBAAAlpB,EAAAsoB,UAAAQ,gBAAAxQ,KAAA9Q,MAAA0U,QAAAiN,eAGAnpB,EAAAsB,KAAAkG,MAAA4G,MAAAgb,aACA5hB,MAAA1B,qBAAA,EACA0B,MAAAkhB,8BAAA,GAIA,QAAA3iB,eAAAwG,QACArJ,QAAA7F,SAAAU,KAAAwO,OAlJA,GAAA/E,OAAAvO,IACAuO,OAAAyZ,OAAAA,OACAzZ,MAAA1B,qBAAA,EAwBA7M,KAAAktB,kBAAA,SAAAC,MACA5e,MAAA2Z,WAAAiF,KAAAC,OAAAlF,YAAA,EACA3Z,MAAA0G,YAAAkY,KAAAC,OAAA/W,OAEAmY,WAGAjgB,MAAA6hB,cAAA,WACA,GAAA9hB,KAAArE,QAAAud,SAAA,wBAAAjZ,MAAA0G,YAAA,UACAhL,SAAA7E,KAAAkJ,IAAA,WAGAC,MAAA8hB,YAAA,WACAX,YAAAxkB,KAAA,SAAAxD,QACA6G,MAAA0gB,eAAA,IAIA,IAAAS,YACAnhB,OAAA+hB,uBAAA,WACA,MAAAZ,aAAAxkB,KAAA,SAAAxD,QACA,GAAA6oB,yBAKA,OAJAhiB,OAAA0U,QAAAiN,cACAK,yBAAAxpB,EAAAsoB,UAAA3nB,OAAAmoB,gBAAAxQ,KAAA9Q,MAAA0U,QAAAiN,eAGAK,0BAAAA,0BAAA7oB,OAAAmoB,kBAIAthB,MAAA0hB,oBAAA,SAAAO,eACA/qB,QAAAoT,OAAAtK,MAAA0U,QAAAuN,eACAjiB,MAAA0U,QAAAiN,YAAAM,cAAAnR,KAIA9Q,MAAA0b,YAGA1b,MAAA0b,SAAA,WAQA,MAPA1b,OAAAkiB,QAAAliB,MAAA0U,SACA1U,MAAA0U,QAAAiN,aACA3hB,MAAA0U,QAAAuM,KAAAjhB,MAAA0U,QAAAuM,IAAA5R,OAAA,GACA7W,EAAA2pB,MAAA1G,WAAA,SAAA7mB,GACA,MAAA,kBAAAA,GAAA8mB,UAAA9mB,EAAA8mB,aAGA1b,MAAAkiB,SAGAliB,MAAA6b,OAAA,WACA7b,MAAA0b,YACAjC,OAAAK,YAAA,WAEA,MADA9Z,OAAA0U,QAAAQ,aAAAlV,MAAAiiB,cAAAG,KACA3B,SAAAhM,oBAAA3M,OAAA9H,MAAA0G,aAAA1G,MAAA0U,QAAA,SAAAA,SACA+L,SAAA4B,gBAAAva,OAAA9H,MAAA0G,YAAA4b,cAAA5N,QAAA5M,QAAA9H,MAAAiiB,cAAAG,KAAA,SAAAjpB,QACA,GAAAopB,uBAAAppB,OAAAopB,sBACAN,cAAA9oB,OAAA8oB,aAEA,KAAAM,sBAAAC,UAMA,WALA/qB,YAAA2B,WAAA,mBACAjF,KAAA,QACAsC,OAAA,oCAAA8rB,sBAAAlpB,MAAA,uBAAAkpB,sBAAAE,kBAAArK,KAAA,KACAzN,QAAA4X,sBAAAlpB,OAKA4oB,eAAAS,mBAAA,iBAAAT,cAAAS,kBAAA9f,eAAA2f,sBAAAI,SACApkB,cAAAyB,MAAAkb,eAAA1c,QAAA,yCAAAwB,MAAA0G,aACAub,cAAAS,mBAAA,gBAAAT,cAAAS,kBAAA9f,eAAA2f,sBAAAK,YACArkB,cAAAgkB,sBAAAK,aAEA5iB,MAAAkb,eAAAhiB,SAAAgY,iBACA+O,UAEA1hB,cAAAyB,MAAAkb,eAAA1c,QAAA,eAAAwB,MAAA0G,iBAIAqT,YAKA/Z,MAAApC,OAAA,WACAud,eAAAL,QAAA,wBAAAne,KAAA,SAAAwf,WACAA,WACA1C,OAAAK,YAAA,WACA,MAAA2G,UAAAoC,eAAA/a,OAAA9H,MAAA0G,YAAA4b,cAAAtiB,MAAA0U,QAAA5M,QAAA,KAAAmY,SAAAlG,aAMA,IAAA0B,cACAzb,OAAAwc,aAAA,SAAApD,WACAqC,WAAArmB,KAAAgkB,YAEApZ,MAAAyc,gBAAA,SAAArD,WACAqC,WAAAjjB,EAAA2F,QAAAsd,WAAArC,gBAyBAhiB,QAAA,cAAA,WA4BA,OA1BA4pB,cAAA,SAAApa,MAAA0a,eAAAC,oBACA,GAAApV,QACA2W,aAAAtqB,EAAAmL,OAAAiD,MAAAia,WAAA,SAAAjsB,GACA,MAAA,SAAAA,EAAAqa,SAEA8T,WAAAvqB,EAAAwqB,OAAAF,aAAA,SAAAG,KAAAC,KAAA,MAAAD,MAAAC,IAAAjC,IAAA5R,QAAA,GACA0R,YAAAna,MAAAuc,MAAA9T,OAAA0T,WAEAK,gBAAA5qB,EAAAmL,OAAAiD,MAAAia,WAAA,SAAAjsB,GACA,OAAAA,EAAAyuB,cACA,QAAAzuB,EAAAqa,QAAA,YAAAra,EAAAqa,SACAra,EAAAqsB,IAAA5R,OAAA,IAEAiU,eAAA9qB,EAAAgjB,KAAAhjB,EAAAooB,OAAAwC,gBAAA,eASA,QARAE,gBAAAhC,iBAAA9oB,EAAAsoB,UAAAQ,gBAAAxQ,KAAAwS,eAAA3B,eAGAJ,mBAAAA,qBAAAN,QACAM,mBAAAN,IAAA5R,OAAA0R,YACA5U,OAAAoV,oBAJApV,OAAAmX,eAOAnX,WAOAxI,OAAA,gCAAA,cAAA,SAAA6c,aACA,MAAA,UAAA5Z,OACA,GAAAuF,QAAAvF,MAAAqI,QAAA,MAEAsU,MAAA/qB,EAAAsoB,UAAAN,YAAAgD,cAAAvU,OAAA9C,OAAAvJ,eAKA,OAJA2gB,SACApX,OAAAoX,MAAAE,OAGAtX,WC5OAjV,QAAAC,OAAA,sBACAiiB,UAAA,2BACA3F,YAAA,8DACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,0BAAA,SAAAod,QACA,GAAAzX,MAAAvQ,IACAuQ,MAAAyX,OAAAA,OACAzX,KAAA0hB,sBAEA1hB,KAAA6Z,OAAA,WAEA7Z,KAAA4I,OAAA,KACA5I,KAAA3I,QACA,IACAsqB,UADAC,UAAA,CAGAD,UAAA3hB,KAAA0hB,mBAAAG,cAAA7hB,KAAA0hB,mBAAAI,YACA9hB,KAAA3I,MAAAyqB,YAAAH,SACAC,SAAAA,UAAAD,SAEAC,WACAD,SAAA3hB,KAAA0hB,mBAAAI,cAAA9hB,KAAA0hB,mBAAAK,aACA/hB,KAAA3I,MAAA0qB,aAAAJ,SACAC,SAAAA,UAAAD,UAGAC,UACA5hB,KAAAkZ,eAAAb,eAAArY,KAAA0hB,oBAAA/mB,KAAA,SAAAxD,QACAjC,QAAAoT,OAAAtI,KAAA7I,QACA6I,KAAA0hB,sBACA1hB,KAAA7E,KAAA6mB,kBAKAhiB,KAAAiiB,QAAA,SAAAC,KAAAliB,KAAA7E,KAAA+mB,SCrCAhtB,QAAAC,OAAA,sBACAiiB,UAAA,0BACA3F,YAAA,kDACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,KAAA,SAAA,4BAAA,cAAA,iCAAA,qCAAA,0BAAA,SAAA8Y,GAAA7Y,OAAAjF,YAAA6lB,YAAAxlB,oBAAA2jB,wBAAA5B,QACA,GAAAzZ,OAAAvO,IACAuO,OAAAyZ,OAAAA,OAEAnd,OAAAuG,OACA,WAAA,MAAAxL,aAAA6B,UACA,SAAAA,UACAA,UACAugB,OAAAK,YAAA,WACA,MAAApiB,qBAAA6iB,kBAAAxiB,GAAAmB,SAAAnB,IAAA,SAAAyiB,QACAxa,MAAAwa,QACAziB,GAAAyiB,OAAAziB,GACAsN,UAAAmV,OAAAnV,UACAC,SAAAkV,OAAAlV,SACAsI,MAAApV,EAAA+a,MAAAiH,OAAAG,QACAD,cAAAF,OAAAE,cACAjkB,MAAA+jB,OAAA/jB,MACA6P,UAAAkU,OAAAlU,UACA4X,iBAAA1D,OAAA0D,oBAEAnE,aAKA/Z,MAAA6b,OAAA,WAIA,MAHA7b,OAAAwa,OAAApiB,SAAA4H,MAAAwa,OAAAnV,UAAA,IAAArF,MAAAwa,OAAAlV,SACAtF,MAAAwa,OAAAG,QAAA3a,MAAAwa,OAAA5M,OAEA6L,OAAAK,YAAA,WACA,MAAApiB,qBAAAkkB,oBAAA5b,MAAAwa,OAAA,SAAAzf,UACAsgB,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,gBCxCA7iB,QAAAC,OAAA,sBACAiiB,UAAA,mBACA3F,YAAA,qDACAnR,SACA4Y,eAAA,qBAEA7e,YAAA,WACA,GAAA2F,MAAAvQ,IACAuQ,MAAAqb,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACAxb,KAAAqb,aAAAI,YAAA,WACAzb,KAAAkZ,eAAAxB,UAAA1X,KAAAqb,aAAAC,YAAAtb,KAAAqb,aAAAE,kBAAAvb,KAAA4X,UAAA,SAAAxe,MACA4G,KAAA4b,QAAAxiB,KAAAxD,QACAoK,KAAAqb,aAAAQ,WAAAziB,KAAA0iB,cAIArsB,KAAAktB,kBAAA,SAAAC,MACA5c,KAAAqb,aAAAC,YAAAsB,KAAAC,OAAAlF,YAAA3X,KAAAqb,aAAAC,YACAtb,KAAAqb,aAAAI,kBClBA,IAAArhB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,6BAAA,KAAA,SAAA,4BAAA,kCAAA,qCAAA,0BACA,SAAA8Y,GAAA7Y,OAAAjF,YAAA4lB,qBAAA5B,wBAAA5B,QAiCA,QAAA0K,aACA,GAAAC,OAAAzxB,EAAAksB,OAAA7qB,OAAA6B,SAAAoJ,OAAAolB,UAAA,GAAAxqB,MAAA,KAAAV,SACA,KAAAxG,IAAAksB,QACA,GAAAA,OAAA5Y,eAAAtT,GAAA,CACA,GAAA,KAAAksB,OAAAlsB,GAAA,QAEAyxB,OAAAvF,OAAAlsB,GAAAkH,MAAA,KACAV,OAAAmrB,mBAAAF,MAAA,KAAAE,mBAAAF,MAAA,IAGA,MAAAjrB,QAzCAmD,OAAAmd,OAAAA,OACAnd,OAAA8jB,gBAAA,KACA9jB,OAAAijB,UAAA,KAEAjjB,OAAAioB,6BAEAnG,MAAA,cACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,QACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,WACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,WACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAiBAjiB,OAAAkiB,KAAA,SAAAhR,SACAlR,OAAAijB,aACAjjB,OAAAijB,UAAA/R,QAAAA,QAEAlR,OAAAkoB,UAAA,CAEA,IAAAxF,QAAAmF,YAAAnF,MACAA,UACA1iB,OAAAioB,2BAAA,IACAnG,MAAA,cACAC,UAAA,EACAC,SAAA,EACAC,UAAA,GAEAjiB,OAAAioB,2BAAA,IACAnG,MAAA,QACAC,UAAA,EACAC,SAAA,EACAC,UAAA,GAGAjiB,OAAAijB,UAAAP,OAAAA,OACA1iB,OAAAmd,OAAAK,YAAA,WACA,MAAAmD,sBAAAwH,yBAAAzF,OAAAA,SAAAjF,SACApd,KAAA,SAAAxD,QACA,GAAAA,OAAAwR,QAEA,MADArO,QAAAjD,MAAAF,OAAAwR,QACAwK,GAAAS,OAAA,oBAEAtZ,QAAAijB,UAAAmF,YAAAvrB,OAAAurB,YACApoB,OAAAijB,UAAA3R,MAAAzU,OAAAyU,YAMAtR,OAAAqoB,SAAA,WACAroB,OAAAjD,MAAA,KAEA5H,KAAA2uB,gBAAA1E,aACApf,OAAAijB,UAAAP,OACA1iB,OAAAmd,OAAAK,YAAA,WACA,MAAAmD,sBAAA2H,kBAAA5F,OAAA1iB,OAAAijB,UAAAP,QAAA1iB,OAAAijB,UAAA,SAAApmB,QACAmD,OAAAkoB,UAAA,EACAnJ,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,WAGAzd,OAAAmd,OAAAK,YAAA,WACA,MAAAmD,sBAAA0H,SAAAroB,OAAAijB,UAAA,SAAApmB,QACAmD,OAAAkoB,UAAA,EACAnJ,wBAAAkB,YAAAjgB,SACA,SAAAkO,WACA6Q,wBAAAyB,aAAAxgB,OAAAkO,aACAuP,gBCzGA7iB,QAAAC,OAAA,sBACAiiB,UAAA,0BACA3F,YAAA,4DACA6F,eACArU,KAAA,IAAAlP,KAAA,mBAAAqjB,UAAA,6BAAAG,cAAA,IACAtU,KAAA,WAAAlP,KAAA,qBAAAqjB,UAAA,kCAIAA,UAAA,8BACA3F,YAAA,iCACApX,YAAA,6BAAA,iBAAA,0BAAA,aAAA,SAAAwoB,gBAAA1J,eAAA1B,OAAA2B,YACA,GAAApb,OAAAvO,IACAuO,OAAAyZ,OAAAA,OACAzZ,MAAAqd,cAAAC,YAAA,EAAAC,kBAAA,EAAAC,SAAA,IACAxd,MAAAqd,aAAAI,YAAA,WACAhE,OAAAK,YAAA,WACA,MAAA+K,iBAAA5lB,QACA0a,WAAA3Z,MAAAqd,aAAAC,YACAte,SAAAgB,MAAAqd,aAAAE,kBACA3D,UAAA5Z,MAAA4Z,WACA,SAAAxe,MACA4E,MAAA4d,QAAAxiB,KAAAxD,QACAoI,MAAAqd,aAAAQ,WAAAziB,KAAA0iB,aACA/D,YAIAtoB,KAAAktB,kBAAA,SAAAC,MACA5e,MAAAqd,aAAAC,YAAAsB,KAAAC,OAAAlF,YAAA3Z,MAAAqd,aAAAC,YACAtd,MAAAqd,aAAAI,mBAKArE,UAAA,+BACA3F,YAAA,kCACApX,YAAA,6BAAA,iBAAA,0BAAA,aAAA,SAAAwoB,gBAAA1J,eAAA1B,OAAA2B,YAIA,QAAA6E,WACAxG,OAAAK,YAAA,WACA,MAAA+K,iBAAA3oB,KAAA4L,OAAA9H,MAAA8kB,aAAA,SAAA3rB,QACA6G,MAAA+kB,aAAA7tB,QAAA+G,KAAA9E,UACA4gB,WAPA,GAAA/Z,OAAAvO,IACAuO,OAAAyZ,OAAAA,OAUAhoB,KAAAktB,kBAAA,SAAAC,MACA5e,MAAA2Z,WAAAiF,KAAAC,OAAAlF,YAAA,EACA3Z,MAAA8kB,YAAAlG,KAAAC,OAAA/W,OAEAmY,WAGAjgB,MAAApC,OAAA,WAIA6b,OAAAK,YAAA,WACA,MAAA+K,iBAAAjnB,QAAAkK,OAAA9H,MAAA8kB,cAAAhd,OAAA9H,MAAA8kB,YAAAE,aAAAhlB,MAAAglB,cAAA,SAAA7rB,QACA6G,MAAA+kB,aAAA7tB,QAAA+G,KAAA9E,QACA6G,MAAAilB,qBAAA,IACAlL,gBAUApW,OAAA,gBAAA,WACA,MAAA,UAAAvI,KAAA8pB,oBAeA,MAdA,oCAAA9pB,KAAA+pB,SAAAviB,cAAA,KAAA,IAAAsiB,mBAAA,EAAA,aC5EAhuB,QAAAC,OAAA,sBACAC,QAAA,yBAAA,YAAA,SAAAguB,WACA,MAAAA,WAAA,wBAAA,MACAlL,eAAAna,IAAA,wBAAAslB,OAAA,QACAhL,gBAAAta,IAAA,iCAAAslB,OAAA,QACA3L,WAAA3Z,IAAA,gCACAoa,iBAAApa,IAAA,kCAAAslB,OAAA,QACA7W,cAAAzO,IAAA,0BAAA/N,SAAA,GACAkc,mBAAAnO,IAAA,yCAAA/N,SAAA,QAGAoF,QAAA,uBAAA,YAAA,SAAAguB,WACA,MAAAA,WAAA,+BAAA,MACAnmB,QAAAc,IAAA,8BAAAslB,OAAA,QACAjE,mBAAArhB,IAAA,+CACA0U,oBAAA1U,IAAA,wCAAAslB,OAAA,QACAhD,gBAAAtiB,IAAA,+DAAAslB,OAAA,QACAxC,eAAA9iB,IAAA,8DAAAslB,OAAA,aAGAjuB,QAAA,8BAAA,YAAA,SAAAguB,WACA,MAAAA,WAAA,sCAAA,MACAnmB,QAAAc,IAAA,qCAAAslB,OAAA,QACAznB,QAAAmC,IAAA,6CAAAslB,OAAA,aCvBAnuB,QAAAC,OAAA,sBACAC,QAAA,kCAAA,YAAA,aAAA,SAAAguB,UAAAjrB,YACA,MAAAirB,WAAAjrB,WAAA,6BACAuiB,gBAAA3c,IAAA5F,WAAA,uBACA0iB,eAAA9c,IAAA5F,WAAA,kBAAAkrB,OAAA,QAEA3H,mBAAA3d,IAAA5F,WAAA,yBAAAkrB,OAAA,QACA9K,kBAAAxa,IAAA5F,WAAA,6BACAyhB,qBAAA7b,IAAA5F,WAAA,wBAAAkrB,OAAA,QACAzF,qBAAA7f,IAAA5F,WAAA,yBAAAkrB,OAAA,UAEArG,QAAAjf,IAAA5F,WAAA,iBAAAkrB,OAAA,QAEApsB,SAAA8G,IAAA5F,WAAA,2BACAmrB,YAAAvlB,IAAA5F,WAAA,gBAAAkrB,OAAA,OACAE,UAAAxlB,IAAA5F,WAAA,gBAAAnI,SAAA,QAGAoF,QAAA,mCAAA,YAAA,aAAA,SAAAguB,UAAAjrB,YACA,MAAAirB,WAAAjrB,WAAA,uBACAwqB,UAAA5kB,IAAA5F,WAAA,mBAAAkrB,OAAA,QACA7F,gBAAAzf,IAAA5F,WAAA,yBAAAkrB,OAAA,QACAZ,yBAAA1kB,IAAA5F,WAAA,kCACAyqB,kBAAA7kB,IAAA5F,WAAA,iCAAAkrB,OAAA,aAGAjuB,QAAA,sCAAA,aAAA,SAAAK,YACA,OACA8kB,YAAA,SAAAjgB,QACAA,OAAAoO,aAAA,KACApO,OAAAsO,OAAA,MAEAkS,aAAA,SAAAxgB,OAAAkO,WACA,KAAAA,UAAAyE,SACA3S,OAAAoO,aAAAF,UAAApP,KAAAuP,QACArO,OAAAsO,OAAAJ,UAAApP,KAAAyP,WACApT,WAAAqN,yBCpCA,IAAA1I,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,oBACA3F,YAAA,uDACA4F,UACAmM,OAAA,IACAC,cAAA,IACAC,eAAA,KAEArpB,YAAA,eCTA,IAAAD,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,mBACA3F,YAAA,oDACAnR,SACAqjB,aAAA,yBAEAtM,UACAzL,MAAA,KAEAvR,YAAA,WACA,GAAA2F,MAAAvQ,IAEAA,MAAAm0B,QAAA,WACA5jB,KAAA2jB,aAAAnJ,aAAA/qB,OAGAA,KAAAo0B,WAAA,WACA7jB,KAAA2jB,aAAAlJ,gBAAAhrB,OAGAuQ,KAAA0Z,SAAA,WAEA,MADA1Z,MAAA7E,KAAAkB,iBACA2D,KAAA7E,KAAAO,aCvBA,IAAAtB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,6BACA3F,YAAA,gEACAnR,SACAqjB,aAAA,yBAEAtM,UACA7E,SAAA,IACAsR,wBAAA,IACAC,uBAAA,KAEA1pB,YAAA,WAuBA,QAAA2pB,aAAAX,QACA,GAAAlZ,QAAAkZ,OAAAY,kBAIA,OAHAZ,QAAAa,aACA/Z,QAAA,IAAAkZ,OAAAa,YAEA/Z,OA1BA,GAAAnK,MAAAvQ,IAEAuQ,MAAAmkB,wBACAnkB,KAAAokB,kBACA30B,KAAAm0B,QAAA,WACA5jB,KAAA2jB,aAAAnJ,aAAA/qB,MACAuQ,KAAAqkB,SAAA,EACArkB,KAAA8jB,wBAAA9jB,KAAAwS,UAAA7X,KAAA,SAAA2pB,cACAtkB,KAAAmkB,qBAAAG,aACA9tB,EAAA6N,KAAArE,KAAAmkB,qBAAA,SAAAvxB,GACAA,EAAAmD,GAAAiuB,YAAApxB,KAEAoN,KAAAokB,eAAA5tB,EAAAiF,KAAAuE,KAAAmkB,qBAAA,SAAAvxB,GAAA,MAAAoN,MAAAwS,SAAAyR,oBAAArxB,EAAAqxB,oBAAAjkB,KAAAwS,SAAA+R,sBAAA3xB,EAAAsxB,aACAlkB,KAAAqkB,SAAA,KAIA50B,KAAAo0B,WAAA,WACA7jB,KAAA2jB,aAAAlJ,gBAAAhrB,OAWAuQ,KAAAwkB,aAAA,SAAAnB,QACArjB,KAAAokB,eAAAf,OACArjB,KAAA+jB,wBAAAU,eAAApB,UAGArjB,KAAA0Z,SAAA,WAEA,MADA1Z,MAAA7E,KAAAkB,iBACA2D,KAAA7E,KAAAO,aClDA,IAAAtB,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,wBACA3F,YAAA,0DACAiT,YAAA,EACApkB,SACAqkB,OAAA,qBAEAtN,UACAtjB,KAAA,IACAU,MAAA,IACAmwB,aAAA,KACAC,WAAA,KACAC,SAAA,KACAC,MAAA,MAEA1qB,YAAA,WACA,GAAA2F,MAAAvQ,IACAuQ,MAAAyZ,cACAzZ,KAAA8kB,UAAA,EAEAr1B,KAAAm0B,QAAA,WACA5jB,KAAA2kB,OAAAK,QAAAv1B,OAGAuQ,KAAAwa,aAAA,SAAApD,WACApX,KAAAyZ,WAAArmB,KAAAgkB,YAEApX,KAAAya,gBAAA,SAAArD,WACApX,KAAAyZ,WAAAjjB,EAAA2F,QAAA6D,KAAAyZ,WAAArC,YAEApX,KAAA0Z,SAAA,WACA,MAAAljB,GAAA2pB,MAAAngB,KAAAyZ,WAAA,SAAA7mB,GAAA,MAAA,kBAAAA,GAAA8mB,UAAA9mB,EAAA8mB,iBC/BA,IAAAtf,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,oBACAsN,YAAA,EACAjT,YAAA,qDACA4F,UACAsN,OAAA,IACAN,QAAA,IACAY,SAAA,KACAC,cAAA,MAEA7qB,YAAA,SAAA,SAAAC,QAoDA,QAAA6qB,wBAAArmB,OAEA,IAAA,GADAsmB,cAAAxO,GACAjmB,EAAAmO,MAAAlO,OAAAD,KAAA,GACAmO,MAAAnO,GAAA00B,aAAAzO,GACA9X,MAAAnO,GAAAy0B,aAAAxO,GACAwO,WAAAtmB,MAAAnO,GAAA0rB,WACA+I,SAAAC,SAAAvmB,MAAAnO,IAEAmO,MAAAnO,GAAA0rB,WACAvd,MAAAnO,GAAAy0B,SAAAA,SACAA,SAAAtmB,MAAAnO,IA7DA,GAAAqP,MAAAvQ,IACAuQ,MAAA2kB,OAAA3kB,KACAA,KAAAlB,SACAkB,KAAAslB,SAAA,SAAAC,MACArwB,QAAAob,SAAAiV,QAEAA,KAAA/uB,EAAAiF,KAAAuE,KAAAlB,MAAA,SAAAlM,GAAA,MAAAA,GAAAmB,MAAAwxB,QAEAA,MAAAvlB,KAAAwlB,aAAAD,MAAAA,KAAAT,WACAS,KAAAR,MAOA/kB,KAAAilB,UAEAjlB,KAAAilB,YARAM,KAAA7H,UAAA,EACA1d,KAAAwlB,cACAxlB,KAAAwlB,YAAA9H,UAAA,GAEA1d,KAAAwlB,YAAAD,QASAvlB,KAAAolB,SAAA,WACA,KAAAplB,KAAAwlB,YAAA9L,UAAA1Z,KAAAwlB,YAAA9L,aACA1Z,KAAAwlB,YAAAJ,SACA,GAAAplB,KAAAwlB,YAAAX,WAAA,CAEA,GAAAY,SAAAzlB,KAAAwlB,YAAAX,YAEAY,UAAAvwB,QAAAwwB,WAAAD,QAAA9qB,MACA8qB,QAAA9qB,KAAA,WACAqF,KAAAslB,SAAAtlB,KAAAwlB,YAAAJ,YAKAplB,KAAAslB,SAAAtlB,KAAAwlB,YAAAJ,cAIAplB,MAAAslB,SAAAtlB,KAAAwlB,YAAAJ,WAMAplB,KAAAqlB,SAAA,WACArlB,KAAAslB,SAAAtlB,KAAAwlB,YAAAH,WAkBArlB,KAAAglB,QAAA,SAAAO,MACAvlB,KAAAlB,MAAA1L,KAAAmyB,MACAjrB,OAAAuG,OAAA,WAAA,MAAA0kB,MAAAlJ,UAAA,WACA8I,uBAAAnlB,KAAAlB,SAEAqmB,uBAAAnlB,KAAAlB,OACAkB,KAAAwlB,aAEAxlB,KAAAslB,SAAAC,MAEAA,KAAAR,OAAA/kB,KAAAklB,eAEAllB,KAAAklB,oBCxFA,IAAAvO,YAAA,0BAEAC,IAAAC,2BACAA,0BAAAzjB,KAAAujB,YAEAzhB,QAAAC,OAAAwhB,YAAA,eAAA,mBACAtc,WAAA,sBAAA,aAAA,SAAA,UAAA,cACA,SAAA5E,WAAA6E,OAAAZ,QAAAa,aA0KA,QAAAorB,eAAAjT,SAQA,MAPApY,QAAAsrB,SAAA1G,+BACAxM,QAAA1G,mBAAA4K,IAGAlE,QAAA1G,iBACA0G,QAAA1G,eAAA7Z,KAAA,WAEA2lB,YAAA,WACA,MAAAvd,aAAAkY,mBAAAC,SAAA/X,KAAAL,OAAAurB,cAIA,QAAAC,yBAAAlhB,MAAA2b,sBAAAN,eACA,IAAAM,sBAAAC,UAOA,MANAlmB,QAAAsrB,SAAAvB,SAAA,MACA5uB,YAAA2B,WAAA,mBACAjF,KAAA,QACAsC,OAAA,kCAAA8rB,sBAAAlpB,MAAA,uBAAAkpB,sBAAAE,kBAAArK,KAAA,KACAzN,QAAA4X,sBAAAlpB,OAKA4oB,eAAAS,mBAAA,gBAAAT,cAAAS,kBAAA9f,eAAA2f,sBAAAI,SACArmB,OAAAiC,cAAAjC,OAAAkC,QAAA,yCAAAoI,MAAAkB,QACAma,cAAAS,mBAAA,eAAAT,cAAAS,kBAAA9f,eAAA2f,sBAAAK,YACAlnB,QAAA7F,SAAAU,KAAAgsB,sBAAAK,YAEAtmB,OAAApD,SAAAgY,iBAGA5U,OAAAiC,cAAAjC,OAAAkC,QAAA,mBAAAoI,MAAAkB,QAFAxL,OAAAiC,cAAAjC,OAAAkC,QAAA,eAAAoI,MAAAkB,QAOA,QAAAgS,aAAAmB,MAEA,MADA3e,QAAAsrB,SAAAvB,SAAA,EACApL,OAAAte,KAAA,SAAAxD,QAEA,MADAmD,QAAAsrB,SAAAvB,SAAA,EACAltB,QAEA,WACAmD,OAAAsrB,SAAAvB,SAAA,IArNA/pB,OAAAsrB,UACAjB,UACA1E,iBACAzN,YACAE,WACA8Q,UACApL,kBACAiM,SAAA,EACAnE,SAAA,GAGA5lB,OAAAyrB,iBAAA,SAAAH,UACAA,SAAA1F,QAAA0F,SAAAlT,SAAAkT,SAAAlT,QAAAsT,mBACAJ,SAAA1F,UAAA0F,SAAA1G,+BACA0G,SAAA1F,QAAAhrB,QAAAmhB,SAAAuP,SAAAlT,QAAA1G,iBAEA4Z,SAAA1F,SAAA0F,SAAAhrB,MAAAgrB,SAAAhrB,KAAA0B,sBACAspB,SAAA1F,QAAAhrB,QAAAmhB,SAAAuP,SAAApT,WACAoT,SAAApT,SAAAyR,oBACA/uB,QAAAmhB,SAAAuP,SAAApT,SAAAyT,mBAIA3rB,OAAAurB,WAAA,WACA,MAAAtrB,aAAAE,UAAAE,KAAA,SAAA5B,UACA,GAAA6B,MAAA7B,SAAAK,IAwBA,OAvBAwB,OAAAA,KAAA7E,IAIAuE,OAAAsrB,SAAAhrB,KAAAA,KACAN,OAAAsrB,SAAApC,OAAA5oB,KAAA4oB,QAAAlpB,OAAAsrB,SAAApC,OACAlpB,OAAAsrB,SAAApC,OAAA1U,OAAAxU,OAAAsrB,SAAApC,OAAA0C,sBACA5rB,OAAAsrB,SAAApC,OAAA2C,UAAA,qBAEAvrB,KAAAwrB,SAAAx1B,SACA0J,OAAAsrB,SAAAlT,QAAA9X,KAAAwrB,SAAA,GACA9rB,OAAAsrB,SAAA3F,cAAAnR,KAAAxU,OAAAsrB,SAAAlT,QAAAsT,oBAEAprB,KAAAglB,UAAAhvB,SACA0J,OAAAsrB,SAAApT,SAAA5X,KAAAglB,UAAA,IAEAtlB,OAAAsrB,SAAA1G,6BAAAtkB,KAAA0B,sBAAApH,QAAAmhB,SAAA/b,OAAAsrB,SAAAlT,QAAA1G,gBAEA1R,OAAAsrB,SAAAS,mBAAA/rB,OAAApD,SAAAgY,kBAAA1Y,EAAAkT,IAAA9O,KAAAG,MAAA,SAAAnI,GAAA,OAAAA,EAAA0zB,cACAhsB,OAAAsrB,SAAAW,YAAA3rB,KAAA2rB,aAAA/vB,EAAAsoB,UAAAxkB,OAAAsrB,SAAAY,uBAAAC,cAAA7rB,KAAA2rB,YAAAE,cAAAtD,SAAAvoB,KAAA2rB,YAAApD,YACA3sB,EAAAsoB,UAAAxkB,OAAAsrB,SAAAY,uBAAAC,cAAA,EAAAtD,SAAA,YAnBA7oB,OAAAiC,cAAAjC,OAAAkC,QAAA,QAqBAlC,OAAAyrB,iBAAAzrB,OAAAsrB,UACAhrB,QAIAN,OAAAosB,YAAA,SAAAlD,QACAA,OAAAmD,YAAA,EACApsB,YAAA6X,UAAAoR,OAAA1U,MAAAnU,KAAA,WACA6oB,OAAAmD,YAAA,EACArsB,OAAAurB,cACA,SAAA9sB,UACAyqB,OAAAmD,YAAA,KAIArsB,OAAAgY,aAAA,SAAAkR,QACAA,OAAAmD,YAAA,EACApsB,YAAA+X,eAAA3X,KAAA,SAAA5B,UACAyqB,OAAAmD,YAAA,EACArsB,OAAAsrB,SAAApC,UACAlpB,OAAAurB,cACA,SAAA9sB,UACAyqB,OAAAmD,YAAA,KAIArsB,OAAAolB,oBAAA,SAAAO,eACA/qB,QAAAoT,OAAAhO,OAAAsrB,SAAAlT,QAAAuN,eACA3lB,OAAAsrB,SAAAlT,QAAAsT,mBAAA/F,cAAAnR,KACAxU,OAAAsrB,SAAAlT,QAAArF,OAAAnY,QAAA+G,KAAA3B,OAAAsrB,SAAAhrB,KAAAumB,OACA7mB,OAAAsrB,SAAAlT,QAAArF,OAAAA,QAAA4S,cAAA2G,aAAAvZ,OAEAsY,cAAArrB,OAAAsrB,SAAAlT,UAUApY,OAAA4R,kBAAA,SAAAoC,SACA,MAAA/T,aAAA2R,kBAAAoC,QAAAE,OAAA7T,KAAA,SAAA5B,UACA,MAAAA,UAAAK,QAIAkB,OAAAwpB,wBAAA,SAAAtR,UACA,MAAAsF,aAAA,WACA,MAAAvd,aAAAoY,4BAAAH,SAAAzc,IAAA4E,KAAA,SAAA5B,UACA,MAAAA,UAAAK,UAKAkB,OAAAylB,uBAAA,WACA,MAAAjI,aAAA,WACA,MAAAvd,aAAAsY,6BAAAlY,KAAA,SAAA5B,UACA,MAAAA,UAAAK,UAKAkB,OAAAusB,qBAAA,SAAApC,gBACAA,gBACAnqB,OAAAsrB,SAAApT,SAAAyR,mBAAAQ,eAAAR,mBACA3pB,OAAAsrB,SAAApT,SAAA+R,qBAAAE,eAAAP,aAGA5pB,OAAAsrB,SAAApT,SAAAyR,uBAAArN,GACAtc,OAAAsrB,SAAApT,SAAA+R,yBAAA3N,IAEAtc,OAAAwsB,eAAAxsB,OAAAsrB,SAAApT,WAGAlY,OAAAwsB,eAAA,SAAAtU,UAMA,MALAA,UAAAyT,kBACA3rB,OAAAsrB,SAAApT,SAAAyT,gBAAA9zB,KAAA,YAGAqgB,SAAA1X,qBAAA8b,GACAkB,YAAA,WACA,MAAAvd,aAAAgY,oBAAAC,UAAA7X,KAAAL,OAAAurB,eAIAvrB,OAAA2Y,YAAA,WACA0S,cAAArrB,OAAAsrB,SAAAlT,SAAA/X,KAAA,WACAL,OAAAsrB,SAAAvB,SAAA,EACA9pB,YAAA0Y,YAAA3Y,OAAAsrB,SAAA3F,cAAAG,MAAAzlB,KAAA,SAAA5B,UAIA+sB,wBAHA/sB,SAAAK,KAAAwL,MACA7L,SAAAK,KAAAmnB,sBACAxnB,SAAAK,KAAA6mB,oBAMA3lB,OAAAysB,gBAAA,WACAjP,YAAA,WACA,MAAAvd,aAAAuY,uBAAAxY,OAAAsrB,SAAAW,aAAA5rB,KAAA,WACAL,OAAAsrB,SAAAhrB,KAAA2rB,YAAAjsB,OAAAsrB,SAAAW,iBAKAjsB,OAAA0sB,mBAAA,SAAAC,aACA3sB,OAAAsrB,SAAAW,cACAU,YACA3sB,OAAAysB,kBAEAjP,YAAA,WACA,MAAAvd,aAAAyY,oBAAArY,KAAA,WACAL,OAAAsrB,SAAAhrB,KAAA2rB,gBAAA3P,SAuDAtc,OAAAwO,WAAA,WAEAxO,OAAAurB,aAAAlrB,KAAA,SAAAC,MACAN,OAAAsrB,SAAAjB,OAAAW,SAAA1qB,KAAA0B,oBAAA,mBAAA,qBAzIA,WAEA,MAAA/B,aAAAiS,eAAA7R,KAAA,SAAA5B,UACA,MAAAA,UAAAK,UA0IAuB,KAAA,SAAA8R,WACAnS,OAAAsrB,SAAAxN,eAAA3L,cC1OA,IAAArS,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,aACA3F,YAAA,iCACA4F,UACAlU,QAAA,IACAmB,UAAA,IACAmI,UAAA,IACAya,oBAAA,IACAhb,kBAAA,IACAib,SAAA,IACAC,SAAA,KAEA9mB,SACAqjB,aAAA,0BAEAtpB,YAAA,SAAA,SAAAC,QAkBA,QAAA+sB,gCAAAlkB,SACAA,UAEAA,QAAAmL,QAAA9X,EAAAsoB,UAAA9e,KAAAyM,WAAA+B,MAAArL,QAAA8I,cACA,MAAA9I,QAAAmL,UACAtO,KAAAmD,QAAAK,YAAAxD,KAAAmD,QAAAmL,QAAAva,KACAiM,KAAAmD,QAAA8I,YAAAjM,KAAAmD,QAAAmL,QAAAE,OAGArL,QAAAmL,UACAnL,QAAAmL,QAAAgZ,QACAC,iBAAApkB,QAAAA,QAAAmL,QAAAgZ,SAGAtnB,KAAAkM,mBAAAoC,QAAAnL,QAAAmL,UAAA3T,KAAA,SAAA2sB,SACAnkB,QAAAmL,QAAAgZ,QAAAA,QACAC,iBAAApkB,QAAAmkB,aAOA,QAAAC,kBAAApkB,QAAAmkB,SACAnkB,QAAAqkB,OAAAhxB,EAAAsoB,UAAAwI,SAAAxY,KAAA3L,QAAAuL,WACAvL,QAAAqkB,QACAxnB,KAAAmD,QAAAuL,SAAA1O,KAAAmD,QAAAqkB,OAAA1Y,KACA9O,KAAAmD,QAAAM,WAAAzD,KAAAmD,QAAAqkB,OAAAzzB,OAGAiM,KAAAmD,QAAAuL,aAAAkI,GACA5W,KAAAmD,QAAAM,eAAAmT,IAcA,QAAA1T,kBAAAC,SACA,GAAAuJ,aAAA,GAEAva,KAAAqE,EAAAiF,KAAAuE,KAAAynB,MAAA,SAAA92B,GAAA,MAAAA,GAAAoF,IAAAiK,KAAAmD,QAAAuJ,aACAva,QACAua,YAAA,IAAAva,KAAA4B,KAAA,KAEA,IAAAqP,oBAAAsJ,WASA,OARAtJ,qBAAAD,QAAAE,UAAA,IAAAF,QAAAG,SAAA,KACAF,oBAAAD,QAAAI,aAAAJ,QAAAI,aAAA,KAAA,GACAH,oBAAAD,QAAAK,YAAA,KACAJ,oBAAAD,QAAAM,WAAAN,QAAAM,WAAA,KAAA,GACAL,oBAAAD,QAAAO,KAAA,IACAN,oBAAAD,QAAAQ,MAAA,KACAP,oBAAAD,QAAAS,MAAAT,QAAAS,MAAA,GACAR,oBAAAD,QAAAU,WA7EA,GAAA7D,MAAAvQ,IACAuQ,MAAAynB,QAAA1xB,GAAA,UAAAhC,KAAA,YAAAgC,GAAA,WAAAhC,KAAA,aAAAgC,GAAA,qBAAAhC,KAAA,yBAEAtE,KAAAm0B,QAAA,WACA5jB,KAAAknB,qBACAlnB,KAAAknB,oBAAA1M,aAAA/qB,MACAuQ,KAAA2jB,cACA3jB,KAAA2jB,aAAAnJ,aAAA/qB,OAGAA,KAAAo0B,WAAA,WACA7jB,KAAAknB,qBACAlnB,KAAAknB,oBAAAzM,gBAAAhrB,MACAuQ,KAAA2jB,cACA3jB,KAAA2jB,aAAAlJ,gBAAAhrB,OAsCAuQ,KAAAiiB,QAAA,SAAAC,KAAAliB,KAAA7E,KAAA+mB,KAEAliB,KAAA0Z,SAAA,WACA,OAAA1Z,KAAA7E,OACA6E,KAAA7E,KAAAkB,gBACA2D,KAAA7E,KAAAusB,SAwBAptB,OAAAuG,OAAA,gBAAA,WACAb,KAAAmD,UACAkkB,+BAAArnB,KAAAmD,SACAnD,KAAAmD,QAAApP,KAAAmP,iBAAAlD,KAAAmD,UAEAnD,KAAAonB,UAAAjkB,QAAAnD,KAAAmD,YACA,MCvGA,IAAA/I,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,gBACA3F,YAAA,yDACAnR,SACAqjB,aAAA,0BAEAtM,UACA+I,KAAA,IACA8G,oBAAA,KAEA7sB,YAAA,SAAA,UAAA,SAAAC,OAAAqtB,SACA,GAAA3nB,MAAAvQ,IAEAA,MAAAm0B,QAAA,WACA5jB,KAAAknB,qBACAlnB,KAAAknB,oBAAA1M,aAAA/qB,MACAuQ,KAAA2jB,cACA3jB,KAAA2jB,aAAAnJ,aAAA/qB,OAGAA,KAAAo0B,WAAA,WACA7jB,KAAAknB,qBACAlnB,KAAAknB,oBAAAzM,gBAAAhrB,MACAuQ,KAAA2jB,cACA3jB,KAAA2jB,aAAAlJ,gBAAAhrB,OAGA6K,OAAAuG,OAAA,gCAAA,SAAA+mB,KACA5nB,KAAAogB,OACApgB,KAAAogB,KAAAyH,mBAAAF,QAAA,aAAAC,QAEA,GAEA5nB,KAAA0Z,SAAA,WAEA,MADA1Z,MAAA7E,KAAAkB,iBACA2D,KAAA7E,KAAAO,aCpCA,IAAAtB,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,YACA3F,YAAA,gCACA4F,UACAyQ,MAAA,IACAnf,QAAA,IACAC,OAAA,KAEAvO,YAAA,WACA,GAAA2D,OAAAvO,IACAuO,OAAA8pB,MAAA9pB,MAAA8pB,OAAA,aCVA5yB,QAAAC,OAAA,iBAEAiiB,UAAA,kBACA3F,YAAA,uCACA4F,UACA5lB,MAAA,IACA0J,KAAA,IACApH,KAAA,IACAg0B,WAAA,IACAC,YAAA,IACA71B,KAAA,KACAoqB,SAAA,IACA0L,cAAA,KACAC,UAAA,IACA7L,SAAA,KAEAhiB,YAAA,WACA,GAAA2D,OAAAvO,IAEAuO,OAAA0b,SAAA,WAEA,MADA1b,OAAA7C,KAAAkB,gBACA2B,MAAA7C,KAAAusB,YCrBAxyB,QAAAC,OAAA,iBAEAiiB,UAAA,mBACA3F,YAAA,wCACAnR,SACA6nB,QAAA,YAEA9Q,UACA+Q,QAAA,IACAC,OAAA,IACAltB,KAAA,IACApH,KAAA,IACAi0B,YAAA,IACAzL,SAAA,IACA0L,cAAA,KACAC,UAAA,IACA7L,SAAA,KAEAhiB,YAAA,SAAA,SAAAC,QACA,GAAA0D,OAAAvO,IAEAuO,OAAA4lB,QAAA,WACA5lB,MAAAue,UACAve,MAAAmqB,QAAAG,aAAA,YAAA,GACAtqB,MAAAmqB,QAAAI,QAAA,WACAvqB,MAAAvM,MAAAuM,MAAAmqB,QAAAK,aAIAxqB,MAAA0b,SAAA,WAEA,MADA1b,OAAA7C,KAAAkB,gBACA2B,MAAA7C,KAAAusB,OAGA,IAAAW,QAAArqB,MAAAqqB,MACArqB,OAAAqqB,OAAA,SAAAI;+BACAJ,OAAAI,QACAzqB,MAAAvM,MAAAg3B,OACAzqB,MAAAue,UACAve,MAAAmqB,QAAAG,aAAA,YAAA,GACAtqB,MAAAmqB,QAAAO,cAAA1qB,MAAAvM,YCxCAyD,QAAAC,OAAA,iBAEAiiB,UAAA,qBACA3F,YAAA,0CACA4F,UACA5lB,MAAA,IACA0J,KAAA,IACApH,KAAA,IACA0tB,MAAA,IACAlF,SAAA,IACA0L,cAAA,KACAziB,QAAA,KACA0iB,UAAA,KAEA7tB,YAAA,WACA,GAAA2D,OAAAvO,IAEAuO,OAAA0b,SAAA,WAEA,MADA1b,OAAA7C,KAAAkB,gBACA2B,MAAA7C,KAAAusB,WCnBA,IAAAttB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,eACA3F,YAAA,0DACA4F,UACAtc,MAAA,MCLA,IAAAX,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,YACA3F,YAAA,gCACA4F,UACAmB,OAAA,IACA4F,gBAAA,KAEA/jB,YAAA,SAAA,SAAAC,QACA,GAAA0D,OAAAvO,IAEAA,MAAAm0B,QAAA,WACA5lB,MAAAogB,gBAAA3uB,MAGAA,KAAAo0B,WAAA,WACA7lB,MAAAogB,gBAAA,MAGApgB,MAAAikB,QAAA,SAAAC,KAAAlkB,MAAA7C,KAAA+mB,KAGAlkB,MAAA0b,SAAA,WACA,OAAA1b,MAAA7C,OACA6C,MAAA7C,KAAAkB,gBACA2B,MAAA7C,KAAAusB,YCxBA,IAAAttB,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,kBACA3F,YAAA,sCACA4F,UACAmB,OAAA,IACA4F,gBAAA,IACAD,aAAA,KAEA9jB,YAAA,SAAA,SAAAC,QAsEA,QAAAquB,gBAAAvM,OAEA,MADA5lB,GAAA+a,MAAA/a,EAAAmL,OAAA3D,MAAAxO,OAAA,SAAAo5B,YAAA,MAAAA,YAAAxM,QAAAA,SAtEA,GAAApe,OAAAvO,IAEAuO,OAAAxO,SAEA4sB,MAAA,cACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,QACAC,UAAA,EACAC,SAAA,EACAC,UAAA,IAGAH,MAAA,WACAC,UAAA,EACAC,SAAA,IAGAF,MAAA,WACAC,UAAA,EACAC,SAAA,IAGAF,MAAA,QACAC,UAAA,EACAC,SAAA,IAIAte,MAAAmgB,cACAjpB,QAAAoT,OAAAtK,MAAAxO,OAAAwO,MAAAmgB,cAEAngB,MAAA6qB,eAAA,KAEAp5B,KAAAm0B,QAAA,WACA5lB,MAAAogB,gBAAA3uB,MAGAA,KAAAo0B,WAAA,WACA7lB,MAAAogB,gBAAA,MAGApgB,MAAAikB,QAAA,SAAAC,KACAlkB,MAAA7C,KAAA+mB,KAGAlkB,MAAA0b,SAAA,WACA,OAAA1b,MAAA7C,OACA6C,MAAA7C,KAAAkB,gBACA2B,MAAA7C,KAAAusB,SAKA1pB,MAAA8qB,UAAA,SAAA1M,OACA,MAAA,IAAAuM,eAAAvM,OAAAE,SAGAte,MAAA+qB,aAAA,SAAA3M,OACA,MAAA,IAAAuM,eAAAvM,OAAAC,UAGAre,MAAAgrB,cAAA,SAAA5M,OACA,MAAA,IAAAuM,eAAAvM,OAAAG,cAUAniB,cAAAiF,UAAA,4BAAA,WACA,OACAiB,QAAA,UACAb,KAAA,SAAAC,MAAAupB,KAAA9nB,KAAAgnB,SACAA,QAAAe,SAAAC,QAAA,SAAA13B,MAAAiO,OACA,GAAAwgB,UAAA,EACAvpB,SAAAwxB,QAAAiB,aAAAC,SAAAb,UAOA,OALA7xB,YACAupB,QAAAvpB,WAAAlF,OAGA02B,QAAAG,aAAA,4BAAApI,SACAzuB,WClGA,IAAA2I,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,oBACA3F,YAAA,6DACAnR,SACAqjB,aAAA,0BAEAtM,UACA0I,uBAAA,IACAuJ,eAAA,IACArJ,cAAA,IACAiH,oBAAA,KAEA7sB,YAAA,SAAA,SAAAC,QACA,GAAA0F,MAAAvQ,IAEAA,MAAAm0B,QAAA,WACA5jB,KAAA+f,yBAAAplB,KAAA,SAAA4uB,SACAvpB,KAAAwpB,oBAAAhzB,EAAAooB,OAAA2K,QAAA,SAAA32B,GAAA,MAAAA,GAAA62B,WACAzpB,KAAAigB,gBACAjgB,KAAAigB,cAAAzpB,EAAAsoB,UAAA9e,KAAAwpB,qBAAA1a,KAAA9O,KAAAigB,cAAAnR,SAEA9O,KAAAigB,eAAAjgB,KAAAwpB,oBAAA54B,OAAA,GACAoP,KAAAwkB,aAAAxkB,KAAAwpB,oBAAA,MAGAxpB,KAAAknB,qBACAlnB,KAAAknB,oBAAA1M,aAAA/qB,MACAuQ,KAAA2jB,cACA3jB,KAAA2jB,aAAAnJ,aAAA/qB,OAGAA,KAAAo0B,WAAA,WACA7jB,KAAAknB,qBACAlnB,KAAAknB,oBAAAzM,gBAAAhrB,MACAuQ,KAAA2jB,cACA3jB,KAAA2jB,aAAAlJ,gBAAAhrB,OAGAuQ,KAAA0Z,SAAA,WACA,MAAA1Z,MAAAigB,eAGAjgB,KAAAwkB,aAAA,SAAAnB,QACArjB,KAAAigB,cAAAoD,OACArjB,KAAAspB,gBAAArJ,cAAAoD,aC7CA,IAAAjpB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,iBACA3F,YAAA,0DACA4F,YAEAhd,YAAA,SAAA,gBAAA,SAAAC,OAAAsL,eACA,GAAA5H,OAAAvO,IAEA6K,QAAAuG,OAAA,WACA,MAAA7C,OAAAwoB,uBACA,SAAAA,uBACAA,wBACAxoB,MAAAuoB,YAAA3gB,cAAA,YACA5H,MAAA7L,KAAA6L,MAAAuoB,YAAA,eAAA,WACAvoB,MAAAuoB,aAAAvoB,MAAAuoB,YAAA/vB,EAAAsoB,UAAA9gB,MAAAwoB,uBAAAC,cAAAzoB,MAAAuoB,YAAAE,cAAAtD,SAAAnlB,MAAAuoB,YAAApD,eAAAvM,KACApgB,EAAAsoB,UAAA9gB,MAAAwoB,uBAAAC,cAAA,EAAAtD,SAAA,cAIAnlB,MAAA0rB,KAAA,WACA,iBAAA1rB,MAAA7L,KACAyT,cAAA,YAAA5H,MAAAuoB,YAEA3gB,cAAA,gBAAAgR,OCxBA,IAAAxc,eAAAlF,QAAAC,OAAA,gBACAiF,eAAAgd,UAAA,WACA3F,YAAA,sCACA4F,UACA5lB,MAAA,IACAk4B,SAAA,IACAxuB,KAAA,IACApH,KAAA,IACAwoB,SAAA,IACAF,SAAA,KAEAhiB,YAAA,SAAA,cAAA,0BAAA,SAAAC,OAAA4gB,YAAAzD,QACA,GAAAzZ,OAAAvO,IACAuO,OAAAyZ,OAAAA,OAEAnd,OAAAuG,OAAA,WACA,MAAAqa,aAAAa,WACA,WACA/d,MAAA4rB,eAAApzB,EAAAC,IAAAykB,YAAAa,UAAA,SAAA8N,eACA,MAAAA,iBAEA7rB,MAAA8rB,YAGA9rB,MAAA+rB,WAAA,WACA/rB,MAAA8rB,WAGA9rB,MAAA8rB,QAAA,WACA9rB,MAAA2rB,WACA3rB,MAAAvM,MAAAypB,YAAAhhB,IAAA8D,MAAA2rB,YAIA3rB,MAAAgsB,WAAA,SAAA/N,MACAje,MAAAvM,QACAuM,MAAAvM,MAAAw4B,UAAA,GACAhO,KAAAgO,UAAA,MCrCA,IAAA7vB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,kBACA3F,YAAA,2DACA4F,UACA6S,WAAA,IACAz1B,MAAA,IACA01B,SAAA,IACAC,iBAAA,KAEA/vB,YAAA,SAAA,gBAAA,4BAAA,gBAAA,SAAAC,OAAAsL,cAAAvQ,YAAA2M,eACA,GAAAhE,OAAAvO,IACAuO,OAAAqsB,aAAAzkB,cAAA,aACA5H,MAAAqsB,eACArsB,MAAAqsB,aAAA,WACArsB,MAAAssB,YAAA,GAEAtsB,MAAAusB,gBAAA3kB,cAAA,gBACA5H,MAAAwsB,0BAAA5kB,cAAA,0BACAtL,OAAAuG,OACA,WAAA,MAAAxL,aAAA6B,UACA,SAAAA,UACAA,WACA8G,MAAA9G,SAAAA,UACA8G,MAAAusB,iBAAAvsB,MAAA9G,SAAAuzB,yBACAzsB,MAAAusB,iBAAA1mB,WAAA7F,MAAA9G,SAAAuzB,uBAAA5mB,gBAKA7F,MAAAkE,wBAAA,WACAF,cAAAG,WAAA,KAAA,4BAAA,mDACAhL,OAAAwD,KAAA,SAAA+vB,mBACA1sB,MAAAwsB,0BAAAE,kBACA1sB,MAAAksB,YACAlsB,MAAA0rB,UAIA1rB,MAAA0rB,KAAA,SAAA1V,YACA,IAAAA,YACApO,cAAA,aAAA5H,MAAAqsB,aACA,aAAArsB,MAAAqsB,aACAzkB,cAAA,gBAAA5H,MAAAusB,gBAEA3kB,cAAA,0BAAA5H,MAAAwsB,+BC7CA,IAAApwB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAgd,UAAA,YACA3F,YAAA,uDACA4F,UACAzS,MAAA,MCLA,IAAAxK,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAA5K,QAAA,WAAA,SAAA0I,UACAA,SAAAO,UAAA,sBAAA,YAAA,SAAAC,WACA,GAAAE,SAAAF,UACAmF,MAAAjF,QAAAiF,KAKA,OAJAjF,SAAAiF,MAAA,SAAA8sB,cAAAhrB,QAAAirB,UACAD,cAAAE,mBAAA,aACAhtB,MAAA8sB,cAAAhrB,QAAAirB,WAEAlyB,aAGAR,SAAAO,UAAA,wBAAA,YAAA,SAAAC,WACA,GAAA2G,WAAA3G,UAAA,GACA+H,QAAApB,UAAAoB,OAyBA,OAxBApB,WAAAoB,QAAA,WACA,GAAAhB,MAAAgB,QAAAzH,MAAAvJ,KAAAwJ,UACA,OAAA,UAAAyG,MAAAC,QAAAC,MAAAkrB,cACA,eAAAlrB,MAAAmrB,WACAD,aAAAE,QAAA,EAGA,IAAAC,eAAA,WACAvrB,MAAAwrB,OAAA,WACA,eAAAtrB,MAAAmrB,WACAD,aAAAE,QAAA,KAKArrB,SAAAS,GAAA,aAAA6qB,eAEAxrB,KAAAzG,MAAAvJ,KAAAwJ,WAEAyG,MAAAhC,IAAA,WAAA,WACAiC,QAAAU,IAAA,aAAA4qB,mBAIAvyB,aAGAR,SAAAO,UAAA,8BAAA,YAAA,SAAAC,WACA,GAAA2G,WAAA3G,UAAA,EAGA,OAFA2G,WAAAhF,WAAA,aACA3B,UAAA,GAAA2G,UACA3G,eC/CA,IAAA0B,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAiF,UAAA,gBAAA,WACA,OACAiB,SAAA,iBACAb,KAAA,SAAAC,MAAAC,QAAAC,MAAAurB,OACA,GAAAL,cAAAK,MAAA,EACA,IAAAL,aAAA,CAIA,GAAAG,eAAA,WACAtrB,QAAAyrB,SAAA,aAAAxrB,MAAAyc,UACA3c,MAAAwrB,OAAA,WACAJ,aAAAE,QAAA,KAKArrB,SAAAS,GAAA,QAAA6qB,eAEAvrB,MAAAhC,IAAA,WAAA,WACAiC,QAAAU,IAAA,QAAA4qB,sBCrBA7wB,cAAA5K,QAAA,WAAA,SAAA0I,UACAA,SAAAO,UAAA,sBAAA,YAAA,SAAAC,WACA,GAAA2yB,6BAAA3yB,UAAA,GACA+G,KAAA4rB,4BAAA5rB,IAYA,OAXA4rB,6BAAA5rB,KAAA,SAAAC,MAAA4rB,SAAAC,MAAAvrB,MACAsJ,OAAAC,KAAAgiB,OAAA3hB,SAAA,OAGA0hB,SAAApR,KAAAla,KAAAwrB,UAFA/rB,KAAAC,MAAA4rB,SAAAC,MAAAvrB,OAKAqrB,4BAAA5qB,QAAA,WACA,MAAA4qB,6BAAA5rB,MAEA/G,UAAA,GAAA2yB,4BACA3yB,gBChBA0B,cAAAiF,UAAA,WAAA,WAAA,WAAA,SAAAosB,UACA,OACAC,cAAA,EACAhH,WAAA,UACA+E,SAAA,IACAkC,UAAA,EACAnsB,SAAA,IACAosB,OAAA,EACAnsB,KAAA,SAAAnF,OAAAgxB,SAAAC,MAAAvrB,KAAA6rB,aACAA,YAAA,SAAAC,OACAR,SAAAS,MAAAD,aCVA,IAAA1xB,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAiF,UAAA,uBAAA,WACA,OACAiB,SAAA,gBAAA,sBACAb,KAAA,SAAAC,MAAAC,QAAAC,MAAAurB,OACA,GAAAL,cAAAK,MAAA,GACAa,mBAAAb,MAAA,EACA,IAAAL,cAAAkB,mBAAA,CAIArsB,QAAAssB,SAAA,wBAEA,IAAAC,cAAA,WACAvsB,QAAAyrB,SAAA,aAAAxrB,MAAAyc,UACA3c,MAAAwrB,OAAA,WACAJ,aAAAE,QAAA,KAKArrB,SAAAS,GAAA,aAAA8rB,cAEAxsB,MAAAhC,IAAA,WAAA,WACAiC,QAAAU,IAAA,aAAA6rB,qBCzBAh3B,QAAAC,OAAA,iBACAiiB,UAAA,kBACA3F,YAAA,oBACA6F,eACArU,KAAA,IAAAlP,KAAA,QAAAqjB,UAAA,mBACAnU,KAAA,gBAAAlP,KAAA,eAAAqjB,UAAA,0BACAnU,KAAA,WAAAlP,KAAA,UAAAqjB,UAAA,mBAAAG,cAAA,IAEAld,YAAA,cAAA,aAAA,YAAA,kBAAA,cAAA,aAAA,0BAAA,WAAA,gBAAA,gBAAA,SAAA8xB,YAAA12B,WAAAkE,UAAA6I,gBAAAjI,YAAA6e,WAAA3B,OAAAhe,SAAAuI,cAAA4D,eAoCA,QAAAwmB,eAAA/Y,OACA,GAAA7c,EAAAiF,KAAA4X,OAAAgZ,SAAA,IAAA,CACA,GAAAC,UAAA91B,EAAAiF,KAAA4X,OAAAgZ,SAAA,GACAruB,OAAAuuB,WAAAD,cAEA91B,GAAAg2B,QAAAnZ,SACA7c,EAAA+a,MAAA8B,OAAAgZ,SAAA,EACAruB,MAAAuuB,WAAA/1B,EAAA+a,MAAA8B,SA1CA,GAAArV,OAAAvO,IAEAuO,OAAAkG,YAAA,WACA1B,gBAAA2B,qBAAAxJ,KAAA,SAAA8xB,MACAzuB,MAAA7H,SAAAs2B,KAAArzB,KAAAjD,SACA6H,MAAA8K,gBAIA9K,MAAA0uB,UAAA,SAAAC,SACA3uB,MAAA4uB,gBACA5uB,MAAA6uB,YAAAF,QACA3uB,MAAAkG,eAGAlG,MAAA8K,WAAA,SAAAuK,OACA,YAAArV,MAAA6uB,YACApV,OAAAK,YAAA,WACA,MAAAqU,aAAA/Y,mBAAApV,MAAA7H,UAAAwE,KAAA,SAAAxD,QACA6G,MAAAqV,MAAAlc,OACAi1B,cAAApuB,MAAAqV,WAKA,iBAAArV,MAAA6uB,aACApV,OAAAK,YAAA,WACA,MAAAqU,aAAAtY,eAAA7V,MAAA7H,UAAAwE,KAAA,SAAAxD,QACA6G,MAAAqV,MAAAlc,OACAi1B,cAAApuB,MAAAqV,YAiBArV,MAAAuuB,WAAA,SAAAjZ,MACAtV,MAAA4uB,aAAAtZ,MAGAtV,MAAA8uB,UAAA,SAAAtxB,UACAic,OAAAK,YAAA,WACA,MAAAvd,aAAAgD,YAAA/B,SAAA0K,UAAA,GAAAvL,KAAA,SAAA5B,UACAiF,MAAA+uB,cAAA,EACAtzB,SAAA,WACAuE,MAAA+uB,cAAA,GACA,UAKA/uB,MAAAgvB,WAAA,SAAA9Y,UACAuD,OAAAK,YAAA,WACA,MAAAqU,aAAAxX,UAAAT,SAAAlW,MAAA7H,UAAAwE,KAAA,SAAA5B,UACA9H,SAAA4C,SAAAo5B,cAKAjvB,MAAAhC,eAAA,SAAAR,UACAic,OAAAK,YAAA,WACA,MAAAqU,aAAAnwB,eAAAR,SAAAzF,GAAAiI,MAAA4uB,aAAA72B,GAAAiI,MAAA7H,UAAAwE,KAAA,SAAAxD,cAKA6G,MAAAkvB,aAAA,WACAlvB,MAAAmvB,WAAAxzB,UAAAoJ,SAAAqqB,OAAA,EAAA52B,EAAA62B,YAAA1zB,UAAAoJ,SAAA,MAAA,oBAAA/E,MAAA4uB,aAAA72B,GACAiI,MAAA4uB,aAAAr1B,WAAA,QACA,IAAAqG,aAAAuvB,WAAAnvB,MAAAmvB,WACAnrB,eAAAG,WAAAvE,WAAA,wCAAA,2CAGAI,MAAAsvB,qBAAA,WACA92B,EAAA6N,KAAArG,MAAA4uB,aAAA7xB,MAAA,SAAAC,MACAyc,OAAAK,YAAA,WACA,MAAAvd,aAAAgD,YAAAvC,KAAAkL,UAAA,GAAAvL,KAAA,SAAA5B,UACAiF,MAAA+uB,cAAA,EACAtzB,SAAA,WACAuE,MAAA+uB,cAAA,GACA,YAMA/uB,MAAAuvB,WAAA,WACA,GAAA3vB,YAAAI,MAAAqV,KACArR,eAAAG,WAAAvE,WAAA,wCAAA,mDAGAI,MAAAwvB,aAAA,WACA,GAAA5vB,cACAA,YAAAyV,MAAArV,MAAAqV,MACAzV,WAAAzH,SAAA6H,MAAA7H,SACAyH,WAAAivB,YAAA7uB,MAAA6uB,YACA7qB,cAAAG,WAAAvE,WAAA,wCAAA,4CAKAwZ,UAAA,oBACA3F,YAAA,kDACAnR,SACAmtB,aAAA,oBAEApzB,YAAA,aAAA,cAAA,kBAAA,0BAAA,WAAA,uBAAA,gBAAA,SAAA5E,WAAA02B,YAAA3pB,gBAAAiV,OAAAhe,SAAAuI,cAAA4D,eACA,GAAA5H,OAAAvO,IACAuO,OAAA0vB,eAAA,SAAAra,OACA7Q,gBAAA2B,qBAAAxJ,KAAA,SAAA8xB,MACA,GAAAt2B,UAAAs2B,KAAArzB,KAAAjD,QACAshB,QAAAK,YAAA,WACA,MAAAqU,aAAA/Y,mBAAAjd,SAAAkd,OAAA1Y,KAAA,SAAAxD,gBAMA6G,MAAA4lB,QAAA,SAAAvQ,OACArV,MAAAyvB,aAAAf,UAAA,gBAIAtV,UAAA,yBACA3F,YAAA,kDACAnR,SACAmtB,aAAA,oBAEApzB,YAAA,aAAA,cAAA,YAAA,kBAAA,0BAAA,WAAA,uBAAA,gBAAA,SAAA5E,WAAA02B,YAAAxyB,UAAA6I,gBAAAiV,OAAAhe,SAAAuI,cAAA4D,eAGA,QAAA+nB,iBACA,GAAAlZ,cAAA9a,UAAAsD,SAAAlH,GAAA4d,UACAnR,iBAAA2B,qBAAAxJ,KAAA,SAAA8xB,MACA,GAAAt2B,UAAAs2B,KAAArzB,KAAAjD,SACAqe,QAAA2X,YAAA/Y,mBAAAjd,SACAshB,QAAAK,YAAA,WACA,MAAAqU,aAAA5X,cAAApe,SAAAqe,QAAAC,cAAA9Z,KAAA,SAAAxD,QACA6G,MAAAyvB,aAAAf,UAAA,sBATA,GAAA1uB,OAAAvO,IAeAuO,OAAA4lB,QAAA,WACAjqB,UAAAsD,SAAAlH,IACA43B,gBACA3vB,MAAAyvB,aAAAf,UAAA,qBCtKAx3B,QAAAC,OAAA,iBACAiiB,UAAA,mBACA3F,YAAA,qDACA4F,UACAnN,kBAAA,KAEA7P,YAAA,kBAAA,cAAA,gBAAA,SAAAmI,gBAAA2pB,YAAAnqB,eAMA,QAAA4rB,yBACA5vB,MAAA6vB,eAAA,EACArrB,gBAAA2B,qBAAAxJ,KAAA,SAAA8xB,MACAN,YAAA/Y,mBAAAqZ,KAAArzB,KAAAjD,SAAA6H,MAAAqV,OAAA1Y,KAAA,SAAAxD,QACA6G,MAAAqV,MAAAlc,OACAjC,QAAA8mB,QAAAhe,MAAAqV,MAAA,SAAAC,MACA6Y,YAAA9X,eAAArW,MAAAkM,kBAAAnU,GAAAud,KAAAvd,IAAA4E,KAAA,SAAAxD,SACA,IAAAA,OAAA2W,WACA9P,MAAA6vB,eAAA,WAQA,QAAAC,wBAAA1wB,QAAA7B,UACA,OACA6B,QAAAA,QACA7B,SAAAA,SACAwU,SAAA,GAzBA,GAAA/R,OAAAvO,IACAuO,OAAA4lB,QAAA,WACAgK,yBA2BA5vB,MAAA+vB,qBAAA,WACA,GAAAnwB,YAAAkwB,uBAAA9vB,MAAAkM,kBAAA,EACAlI,eAAAG,WAAAvE,WAAA,wCAAA,mDAGAI,MAAAgwB,gBAAA,WACAhsB,cAAAG,YAAA1N,MAAA,0BAAA,4BAAA,yCC1CA,IAAA2F,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,yCAAA,SAAA,UAAA,oBAAA,aAAA,cAAA,aAAA,gBAAA,kBAAA,SAAAC,OAAAZ,QAAAiE,kBAAAC,WAAAuuB,YAAA/S,WAAAxT,cAAApD,iBACAlI,OAAA2zB,kBACA3zB,OAAAsyB,gBACAhvB,WAAAR,QAAAwN,SAAAhN,WAAAR,QAAA8wB,aAAAnwB,IACAH,WAAAR,QAAA+wB,YAAA,GAAA39B,MACAoN,WAAAR,QAAA8I,UAAAtI,WAAAR,QAAA+K,MAAAjC,UACA1P,EAAA8R,OAAA1K,WAAAR,QAAAQ,WAAAR,QAAA+K,OACA3R,EAAA8R,OAAA1K,WAAAR,QAAAQ,WAAAR,QAAA4Q,WAEA1T,OAAAsD,WAAAA,WAAAR,QACA9C,OAAAsD,WAAArC,SAAAqC,WAAArC,SACAjB,OAAA8zB,YAAA,EACA9zB,OAAA+zB,WAAA,EAEA/zB,OAAAg0B,iBAAA,WACAh0B,OAAA8zB,YAAA,CACA9zB,QAAAnE,SAAAmE,OAAAxE,MAEAwE,QAAAnE,WAAAmE,OAAAsyB,aAAArZ,SACA3V,WAAAR,QAAAmxB,WAAAj0B,OAAAnE,UAEAg2B,YAAAhY,cAAA7Z,OAAAsyB,aAAA72B,GAAA6H,WAAAR,SAEA9C,OAAA8zB,YAAA,EACA9zB,OAAA+zB,WAAA,GAEA/zB,OAAAiyB,WAAA,SAAAjZ,MACAhZ,OAAAsyB,aAAAtZ,MAGAhZ,OAAAuD,MAAA,WACAF,kBAAAE,SAEAvD,OAAAwD,SAAA,SAAAC,KACArE,QAAA7F,SAAAkK,KAGAzD,OAAAwO,WAAA,SAAAuK,OACA7Q,gBAAA2B,qBAAAxJ,KAAA,SAAA8xB,MACAnyB,OAAAnE,SAAAs2B,KAAArzB,KAAAjD,SACAg2B,YAAA/Y,mBAAA9Y,OAAAnE,SAAAkd,OAAA1Y,KAAA,SAAAxD,QACAmD,OAAA+Y,MAAAlc,OACAjC,QAAA8mB,QAAA1hB,OAAA+Y,MAAA,SAAAC,MACAA,KAAA7e,MAAA6e,KAAAvf,KACAuf,KAAAkb,YAAAlb,KAAAvf,KACAo4B,YAAA9X,eAAAzW,WAAAR,QAAArH,GAAAud,KAAAvd,IAAA4E,KAAA,SAAAxD,QACAmc,KAAAxF,SAAA3W,OAAA2W,eAKAqe,YAAAtY,eAAAvZ,OAAAnE,UAAAwE,KAAA,SAAAxD,QACAmD,OAAAwZ,YAAA3c,OACAjC,QAAA8mB,QAAA1hB,OAAAwZ,YAAA,SAAAR,MACAA,KAAA7e,MAAA6e,KAAAvf,KACAuf,KAAAkb,YAAAlb,KAAAvf,KACAo4B,YAAA9X,eAAAzW,WAAAR,QAAArH,GAAAud,KAAAvd,IAAA4E,KAAA,SAAAxD,QACAmc,KAAAxF,SAAA3W,OAAA2W,oBC3DA,IAAA1T,eAAAlF,QAAAC,OAAA,gBAEAiF,eAAAC,WAAA,yCAAA,aAAA,SAAA,UAAA,oBAAA,kBAAA,aAAA,cAAA,gBAAA,0BAAA,aAAA,SAAA5E,WAAA6E,OAAAZ,QAAAiE,kBAAA6E,gBAAA5E,WAAAuuB,YAAAvmB,cAAA6R,OAAA2B,YAEAxb,WAAAuvB,WACA7yB,OAAA6yB,WAAAvvB,WAAAuvB,YAEA7yB,OAAAsD,WAAAA,WAAAyV,MACA/Y,OAAAnE,SAAAyH,WAAAzH,SACAmE,OAAA8zB,YAAA,EACA9zB,OAAAlB,KAAAkB,OAAA4Z,SACA5Z,OAAAuyB,YAAAjvB,WAAAivB,aAGAvyB,OAAAizB,WAAA,WACA,UAAAjzB,OAAAsD,WAAArG,aACA+C,OAAAsD,WAAArG,WAAA,WAEA+C,OAAAsD,WAAA7H,GAAAyd,KAAAC,MAAA,kBAAAD,KAAAE,SAAA,GAAAC,WACAnR,gBAAA2B,qBAAAxJ,KAAA,SAAA8xB,MACAnyB,OAAAnE,SAAAs2B,KAAArzB,KAAAjD,SACAg2B,YAAAlY,YAAA3Z,OAAAsD,WAAAsW,SAAA5Z,OAAAsD,WAAArG,WAAA+C,OAAAsD,WAAA7H,GAAA02B,KAAArzB,KAAAjD,UACAwH,kBAAAE,WAKAvD,OAAAm0B,WAAA,SAAAnb,MACA9c,EAAA6N,KAAA/J,OAAAsD,WAAA,SAAAhL,GACAA,EAAAy5B,QAAA/Y,OAAA1gB,KAIA0H,OAAA0yB,WAAA,SAAA1Z,MACA,iBAAAhZ,OAAAuyB,YACApV,OAAAK,YAAA,WACA,MAAAqU,aAAAvX,uBAAAtB,KAAAvd,GAAAuE,OAAAnE,UAAAwE,KAAA,gBAKAwxB,YAAAxX,UAAArB,KAAAvd,GAAAuE,OAAAnE,UAEAwH,kBAAAE,QACA5M,SAAA4C,SAAAo5B,UAGA3yB,OAAAsyB,aAAA,SAAA1Y,UACA,GAAAnZ,OAAAoxB,YAAAlY,YAAAC,SAAA,GAAA,GAAA5Z,OAAAnE,UAAA4E,KACAT,QAAAsyB,aAAA7xB,MAAAA,OAGAT,OAAAo0B,eAAA,WACAx5B,QAAA8mB,QAAApe,WAAAyV,MAAA,SAAAC,MACAA,KAAApB,QACA5X,OAAA0yB,WAAA1Z,QAEA3V,kBAAAE,SAGAvD,OAAAuD,MAAA,WACAF,kBAAAE,SAGAvD,OAAAwD,SAAA,SAAAC,KACArE,QAAA7F,SAAAkK","file":"scripts.js","sourcesContent":["/*\r\nBSD 2-Clause License\r\n\r\nCopyright (c) 2016, Benjamin Cordier\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nvar Interactor = function (config) {\r\n    // Call Initialization on Interactor Call\r\n    this.__init__(config);\r\n};\r\n\r\nInteractor.prototype = {\r\n\r\n    // Initialization\r\n    __init__: function (config) {\r\n\r\n        var interactor = this;\r\n        \r\n        // Argument Assignment          // Type Checks                                                                          // Default Values\r\n        interactor.interactions = typeof (config.interactions) == \"boolean\" ? config.interactions : true,\r\n        interactor.interactionElements = Array.isArray(config.interactionElements) === true ? config.interactionElements : ['interaction'],\r\n        interactor.interactionEvents = Array.isArray(config.interactionEvents) === true ? config.interactionEvents : ['mouseup', 'touchend'],     \r\n        interactor.endpoint = typeof (config.endpoint) == \"string\" ? config.endpoint : '/interactions',\r\n        interactor.async = typeof (config.async) == \"boolean\" ? config.async : true,\r\n        interactor.debug = typeof (config.debug) == \"boolean\" ? config.debug : true,\r\n        interactor.records = [],\r\n        interactor.session = {},\r\n        interactor.loadTime = new Date();\r\n\r\n        // Initialize Session\r\n        interactor.__initializeSession__();\r\n        // Call Event Binding Method\r\n        interactor.__bindEvents__();\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Create Events to Track\r\n    __bindEvents__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Set Interaction Capture\r\n        if (interactor.interactions === true) {\r\n            for (var i = 0; i < interactor.interactionEvents.length; i++) {\r\n                var ev = interactor.interactionEvents[i];\r\n                for (var elIndex = 0; elIndex < interactor.interactionElements.length; elIndex++) {\r\n                    var className = interactor.interactionElements[elIndex];\r\n                    var targets = document.getElementsByClassName(className);\r\n                    if (targets) {\r\n                        for (var j = 0; j < targets.length; j++) {\r\n                            var targetElement = targets[j];\r\n                            var interationArg = targetElement.getAttributeNode(\"interactor-arg\");\r\n                            var eventListener =  {\r\n                                className: className,\r\n                                content:  interationArg ? interationArg.value : \"\",\r\n                                handleEvent : function(e) {\r\n                                    e.stopPropagation();\r\n                                    interactor.__addInteraction__(e, this.className, this.content);\r\n                                }\r\n                            };\r\n                            targets[j].removeEventListener(ev, eventListener);\r\n                            targets[j].addEventListener(ev, eventListener);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind onbeforeunload Event\r\n        window.onbeforeunload = function (e) {\r\n            interactor.__sendInteractions__();\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Add Interaction Object Triggered By Events to Records Array\r\n    __addInteraction__: function (e, type, arg) {\r\n\r\n\r\n        var interactor = this,\r\n\r\n            // Interaction Object\r\n            interaction = {\r\n                type: type,\r\n                event: e.type,\r\n                targetTag: e.target.nodeName,\r\n                targetClasses: e.target.className,\r\n                content: arg,//e.target.innerText,\r\n                clientPosition: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                screenPosition: {\r\n                    x: e.screenX,\r\n                    y: e.screenY\r\n                },\r\n                createdAt: new Date()\r\n            };\r\n\r\n        // Insert into Records Array\r\n        interactor.records.push(interaction);\r\n\r\n        // Log Interaction if Debugging\r\n        if (interactor.debug) {\r\n            // Close Session & Log to Console\r\n            interactor.__closeSession__();\r\n            console.log(\"Session:\\n\", interactor.session);\r\n        }\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Generate Session Object & Assign to Session Property\r\n    __initializeSession__: function () {\r\n        var interactor = this;\r\n\r\n        // Assign Session Property\r\n        interactor.session = {\r\n            loadTime: interactor.loadTime,\r\n            unloadTime: new Date(),\r\n            language: window.navigator.language,\r\n            platform: window.navigator.platform,\r\n            port: window.location.port,\r\n            clientStart: {\r\n                name: window.navigator.appVersion,\r\n                innerWidth: window.innerWidth,\r\n                innerHeight: window.innerHeight,\r\n                outerWidth: window.outerWidth,\r\n                outerHeight: window.outerHeight\r\n            },\r\n            page: {\r\n                location: window.location.pathname,\r\n                href: window.location.href,\r\n                origin: window.location.origin,\r\n                title: document.title\r\n            },\r\n            endpoint: interactor.endpoint\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n    // Insert End of Session Values into Session Property\r\n    __closeSession__: function () {\r\n\r\n        var interactor = this;\r\n\r\n        // Assign Session Properties\r\n        interactor.session.unloadTime = new Date();\r\n        interactor.session.interactions = interactor.records;\r\n        interactor.session.clientEnd = {\r\n            name: window.navigator.appVersion,\r\n            innerWidth: window.innerWidth,\r\n            innerHeight: window.innerHeight,\r\n            outerWidth: window.outerWidth,\r\n            outerHeight: window.outerHeight\r\n        };\r\n\r\n        return interactor;\r\n    },\r\n\r\n\r\n    // Gather Additional Data and Send Interaction(s) to Server\r\n    __sendInteractions__: function () {\r\n\r\n        var interactor = this,\r\n            // Initialize Cross Header Request\r\n            xhr = new XMLHttpRequest();\r\n\r\n        // Close Session\r\n        interactor.__closeSession__();\r\n\r\n        // Post Session Data Serialized as JSON\r\n        xhr.open('POST', interactor.endpoint, interactor.async);\r\n        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        xhr.send(JSON.stringify(interactor.session));\r\n\r\n        return interactor;\r\n    }\r\n\r\n};","angular.module('storefrontApp')\r\n.factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n    function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n    \r\n    var authContext = {\r\n        userId: null,\r\n        userLogin: null,\r\n        fullName: null,\r\n        userType: null,\r\n        roles: null,\r\n        permissions: null,\r\n        isAuthenticated: false\r\n    };\r\n\r\n    authContext.login = function (login, password) {\r\n        return $auth.login($httpParamSerializerJQLike({\r\n                userName: login,\r\n                password: password,\r\n                grant_type: \"password\"\r\n            }),\r\n            { headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n        });\r\n    };\r\n\r\n    authContext.fillAuthData = function () {\r\n        return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n            function (result) {\r\n                changeAuth(result)\r\n                $rootScope.$broadcast('loginStatusChanged', authContext);\r\n            },\r\n            function (error) { });\r\n    };\r\n\r\n    authContext.checkPermission = function (permission, securityScopes) {\r\n        //first check admin permission\r\n        // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n        var hasPermission = authContext.isAdministrator;\r\n        if (!hasPermission && permission) {\r\n            permission = permission.trim();\r\n            //first check global permissions\r\n            hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n            if (!hasPermission && securityScopes) {\r\n                if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                    securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                    //Check permissions in scope\r\n                    hasPermission = _.some(securityScopes, function (x) {\r\n                        var permissionWithScope = permission + \":\" + x;\r\n                        var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                        //console.log(permissionWithScope + \"=\" + retVal);\r\n                        return retVal;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return hasPermission;\r\n    };\r\n\r\n    function changeAuth(results) {\r\n        authContext.userId = results.id;\r\n        authContext.roles = results.roles;\r\n        authContext.permissions = results.permissions;\r\n        authContext.userLogin = results.userName;\r\n        authContext.fullName = results.userLogin;\r\n        authContext.isAuthenticated = results.userName != null;\r\n        authContext.userType = results.userType;\r\n        authContext.isAdministrator = results.isAdministrator;\r\n        //Interpolate permissions to replace some template to real value\r\n        if (authContext.permissions) {\r\n            authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                return $interpolate(x)(authContext);\r\n            });\r\n        }\r\n    };\r\n\r\n    return authContext;\r\n}])\r\n.constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n.config(['$authProvider', '$provide', 'apiBaseUrl', function($authProvider, $provide, apiBaseUrl) {\r\n    $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n    $authProvider.tokenName = 'access_token';\r\n    $authProvider.tokenPrefix = 'platform';\r\n    $authProvider.oauth2({\r\n      name: 'platform',\r\n      clientId: 'web'\r\n    });\r\n    $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function($delegate, tokenExpirationName) {\r\n        var service = $delegate;\r\n        var originalSetToken = service.setToken;\r\n        service.setToken = function(response){\r\n            originalSetToken.apply(service, arguments);\r\n            var expirationTime = Date.parse(response.data['.expires']);\r\n            this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n        };\r\n        return service;\r\n    }]);\r\n}])\r\n.run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n    var logOut = function(){\r\n        $auth.logout();\r\n        $authStorage.remove(tokenExpirationName);\r\n        $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n    };\r\n\r\n    if ($auth.isAuthenticated()){\r\n        $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', function ($rootScope, $scope, $timeout, cartService, catalogService) {\r\n    var timer;\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                getCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n    \tif (!lineItem || $scope.cartIsUpdating) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\tgetCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            getCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }   \r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            getCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        getCart();\r\n    }\r\n\r\n    function getCart() {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.getCart().then(function (response) {\r\n            var cart = response.data;\r\n            cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function (item) { return _.some(item.validationErrors) });\r\n            $scope.cart = cart;\r\n            $scope.cartIsUpdating = false;\r\n        }, function (response) {\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('collectionController', ['$scope', '$location', function ($scope, $location) {\r\n    var $ctrl = this;\r\n    $ctrl.sortModes = {\r\n        'manual': 'collections.sorting.featured',\r\n        'best-selling': 'collections.sorting.best_selling',\r\n        'title-ascending': 'collections.sorting.az',\r\n        'title-descending': 'collections.sorting.za',\r\n        'price-ascending': 'collections.sorting.price_ascending',\r\n        'price-descending': 'collections.sorting.price_descending',\r\n        'createddate-descending': 'collections.sorting.date_descending',\r\n        'createddate-ascending': 'collections.sorting.date_ascending'\r\n    };\r\n    $ctrl.viewQuery = { view: 'grid' };\r\n    $ctrl.generatePageSizes = function (capacity, steps) {\r\n        $ctrl.pageSizeQuery = { page_size: capacity };\r\n        // for example            start: 16 stop: 16 * 3 + 1 = 49 step: 16\r\n        $ctrl.pageSizes = _.range(capacity, capacity * steps + 1, capacity);\r\n    }\r\n    $ctrl.keywordQuery = { keyword: null };\r\n}]);\r\n","storefrontApp.controller('universalDialogController', ['$scope', '$uibModalInstance', 'dialogData', function ($scope, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function (result) {\r\n        if (result) {\r\n            $uibModalInstance.close(result);\r\n        } else {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcContentPlace', ['$compile', 'marketingService', function ($compile, marketingService) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            marketingService.getDynamicContent(attrs.id).then(function (response) {\r\n                element.html($compile(response.data)(scope));\r\n            });\r\n        },\r\n        replace: true\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterSource', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        controller: function() { },\r\n        link: function (scope, element, attrs, ctrl) {\r\n            var onKeyPress = function (event) {\r\n                if (event.keyCode === 13) { // Enter\r\n                    ctrl.element[0].click();\r\n                }\r\n            };\r\n            element.on('keypress', onKeyPress);\r\n            scope.$on('$destroy', function () {\r\n                element.off('keypress', onKeyPress);\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcEnterTarget', [function () {\r\n    return {\r\n        restrict: \"A\",\r\n        require: \"^vcEnterSource\",\r\n        link: function (scope, element, attrs, ctrl) {\r\n            ctrl.element = element;\r\n        }\r\n    };\r\n}]);\r\n\r\nstorefrontApp.directive('vcQuerySource', ['$parse', 'searchQueryService', function ($parse, searchQueryService) {\r\n    return {\r\n        restrict: \"A\",\r\n        compile: function (tElem, tAttr) {\r\n            if (!tAttr.href) {\r\n                return function(scope, element, attrs) {\r\n                    // If the linked element is not an anchor tag anymore, do nothing\r\n                    if (element[0].nodeName.toLowerCase() !== 'a') return;\r\n\r\n                    // get query from current url, replace query parts with specified parts and set href\r\n                    scope.$watch(function() {\r\n                         return [attrs.vcQuerySource, attrs.queryType];\r\n                    }, function (obj) {\r\n                        var querySource = $parse(obj[0])(scope);\r\n                        var queryType = $parse(obj[1])(scope);\r\n                        var href = searchQueryService.getLink(querySource, queryType);\r\n                        element.attr(\"href\", href);\r\n                    }, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('vcQueryTarget', ['$parse', 'searchQueryService', function ($parse, searchQueryService) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            var vcQueryTarget = $parse(attrs.vcQueryTarget);\r\n            // get requested keys and set ng-model value to value of ?key1=value1&key2=value2\r\n            var t = vcQueryTarget(scope);\r\n            var state = searchQueryService.getState(t);\r\n            vcQueryTarget.assign(scope, state);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.directive('fallbackSrc', function () {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.on('error', errorHandler);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('error', errorHandler);\r\n            });\r\n\r\n            function errorHandler(event) {\r\n                if (element.attr('src') !== attrs.fallbackSrc) {\r\n                    element.attr('src', attrs.fallbackSrc);\r\n                }\r\n                else {\r\n                    element.off(event);\r\n                }\r\n            };\r\n        }\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.filter('imgurl', function () {\r\n    return function (input, type) {\r\n        if (!type)\r\n            return input;\r\n\r\n        var extention = '.' + input.split('.').pop();\r\n        var suffix = \"_\" + type;\r\n        var result = input.replace(extention, suffix+extention);\r\n        return result;\r\n    };\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('inventoryController', ['dialogService', 'fulfillmentCenterService', function (dialogService, fulfillmentCenterService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.selectFulfillmentCenter = function() {\r\n        dialogService.showDialog({ isFilter: true }, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n    };\r\n\r\n    $ctrl.searchFulfillmentCenters = function() {\r\n        fulfillmentCenterService.searchFulfillmentCenters({ searchPhrase: $ctrl.searchPhrase }).then(function(response) {\r\n            $ctrl.fulfillmentCenters = response.data.results;\r\n        });\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $scope.$watch(function () {\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('orderController', ['$scope', '$window', 'orderService', function ($scope, $window, orderService) {\r\n    getOrder($window.orderNumber);\r\n\r\n    function getOrder(orderNumber) {\r\n        orderService.getOrder(orderNumber).then(function (response) {\r\n            if (response && response.data) {\r\n                $scope.order = response.data;\r\n            }\r\n        });\r\n    }\r\n}]);","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);","if (Prism.languages.markup) {\r\n    Prism.languages.insertBefore('markup', 'tag', {\r\n        'script': {\r\n            pattern: /(<script[\\s\\S]*?type=\"text\\/ng-template\"[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\r\n            lookbehind: true,\r\n            inside: Prism.languages.html,\r\n            alias: 'language-html'\r\n        }\r\n    });\r\n}\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productListController', ['$scope', '$window', 'pricingService', function ($scope, $window, pricingService) {\r\n    var $ctrl = this;\r\n\r\n    $ctrl.loaded = false;\r\n    $ctrl.prices = {};\r\n\r\n    pricingService.getActualProductPrices($window.productList).then(function (response) {\r\n        var prices = response.data;\r\n        $ctrl.prices = _.object(_.map(prices, function(price) {\r\n            return [price.productId, price];\r\n        }));\r\n        $ctrl.loaded = !!prices.length;\r\n    });\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productController', ['$rootScope', '$scope', '$window', '$timeout', 'dialogService', 'catalogService', 'cartService', 'quoteRequestService',\r\n    function ($rootScope, $scope, $window, $timeout, dialogService, catalogService, cartService, quoteRequestService) {\r\n        //TODO: prevent add to cart not selected variation\r\n        // display validator please select property\r\n        // display price range\r\n\r\n        $scope.allVariations = [];\r\n        $scope.allVariationsMap = {}\r\n        $scope.allVariationPropsMap = {};\r\n        $scope.filterableVariationPropsMap = { };\r\n        $scope.selectedVariation = {};\r\n        $scope.productPrice = null;\r\n        $scope.productPriceLoaded = false;\r\n\r\n        $scope.addProductToCart = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n            cartService.addLineItem(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        }\r\n\r\n        // TODO: Replace mock with real function\r\n        $scope.addProductsToCartMock = function () {\r\n            var rejection = {\r\n                data: {\r\n                    message: \"The 1 product(s) below was not added to cart:\",\r\n                    modelState: {\r\n                        \"Test\": \"Test\"\r\n                    }\r\n                }\r\n            };\r\n            var items = [\r\n                {\r\n                    id: \"9cbd8f316e254a679ba34a900fccb076\",\r\n                    name: \"3DR Solo Quadcopter (No Gimbal)\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1428965138000_1133723.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$896.39\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$1,075.67\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$995.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$1,195.19\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,792.78\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$2,151.34\"\r\n                        }\r\n                    },\r\n                    quantity: 2,\r\n                    url: \"~/camcorders/aerial-imaging-drones/3dr-solo-quadcopter-no-gimbal\"\r\n                },\r\n                {\r\n                    id: \"ad4ae79ffdbc4c97959139a0c387c72e\",\r\n                    name: \"Samsung Galaxy Note 4 SM-N910C 32GB\",\r\n                    imageUrl: \"//localhost/admin/assets/catalog/1416164841000_1097106.jpg\",\r\n                    price: {\r\n                        actualPrice: {\r\n                            formattedAmount: \"$530.99\"\r\n                        },\r\n                        actualPriceWithTax: {\r\n                            formattedAmount: \"$637.19\"\r\n                        },\r\n                        listPrice: {\r\n                            formattedAmount: \"$589.99\"\r\n                        },\r\n                        listPriceWithTax: {\r\n                            formattedAmount: \"$707.99\"\r\n                        },\r\n                        extendedPrice: {\r\n                            formattedAmount: \"$1,592.97\"\r\n                        },\r\n                        extendedPriceWithTax: {\r\n                            formattedAmount: \"$1,911.57\"\r\n                        }\r\n                    },\r\n                    quantity: 5,\r\n                    url: \"~/cell-phones/samsung-galaxy-note-4-sm-n910c-32gb\"\r\n                }\r\n            ];\r\n            var dialogData = toDialogDataModelMock(items, rejection);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedCartItemDialogController', 'storefront.recently-added-cart-item-dialog.tpl');\r\n        }\r\n\r\n        $scope.addProductToCartById = function (productId, quantity, event) {\r\n            event.preventDefault();\r\n            catalogService.getProduct([productId]).then(function (response) {\r\n                if (response.data && response.data.length) {\r\n                    var product = response.data[0];\r\n                    $scope.addProductToCart(product, quantity);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.addProductToActualQuoteRequest = function (product, quantity) {\r\n            var dialogData = toDialogDataModel(product, quantity);\r\n            dialogService.showDialog(dialogData, 'recentlyAddedActualQuoteRequestItemDialogController', 'storefront.recently-added-actual-quote-request-item-dialog.tpl');\r\n            quoteRequestService.addProductToQuoteRequest(product.id, quantity).then(function (response) {\r\n                $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n            });\r\n        }\r\n\r\n        function toDialogDataModel(product, quantity) {\r\n            return { items: [angular.extend({ }, product, { quantity: quantity })] };\r\n            //     return {\r\n            //         id: product.id,\r\n            //         name: product.name,\r\n            //         imageUrl: product.primaryImage ? product.primaryImage.url : null,\r\n            //         listPrice: product.price.listPrice,\r\n            //listPriceWithTax: product.price.listPriceWithTax,\r\n            //         placedPrice: product.price.actualPrice,\r\n            //         placedPriceWithTax: product.price.actualPriceWithTax,\r\n            //         quantity: quantity,\r\n            //         updated: false\r\n            //     }\r\n        }\r\n\r\n        function toDialogDataModelMock(items, rejection) {\r\n            var dialogDataModel = {};\r\n            if (rejection) {\r\n                dialogDataModel.errorMessage = rejection.data.message;\r\n                dialogDataModel.errors = rejection.data.modelState;\r\n            }\r\n            dialogDataModel.items = items;\r\n            return dialogDataModel;\r\n        }\r\n\r\n        function initialize(filters) {\r\n            var productIds = _.map($window.products, function (product) { return product.id });\r\n            if (!productIds || !productIds.length) {\r\n                return;\r\n            }\r\n            catalogService.getProduct(productIds).then(function (response) {\r\n\t\t\t\tvar product = response.data[0];\r\n                //Current product is also a variation (titular)\r\n                var allVariations = [product].concat(product.variations || []);\r\n                var filteredVariations = allVariations;\r\n                $scope.allVariations.length = 0;\r\n                if (filters) {\r\n                    var variationPropsKeys = Object.keys(filters.terms || {});\r\n                    filteredVariations = _.filter(allVariations, function(variation) {\r\n                        return _.all(variation.variationProperties, function(property) {\r\n                            return !variationPropsKeys.includes(property.displayName) || filters.terms[property.displayName].includes(property.value);\r\n                        });\r\n                    });\r\n                }\r\n                Array.prototype.push.apply($scope.allVariations, filteredVariations);\r\n                angular.copy(_.object(filteredVariations.map(function (variation) { return [variation.id, variation]; })), $scope.allVariationsMap);\r\n                angular.copy(getFlatternDistinctPropertiesMap(allVariations), $scope.allVariationPropsMap);\r\n                angular.copy(_.pick($scope.allVariationPropsMap, function (value, key, object) { return value.length > 1; }), $scope.filterableVariationPropsMap);\r\n\r\n                //Auto select initial product as default variation  (its possible because all our products is variations)\r\n                //var propertyMap = getVariationPropertyMap(product);\r\n                //_.each(_.keys(propertyMap), function (x) {\r\n                //    $scope.checkProperty(propertyMap[x][0])\r\n                //});\r\n                $scope.selectedVariation = product;\r\n            });\r\n        };\r\n\r\n        function getFlatternDistinctPropertiesMap(variations) {\r\n            var retVal = {};\r\n            _.each(variations, function (variation) {\r\n                var propertyMap = getVariationPropertyMap(variation);\r\n                //merge\r\n                _.each(_.keys(propertyMap), function (x) {\r\n                    retVal[x] = _.uniq(_.union(retVal[x], propertyMap[x]), \"value\");\r\n                });\r\n            });\r\n            return retVal;\r\n        };\r\n\r\n        function getVariationPropertyMap(variation) {\r\n            return _.groupBy(variation.variationProperties, function (x) { return x.displayName });\r\n        }\r\n\r\n        function getSelectedPropsMap(variationPropsMap) {\r\n            var retVal = {};\r\n            _.each(_.keys(variationPropsMap), function (x) {\r\n                var property = _.find(variationPropsMap[x], function (y) {\r\n                    return y.selected;\r\n                });\r\n                if (property) {\r\n                    retVal[x] = [property];\r\n                }\r\n            });\r\n            return retVal;\r\n        }\r\n\r\n        function comparePropertyMaps(propMap1, propMap2) {\r\n            return _.every(_.keys(propMap1), function (x) {\r\n                var retVal = propMap2.hasOwnProperty(x);\r\n                if (retVal) {\r\n                    retVal = propMap1[x][0].value == propMap2[x][0].value;\r\n                }\r\n                return retVal;\r\n            });\r\n        };\r\n\r\n        //function findVariationBySelectedProps(variations, selectedPropMap) {\r\n        //    return _.find(variations, function (x) {\r\n        //        return comparePropertyMaps(getVariationPropertyMap(x), selectedPropMap);\r\n        //    });\r\n        //}\r\n\r\n        ////Method called from View when user clicks one property value\r\n        //$scope.checkProperty = function (property) {\r\n        //    //Select appropriate property and unselect previous selection\r\n        //    _.each($scope.allVariationPropsMap[property.displayName], function (x) {\r\n        //        x.selected = x != property ? false : !x.selected;\r\n        //    });\r\n\r\n        //    //try to find the best variation match for selected properties\r\n        //    $scope.selectedVariation = findVariationBySelectedProps(allVariations, getSelectedPropsMap($scope.allVariationPropsMap));\r\n        //};\r\n\r\n        $scope.sendToEmail = function (storeId, productId, productUrl, language) {\r\n            dialogService.showDialog({ storeId: storeId, productId: productId, productUrl: productUrl, language: language }, 'recentlyAddedCartItemDialogController', 'storefront.send-product-to-email.tpl');\r\n        };\r\n\r\n        $scope.print = function() {\r\n            $window.print();\r\n        };\r\n\r\n        $scope.$watch('filters', initialize);\r\n    }]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'mailingService', 'dialogData', function ($scope, $window, $uibModalInstance, mailingService, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.dismiss('cancel');\r\n    }\r\n\r\n    $scope.send = function(email) {\r\n        mailingService.sendProduct(dialogData.productId, { email: email, storeId: dialogData.storeId, productUrl: dialogData.productUrl, language: dialogData.language });\r\n        $uibModalInstance.close();\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recommendationsController', ['$scope', '$timeout', 'recommendationService', function ($scope, $timeout, recommendationService) {\r\n   \r\n    $scope.isBlockVisible = false;\r\n    $scope.productListRecommendationsLoaded = false;\r\n    $scope.productListRecommendations = [];\r\n   \r\n    $scope.getRecommendations = function (evalContext) {\r\n     \r\n        if (_.isString(evalContext.productIds)) {\r\n            if (evalContext.productIds.match(\",\")) {\r\n                var values = evalContext.productIds.split(',');\r\n                evalContext.productIds = values;\r\n            }\r\n            else {\r\n                evalContext.productIds = [evalContext.productIds];\r\n            }\r\n        }\r\n        recommendationService.getRecommendedProducts(evalContext).then(function (response) {\r\n            var products = response.data;\r\n            if (products.length) {\r\n                for (var i = 0; i < products.length; i++) {\r\n                    $scope.productListRecommendations.push(products[i]);\r\n                }\r\n\r\n                $scope.isBlockVisible = products.length > 0;\r\n            }\r\n\r\n            $scope.productListRecommendationsLoaded = true;            \r\n        });\r\n    }\r\n    $scope.startRecordInteraction = function () {\r\n        //Necessary condition for ensure what angularjs rendering process finished\r\n        $timeout(function () {\r\n           window.startRecordInteraction();\r\n        });\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.controller('searchBarController', ['$scope', '$timeout', '$window', 'catalogService', function ($scope, $timeout, $window, catalogService) {\r\n    var timer;\r\n\r\n    $scope.query = $window.searchQuery;\r\n\r\n    $scope.getSuggestions = function () {\r\n        if (!$scope.query) {\r\n            return;\r\n        }\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.searching = true;\r\n            $scope.categorySuggestions = [];\r\n            $scope.productSuggestions = [];\r\n            var searchCriteria = {\r\n                keyword: $scope.query,\r\n                skip: 0,\r\n                take: $window.suggestionsLimit\r\n            }\r\n            catalogService.searchCategories(searchCriteria).then(function (response) {\r\n                var categories = response.data.categories;\r\n                if (categories.length > 5) {\r\n                    searchCriteria.take = $window.suggestionsLimit - 5;\r\n                    $scope.categorySuggestions = _.first(categories, 5);\r\n                } else {\r\n                    searchCriteria.take = $window.suggestionsLimit - categories.length;\r\n                    $scope.categorySuggestions = categories;\r\n                }\r\n                catalogService.search(searchCriteria).then(function (response) {\r\n                    var products = response.data.products;\r\n                    $scope.productSuggestions = products;\r\n                    $scope.searching = false;\r\n                });\r\n            });\r\n        }, 300);\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('fulfillmentCenterService', ['$http', 'apiBaseUrl', function($http, apiBaseUrl) {\r\n    return {\r\n        searchFulfillmentCenters: function (criteria) {\r\n            return $http.post(apiBaseUrl + 'api/fulfillment/search/centers', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', { products: products });\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', { searchCriteria: criteria });\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', { searchCriteria: criteria });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('searchQueryService', ['$location', '$httpParamSerializer', function ($location, $httpParamSerializer) {\r\n    return {\r\n        // Converts search query strings like '?key=value1[,value2]' or '?key=key1:value1[,value2[;key2:value3[,value4]]]' to search query state object\r\n        getState: function(obj) {\r\n            var result = {};\r\n            // ?key=valueString&key=valueString\r\n            _.each(Object.keys(obj), function(key) {\r\n                var valueString = $location.search()[key];\r\n                // ?key=value or ?key=key1:value1\r\n                if (valueString) {\r\n                    if (!valueString.match(/[:]/g)) {\r\n                        result[key] = valueString.split(',');\r\n                    } else {\r\n                        var pairs = { };\r\n                        // ?key=key1:value1;key2:value2\r\n                        var pairsString = valueString.split(';');\r\n                        _.each(pairsString, function(pairString) {\r\n                            var pair = pairString.split(':');\r\n                            var key = pair[0];\r\n                            var values = pair[1].split(',');\r\n                            pairs[key] = values;\r\n                        });\r\n                        result[key] = pairs;\r\n                    }\r\n                    result[key] = !angular.isArray(obj[key]) && result[key].length === 1 ? result[key][0] : result[key];\r\n                }\r\n            });\r\n            result = angular.extend({ }, obj, result);\r\n            return result;\r\n        },\r\n\r\n        // Gets link like http://localhost/collection?key=key1:value1,value2;key2:value3,value4 from search query state object\r\n        getLink: function(obj, type) {\r\n            var query = $location.search();\r\n            var state = this.getState(query);\r\n            // add or replace value when defined, remove when null and leave old when undefined\r\n            var process = function (src, dest, fn, isArray) {\r\n                var chain = _.chain(_.union(dest ? Object.keys(dest) : [], src ? Object.keys(src) : []))\r\n                    .filter(function(key) {\r\n                        return dest && (dest[key] || !(key in dest)) || src[key] || !(key in src);\r\n                    })\r\n                    .map(function(key) {\r\n                        return fn(key, src ? src[key] : null, dest ? dest[key] : null);\r\n                    })\r\n                    .compact();\r\n                if (!isArray) {\r\n                    chain = chain.object();\r\n                }\r\n                return chain.value();\r\n            }\r\n            var selectValue = function(srcVal, destVal) {\r\n                if (destVal && angular.isArray(destVal) || angular.isArray(srcVal)) {\r\n                    destVal = destVal ? _.compact(destVal) : null;\r\n                    srcVal = _.chain([srcVal]).flatten().compact().value();\r\n                    return (type === 'checkable' ? _.difference((destVal || []).concat(srcVal), _.intersection(destVal, srcVal)) : destVal || srcVal).join(',');\r\n                } else {\r\n                    return destVal || srcVal;\r\n                }\r\n            }\r\n            var result = process(state, obj, function (key, srcVal, destVal) {\r\n                var value;\r\n                // replace value when ?key=value and merge objects when ?key=key1:value1\r\n                if (destVal && angular.isObject(destVal) && !angular.isArray(destVal) || angular.isObject(srcVal) && !angular.isArray(srcVal)) {\r\n                    if (srcVal) {\r\n                        if (!angular.isObject(srcVal) || angular.isArray(srcVal))\r\n                            throw 'Type of ' + key + ' in search query and object is different';\r\n                    } else {\r\n                        srcVal = angular.isArray(destVal) ? [] : {};\r\n                    }\r\n                    value = process(srcVal, destVal, function (subKey, subSrcVal, subDestVal) {\r\n                        var subVal = selectValue(subSrcVal, subDestVal);\r\n                        return subVal ? subKey + ':' + (angular.isArray(subVal) ? subVal.join(',') : subVal) : null;\r\n                    }, true);\r\n                    value = value.join(';');\r\n                } else {\r\n                    value = selectValue(srcVal, destVal);\r\n                }\r\n                return value ? [key, value] : [];\r\n            }, false);\r\n            var url = new URL($location.absUrl());\r\n            url.search = $httpParamSerializer(result);\r\n            return url.href;\r\n        }\r\n    }\r\n}]);\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'storefrontApp', 'satellizer'])\r\n\r\n.config(['$translateProvider', function ($translateProvider) {\r\n    $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n    $translateProvider.useUrlLoader(BASE_URL + 'themes/localization.json');\r\n    $translateProvider.preferredLanguage('en');\r\n}])\r\n\r\n.run(['$templateCache', function ($templateCache) {\r\n    // cache application level templates\r\n    $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n}])\r\n\r\n.value('$routerRootComponent', 'vcAccountManager')\r\n.service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}])\r\n\r\n.component('vcAccountManager', {\r\n    templateUrl: \"account-manager.tpl\",\r\n    bindings: {\r\n        baseUrl: '<',\r\n        customer: '<'\r\n    },\r\n    $routeConfig: [\r\n         { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders'},\r\n         { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n         { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n         { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n         { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n         { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n         { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n         { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n         { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n    ],\r\n    controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateProfile = function (updateRequest) {\r\n            loader.wrapLoading(function () {\r\n                return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.updateAddresses = function (data) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.availCountries = accountApi.getCountries();\r\n\r\n        $ctrl.getCountryRegions = function (country) {\r\n            return accountApi.getCountryRegions(country).$promise;\r\n        };\r\n\r\n        $ctrl.changePassword = function (changePasswordData) {\r\n            return loader.wrapLoading(function () {\r\n                return accountApi.changePassword(changePasswordData).$promise;\r\n            });\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return mainContext.customer;\r\n        }, function (customer) {\r\n            if (customer) {\r\n                loader.wrapLoading(function () {\r\n                    return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                        customer.companyId = _.first(member.organizations);\r\n                        customer.email = _.first(member.emails);\r\n                    }).$promise;\r\n                });\r\n                authService.fillAuthData();\r\n            }\r\n        });\r\n\r\n        $scope.$on('loginStatusChanged', function(){\r\n            $timeout(function(){\r\n                $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n            });\r\n        });\r\n    }]\r\n})\r\n\r\n.service('confirmService', ['$q', function ($q) {\r\n    this.confirm = function (message) {\r\n        return $q.when(window.confirm(message || 'Is it OK?'));\r\n    };\r\n}])\r\n\r\n.factory('loadingIndicatorService', function () {\r\n    var retVal = {\r\n        isLoading: false,\r\n        wrapLoading: function (func) {\r\n            retVal.isLoading = true;\r\n            return func().then(function (result) {\r\n                retVal.isLoading = false;\r\n                return result;\r\n            },\r\n            function () { retVal.isLoading = false; });\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, roleService, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, loader) {\r\n\r\n    $scope.loader = loader;\r\n    $scope.memberComponent = null;\r\n    $scope.newMember = null;\r\n\r\n    $scope.registerMemberFieldsConfig = [\r\n        {\r\n            field: 'CompanyName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Email',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'UserName',\r\n            disabled: false,\r\n            visible: true,\r\n            required: true\r\n        },\r\n        {\r\n            field: 'Password',\r\n            disabled: false,\r\n            visible:  true,\r\n            required: true\r\n        }\r\n    ];\r\n\r\n    function getParams() {\r\n        var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n        for (i in params) {\r\n            if (params.hasOwnProperty(i)) {\r\n                if (params[i] === \"\") continue;\r\n\r\n                param = params[i].split(\"=\");\r\n                result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    $scope.init = function (storeId) {\r\n        $scope.newMember = {};\r\n        $scope.newMember.storeId = storeId;\r\n\r\n        $scope.complete = false;\r\n\r\n        var invite = getParams().invite;\r\n        if (invite) {\r\n            $scope.registerMemberFieldsConfig[0] = {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n            $scope.registerMemberFieldsConfig[1] = {\r\n                field: 'Email',\r\n                disabled: true,\r\n                visible: true,\r\n                required: true\r\n            };\r\n\r\n            $scope.newMember.invite = invite;\r\n            $scope.loader.wrapLoading(function() {\r\n                return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                    .then(function(result) {\r\n                        if (result.message) {\r\n                            $scope.error = result.message;\r\n                            return $q.reject(\"Invite is invalid\");\r\n                        }\r\n                        $scope.newMember.companyName = result.companyName;\r\n                        $scope.newMember.email = result.email;\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.register = function () {\r\n        $scope.error = null;\r\n\r\n        if (this.memberComponent.validate()) {\r\n            if ($scope.newMember.invite) {\r\n                $scope.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerByInvite({ invite: $scope.newMember.invite }, $scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            } else {\r\n                $scope.loader.wrapLoading(function() {\r\n                    return corporateRegisterApi.register($scope.newMember, function (result) {\r\n                        $scope.complete = true;\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}]);","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { url: apiBaseUrl + 'api/b2b/register', method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutCoupon', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-coupon.tpl.liquid\",\r\n\tbindings: {\r\n\t\tcoupon: '=',\r\n\t\tonApplyCoupon: '&',\r\n\t\tonRemoveCoupon: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\t\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutEmail', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-email.tpl.html\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\temail: '='\r\n\t},\r\n\tcontroller: [function () {\r\n\t\tvar ctrl = this;\r\n\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t};\r\n\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCheckoutShippingMethods', {\r\n\ttemplateUrl: \"themes/assets/js/checkout/checkout-shippingMethods.tpl.liquid\",\r\n\trequire: {\r\n\t\tcheckoutStep: '^vcCheckoutWizardStep'\r\n\t},\r\n\tbindings: {\r\n\t\tshipment: '=',\r\n\t\tgetAvailShippingMethods: '&',\r\n\t\tonSelectShippingMethod: '&'\r\n\t},\r\n\tcontroller: [function () {\r\n\r\n\t\tvar ctrl = this;\r\n\t\t\r\n\t\tctrl.availShippingMethods = [];\r\n\t\tctrl.selectedMethod = {};\r\n\t\tthis.$onInit = function () {\r\n\t\t\tctrl.checkoutStep.addComponent(this);\r\n\t\t\tctrl.loading = true;\r\n\t\t\tctrl.getAvailShippingMethods(ctrl.shipment).then(function (availMethods) {\r\n\t\t\t\tctrl.availShippingMethods = availMethods;\r\n\t\t\t\t_.each(ctrl.availShippingMethods, function (x) {\r\n\t\t\t\t\tx.id = getMethodId(x);\r\n\t\t\t\t});\r\n\t\t\t\tctrl.selectedMethod = _.find(ctrl.availShippingMethods, function (x) { return ctrl.shipment.shipmentMethodCode == x.shipmentMethodCode && ctrl.shipment.shipmentMethodOption == x.optionName });\r\n\t\t\t\tctrl.loading = false;\r\n\t\t\t});\r\n\t\t};\t\t\r\n\t\t\r\n\t\tthis.$onDestroy = function () {\r\n\t\t\tctrl.checkoutStep.removeComponent(this);\r\n\t\t};\r\n\t\t\t\r\n\t\tfunction getMethodId(method) {\r\n\t\t\tvar retVal = method.shipmentMethodCode;\r\n\t\t\tif (method.optionName) {\r\n\t\t\t\tretVal += ':' + method.optionName;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t}\r\n\r\n\t\tctrl.selectMethod = function (method) {\r\n\t\t\tctrl.selectedMethod = method;\r\n\t\t\tctrl.onSelectShippingMethod({ shippingMethod: method });\r\n\t\t};\r\n\t\r\n\t\tctrl.validate = function () {\r\n\t\t\tctrl.form.$setSubmitted();\r\n\t\t\treturn !ctrl.form.$invalid;\r\n\t\t}\r\n\t}]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizardStep', {\r\n    templateUrl: \"themes/assets/js/checkout/checkout-wizard-step.tpl.html\",\r\n    transclude: true,\r\n    require: {\r\n        wizard: '^vcCheckoutWizard'\r\n    },\r\n    bindings: {\r\n        name: '@',\r\n        title: '@',\r\n        stepDisabled: '=?',\r\n        onNextStep: '&?',\r\n        canEnter: '=?',\r\n        final: '<?'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.components = [];\r\n        ctrl.canEnter = true;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.wizard.addStep(this);\r\n        };\r\n\r\n        ctrl.addComponent = function (component) {\r\n            ctrl.components.push(component);\r\n        };\r\n        ctrl.removeComponent = function (component) {\r\n            ctrl.components = _.without(ctrl.components, component);\r\n        };\r\n        ctrl.validate = function () {\r\n            return _.every(ctrl.components, function (x) { return typeof x.validate !== \"function\" || x.validate(); });\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcCheckoutWizard', {\r\n\ttransclude: true,\r\n\ttemplateUrl: 'themes/assets/js/checkout/checkout-wizard.tpl.html',\r\n\tbindings: {\r\n\t\twizard: '=',\r\n\t\tloading: '=',\r\n\t\tonFinish: '&?',\r\n\t\tonInitialized: '&?'\r\n\t},\r\n\tcontroller: ['$scope', function ($scope) {\r\n\t\tvar ctrl = this;\r\n\t\tctrl.wizard = ctrl;\r\n\t\tctrl.steps = [];\t\r\n\t\tctrl.goToStep = function (step) {\r\n\t\t\tif (angular.isString(step))\r\n\t\t\t{\r\n\t\t\t\tstep = _.find(ctrl.steps, function (x) { return x.name == step; });\r\n\t\t\t}\r\n\t\t\tif (step && ctrl.currentStep != step && step.canEnter) {\r\n\t\t\t\tif (!step.final) {\r\n\t\t\t\t\tstep.isActive = true;\r\n\t\t\t\t\tif (ctrl.currentStep) {\r\n\t\t\t\t\t\tctrl.currentStep.isActive = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctrl.currentStep = step;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ctrl.onFinish)\r\n\t\t\t\t{\r\n\t\t\t\t\tctrl.onFinish();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.nextStep = function () {\r\n\t\t\tif (!ctrl.currentStep.validate || ctrl.currentStep.validate()) {\r\n\t\t\t\tif (ctrl.currentStep.nextStep) {\r\n\t\t\t\t\tif (ctrl.currentStep.onNextStep) {\r\n\t\t\t\t\t\t//evaluate onNextStep function\r\n\t\t\t\t\t\tvar promise = ctrl.currentStep.onNextStep();\r\n\t\t\t\t\t\t//For promise function need to delay going to next step\r\n\t\t\t\t\t\tif (promise && angular.isFunction(promise.then)) {\r\n\t\t\t\t\t\t\tpromise.then(function () {\r\n\t\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tctrl.goToStep(ctrl.currentStep.nextStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tctrl.prevStep = function () {\r\n\t\t\tctrl.goToStep(ctrl.currentStep.prevStep);\r\n\t\t};\r\n\r\n\t\tfunction rebuildStepsLinkedList(steps) {\r\n\t\t\tvar nextStep = undefined;\r\n\t\t\tfor (var i = steps.length; i-- > 0;) {\r\n\t\t\t\tsteps[i].prevStep = undefined;\r\n\t\t\t\tsteps[i].nextStep = undefined;\r\n\t\t\t\tif (nextStep && !steps[i].disabled) {\r\n\t\t\t\t\tnextStep.prevStep = steps[i]\r\n\t\t\t\t};\t\t\t\t\r\n\t\t\t\tif (!steps[i].disabled) {\r\n\t\t\t\t\tsteps[i].nextStep = nextStep;\r\n\t\t\t\t\tnextStep = steps[i];\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t};\r\n\t\t\r\n\t\tctrl.addStep = function (step) {\r\n\t\t\tctrl.steps.push(step);\r\n\t\t\t$scope.$watch(function () { return step.disabled; }, function () {\r\n\t\t\t\trebuildStepsLinkedList(ctrl.steps);\t\t\t\r\n\t\t\t});\r\n\t\t\trebuildStepsLinkedList(ctrl.steps);\r\n\t\t\tif(!ctrl.currentStep)\r\n\t\t\t{\r\n\t\t\t\tctrl.goToStep(step);\r\n\t\t\t}\r\n\t\t\tif (step.final && ctrl.onInitialized)\r\n\t\t\t{\r\n\t\t\t\tctrl.onInitialized();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}]\r\n});\r\n","//Call this to register our module to main application\r\nvar moduleName = \"storefront.checkout\";\r\n\r\nif (storefrontAppDependencies != undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['credit-cards', 'angular.filter'])\r\n.controller('checkoutController', ['$rootScope', '$scope', '$window', 'cartService',\r\n    function ($rootScope, $scope, $window, cartService) {\r\n        $scope.checkout = {\r\n            wizard: {},\r\n            paymentMethod: {},\r\n            shipment: {},\r\n            payment: {},\r\n            coupon: {},\r\n            availCountries: [],\r\n            loading: false,\r\n            isValid: false\r\n        };\r\n\r\n        $scope.validateCheckout = function (checkout) {\r\n            checkout.isValid = checkout.payment && checkout.payment.paymentGatewayCode;\r\n            if (checkout.isValid && !checkout.billingAddressEqualsShipping) {\r\n                checkout.isValid = angular.isObject(checkout.payment.billingAddress);\r\n            }\r\n            if (checkout.isValid && checkout.cart && checkout.cart.hasPhysicalProducts) {\r\n                checkout.isValid = angular.isObject(checkout.shipment)\r\n                                && checkout.shipment.shipmentMethodCode\r\n                                && angular.isObject(checkout.shipment.deliveryAddress);\r\n            }\r\n        };\r\n\r\n        $scope.reloadCart = function () {\r\n            return cartService.getCart().then(function (response) {\r\n                var cart = response.data;\r\n                if (!cart || !cart.id) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart');\r\n                }\r\n                else {\r\n                    $scope.checkout.cart = cart;\r\n                    $scope.checkout.coupon = cart.coupon || $scope.checkout.coupon;\r\n                    if ($scope.checkout.coupon.code && !$scope.checkout.coupon.appliedSuccessfully) {\r\n                        $scope.checkout.coupon.errorCode = 'InvalidCouponCode';\r\n                    }\r\n                    if (cart.payments.length) {\r\n                        $scope.checkout.payment = cart.payments[0];\r\n                        $scope.checkout.paymentMethod.code = $scope.checkout.payment.paymentGatewayCode;\r\n                    }\r\n                    if (cart.shipments.length) {\r\n                        $scope.checkout.shipment = cart.shipments[0];\r\n                    }\r\n                    $scope.checkout.billingAddressEqualsShipping = cart.hasPhysicalProducts && !angular.isObject($scope.checkout.payment.billingAddress);\r\n\r\n                    $scope.checkout.canCartBeRecurring = $scope.customer.isRegisteredUser && _.all(cart.items, function (x) { return !x.isReccuring });\r\n                    $scope.checkout.paymentPlan = cart.paymentPlan && _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: cart.paymentPlan.intervalCount, interval: cart.paymentPlan.interval }) ||\r\n                                                                      _.findWhere($scope.checkout.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n                }\r\n                $scope.validateCheckout($scope.checkout);\r\n                return cart;\r\n            });\r\n        };\r\n\r\n        $scope.applyCoupon = function (coupon) {\r\n            coupon.processing = true;\r\n            cartService.addCoupon(coupon.code).then(function () {\r\n                coupon.processing = false;\r\n                $scope.reloadCart();\r\n            }, function (response) {\r\n                coupon.processing = false;\r\n            });\r\n        }\r\n\r\n        $scope.removeCoupon = function (coupon) {\r\n            coupon.processing = true;\r\n            cartService.removeCoupon().then(function (response) {\r\n                coupon.processing = false;\r\n                $scope.checkout.coupon = {};\r\n                $scope.reloadCart();\r\n            }, function (response) {\r\n                coupon.processing = false;\r\n            });\r\n        }\r\n\r\n        $scope.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($scope.checkout.payment, paymentMethod);\r\n            $scope.checkout.payment.paymentGatewayCode = paymentMethod.code;\r\n            $scope.checkout.payment.amount = angular.copy($scope.checkout.cart.total);\r\n            $scope.checkout.payment.amount.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            updatePayment($scope.checkout.payment);\r\n        };\r\n\r\n        function getAvailCountries() {\r\n            //Load avail countries\r\n            return cartService.getCountries().then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCountryRegions = function (country) {\r\n            return cartService.getCountryRegions(country.code3).then(function (response) {\r\n                return response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getAvailShippingMethods = function (shipment) {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailableShippingMethods(shipment.id).then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        }\r\n\r\n        $scope.getAvailPaymentMethods = function () {\r\n            return wrapLoading(function () {\r\n                return cartService.getAvailablePaymentMethods().then(function (response) {\r\n                    return response.data;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.selectShippingMethod = function (shippingMethod) {\r\n            if (shippingMethod) {\r\n                $scope.checkout.shipment.shipmentMethodCode = shippingMethod.shipmentMethodCode;\r\n                $scope.checkout.shipment.shipmentMethodOption = shippingMethod.optionName;\r\n            }\r\n            else {\r\n                $scope.checkout.shipment.shipmentMethodCode = undefined;\r\n                $scope.checkout.shipment.shipmentMethodOption = undefined;\r\n            }\r\n            $scope.updateShipment($scope.checkout.shipment);\r\n        };\r\n\r\n        $scope.updateShipment = function (shipment) {\r\n            if (shipment.deliveryAddress) {\r\n                $scope.checkout.shipment.deliveryAddress.type = 'Shipping';\r\n            };\r\n            //Does not pass validation errors to API\r\n            shipment.validationErrors = undefined;\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdateShipment(shipment).then($scope.reloadCart);\r\n            });\r\n        };\r\n\r\n        $scope.createOrder = function () {\r\n            updatePayment($scope.checkout.payment).then(function () {\r\n                $scope.checkout.loading = true;\r\n                cartService.createOrder($scope.checkout.paymentMethod.card).then(function (response) {\r\n                    var order = response.data.order;\r\n                    var orderProcessingResult = response.data.orderProcessingResult;\r\n                    var paymentMethod = response.data.paymentMethod;\r\n                    handlePostPaymentResult(order, orderProcessingResult, paymentMethod);\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.savePaymentPlan = function () {\r\n            wrapLoading(function () {\r\n                return cartService.addOrUpdatePaymentPlan($scope.checkout.paymentPlan).then(function () {\r\n                    $scope.checkout.cart.paymentPlan = $scope.checkout.paymentPlan;\r\n                });\r\n            });\r\n        };\r\n\r\n        $scope.isRecurringChanged = function (isRecurring) {\r\n            if ($scope.checkout.paymentPlan) {\r\n                if (isRecurring) {\r\n                    $scope.savePaymentPlan();\r\n                } else {\r\n                    wrapLoading(function () {\r\n                        return cartService.removePaymentPlan().then(function () {\r\n                            $scope.checkout.cart.paymentPlan = undefined;\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        function updatePayment(payment) {\r\n            if ($scope.checkout.billingAddressEqualsShipping) {\r\n                payment.billingAddress = undefined;\r\n            }\r\n\r\n            if (payment.billingAddress) {\r\n                payment.billingAddress.type = 'Billing';\r\n            }\r\n            return wrapLoading(function () {\r\n                return cartService.addOrUpdatePayment(payment).then($scope.reloadCart);\r\n            });\r\n        }\r\n\r\n        function handlePostPaymentResult(order, orderProcessingResult, paymentMethod) {\r\n            if (!orderProcessingResult.isSuccess) {\r\n                $scope.checkout.loading = false;\r\n                $rootScope.$broadcast('storefrontError', {\r\n                    type: 'error',\r\n                    title: ['Error in new order processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                    message: orderProcessingResult.error,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'preparedform' && orderProcessingResult.htmlForm) {\r\n                $scope.outerRedirect($scope.baseUrl + 'cart/checkout/paymentform?orderNumber=' + order.number);\r\n            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() == 'redirection' && orderProcessingResult.redirectUrl) {\r\n                $window.location.href = orderProcessingResult.redirectUrl;\r\n            } else {\r\n                if (!$scope.customer.isRegisteredUser) {\r\n                    $scope.outerRedirect($scope.baseUrl + 'cart/thanks/' + order.number);\r\n                } else {\r\n                    $scope.outerRedirect($scope.baseUrl + 'account#/orders/' + order.number);\r\n                }\r\n            }\r\n        }\r\n\r\n        function wrapLoading(func) {\r\n            $scope.checkout.loading = true;\r\n            return func().then(function (result) {\r\n                $scope.checkout.loading = false;\r\n                return result;\r\n            },\r\n                function () {\r\n                    $scope.checkout.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.initialize = function () {\r\n\r\n            $scope.reloadCart().then(function (cart) {\r\n                $scope.checkout.wizard.goToStep(cart.hasPhysicalProducts ? 'shipping-address' : 'payment-method');\r\n            });\r\n        };\r\n\r\n        getAvailCountries().then(function (countries) {\r\n            $scope.checkout.availCountries = countries;\r\n        });\r\n\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentPlan', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentPlan.tpl.html\",\r\n    bindings: {\r\n    },\r\n    controller: ['$scope', '$localStorage', function($scope, $localStorage) {\r\n        var $ctrl = this;\r\n\r\n        $scope.$watch(function() {\r\n            return $ctrl.availablePaymentPlans;\r\n        }, function (availablePaymentPlans) {\r\n            if (availablePaymentPlans) {\r\n                $ctrl.paymentPlan = $localStorage['paymentPlan'];\r\n                $ctrl.type = $ctrl.paymentPlan ? 'auto-reorder' : 'one-time';\r\n                $ctrl.paymentPlan = ($ctrl.paymentPlan ? _.findWhere($ctrl.availablePaymentPlans, { intervalCount: $ctrl.paymentPlan.intervalCount, interval: $ctrl.paymentPlan.interval }) : undefined) ||\r\n                    _.findWhere($ctrl.availablePaymentPlans, { intervalCount: 1, interval: 'months' });\r\n            }\r\n        });\r\n\r\n        $ctrl.save = function() {\r\n            if ($ctrl.type === 'auto-reorder') {\r\n                $localStorage['paymentPlan'] = $ctrl.paymentPlan;\r\n            } else {\r\n                $localStorage['paymentPlan'] = undefined;\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcShippingType', {\r\n    templateUrl: \"themes/assets/js/common-components/shippingType.tpl.html\",\r\n    bindings: {\r\n        isDropdown: '<',\r\n        title: \"@\",\r\n        subtitle: \"@\",\r\n        pickupMethodCode: \"@\"\r\n    },\r\n    controller: ['$scope', '$localStorage', 'storefrontApp.mainContext', 'dialogService', function($scope, $localStorage, mainContext, dialogService) {\r\n        var $ctrl = this;\r\n        $ctrl.shipmentType = $localStorage['shipmentType'];\r\n        if (!$ctrl.shipmentType) {\r\n            $ctrl.shipmentType = 'shipping';\r\n            $ctrl.isChanging = true;\r\n        }\r\n        $ctrl.shipmentAddress = $localStorage['shipmentAddress'];\r\n        $ctrl.shipmentFulfillmentCenter = $localStorage['shipmentFulfillmentCenter'];\r\n        $scope.$watch(\r\n            function() { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    $ctrl.customer = customer;\r\n                    if (!$ctrl.shipmentAddress && $ctrl.customer.defaultShippingAddress) {\r\n                        $ctrl.shipmentAddress = { postalCode: $ctrl.customer.defaultShippingAddress.postalCode };\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        $ctrl.selectFulfillmentCenter = function () {\r\n            var modalInstance = dialogService.showDialog(null, 'universalDialogController', 'storefront.select-fulfillment-center-dialog.tpl');\r\n            modalInstance.result.then(function(fulfillmentCenter) {\r\n                $ctrl.shipmentFulfillmentCenter = fulfillmentCenter;\r\n                if (!$ctrl.isDropdown) {\r\n                    $ctrl.save();\r\n                }\r\n            });\r\n        };\r\n        $ctrl.save = function (isDefined) {\r\n            if (isDefined !== false) {\r\n                $localStorage['shipmentType'] = $ctrl.shipmentType;\r\n                if ($ctrl.shipmentType === 'shipping') {\r\n                    $localStorage['shipmentAddress'] = $ctrl.shipmentAddress;\r\n                } else {\r\n                    $localStorage['shipmentFulfillmentCenter'] = $ctrl.shipmentFulfillmentCenter;\r\n                }\r\n            }\r\n        }\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcTotals', {\r\n    templateUrl: \"themes/assets/js/common-components/totals.tpl.liquid\",\r\n\tbindings: {\r\n\t\torder: '<'\r\n\t}\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('uibDropdownService', ['$delegate', function($delegate) {\r\n        var service = $delegate;\r\n        var close = service.close;\r\n        service.close = function (dropdownScope, element, appendTo) {\r\n            dropdownScope.focusToggleElement = function() {};\r\n            close(dropdownScope, element, appendTo);\r\n        }\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        var compile = directive.compile;\r\n        directive.compile = function () {\r\n            var link = compile.apply(this, arguments);\r\n            return function (scope, element, attrs, dropdownCtrl) {\r\n                if (attrs.autoClose === 'mouseleave') {\r\n                    dropdownCtrl.toggle(false);\r\n                }\r\n\r\n                var closeDropdown = function () {\r\n                    scope.$apply(function () {\r\n                        if (attrs.autoClose === 'mouseleave') {\r\n                            dropdownCtrl.toggle(false);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                element.on('mouseleave', closeDropdown);\r\n\r\n                link.apply(this, arguments);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.off('mouseleave', closeDropdown);\r\n                });\r\n            };\r\n        };\r\n        return $delegate;\r\n    }]);\r\n\r\n    $provide.decorator('uibDropdownToggleDirective', ['$delegate', function ($delegate) {\r\n        var directive = $delegate[0];\r\n        directive.controller = function () { };\r\n        $delegate[0] = directive;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('dropdownClose', function () {\r\n    return {\r\n        require: ['?^uibDropdown'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            if (!dropdownCtrl) {\r\n                return;\r\n            }\r\n\r\n            var closeDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(false);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('click', closeDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('click', closeDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","// based on https://github.com/angular/angular.js/blob/master/src/ng/directive/ngInclude.js\r\nstorefrontApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('ngIncludeDirective', ['$delegate', function ($delegate) {\r\n        var includeFillContentDirective = $delegate[1];\r\n        var link = includeFillContentDirective.link;\r\n        includeFillContentDirective.link = function (scope, $element, $attr, ctrl) {\r\n            if (!Object.keys($attr).includes('raw')) {\r\n                link(scope, $element, $attr, ctrl);\r\n            } else {\r\n                $element.text(ctrl.template);\r\n            }\r\n        };\r\n        includeFillContentDirective.compile = function () {\r\n            return includeFillContentDirective.link;\r\n        };\r\n        $delegate[1] = includeFillContentDirective;\r\n        return $delegate;\r\n    }]);\r\n}]);\r\n","storefrontApp.directive('vcScope', ['$animate', '$compile', function ($animate) {\r\n    return {\r\n        multiElement: true,\r\n        transclude: 'element',\r\n        priority: 600,\r\n        terminal: true,\r\n        restrict: 'A',\r\n        $$tlb: true,\r\n        link: function ($scope, $element, $attr, ctrl, $transclude) {\r\n            $transclude(function (clone) {\r\n                $element.after(clone);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.directive('vcToggleOnMouseEnter', function () {\r\n    return {\r\n        require: ['?^uibDropdown', '?uibDropdownToggle'],\r\n        link: function (scope, element, attrs, ctrls) {\r\n            var dropdownCtrl = ctrls[0];\r\n            var dropdownToggleCtrl = ctrls[1];\r\n            if (!(dropdownCtrl && dropdownToggleCtrl)) {\r\n                return;\r\n            }\r\n\r\n            element.addClass('toggle-on-mouse-enter');\r\n\r\n            var openDropdown = function () {\r\n                if (!element.hasClass('disabled') && !attrs.disabled) {\r\n                    scope.$apply(function () {\r\n                        dropdownCtrl.toggle(true);\r\n                    });\r\n                }\r\n            };\r\n\r\n            element.on('mouseenter', openDropdown);\r\n\r\n            scope.$on('$destroy', function () {\r\n                element.off('mouseenter', openDropdown);\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n"]}