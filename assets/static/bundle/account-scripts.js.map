{"version":3,"sources":["../../../assets/js/auth.js","../../../assets/js/services.js","../../../assets/js/main.js","../../../assets/js/cart.js","../../../assets/js/quote-request.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/searchBar.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/account.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/account/role.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js","../../../assets/js/permission.js"],"names":["angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","x","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","isArray","split","some","permissionWithScope","constant","config","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","name","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","Date","parse","data","this","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","location","href","protocol","host","port","parseFloat","get","now","storefrontApp","$uibModal","showDialog","dialogData","controller","templateUrl","open","resolve","$http","sendProduct","post","postFeedback","model","getCurrentCustomer","getTime","getDynamicContent","placeName","getActualProductPrices","products","getProduct","productIds","getProducts","search","criteria","searchCategories","getCart","getCartItemsCount","addLineItem","productId","quantity","changeLineItemQuantity","lineItemId","put","changeLineItemsQuantity","items","removeLineItem","delete","changeLineItemPrice","newPrice","clearCart","getCountries","getCountryRegions","countryCode","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","$q","$localStorage","customerService","getOrCreateMyLists","lists","each","list","author","Math","floor","random","toString","extend","reject","getSharedLists","sharedLists","cartId","isDefined","find","push","getWishlist","listName","contains","addItemToList","listId","product","containsInList","copy","currentList","addSharedList","myLists","sharedCartId","searchedList","filter","item","clearList","removeFromFriendsLists","currentId","getCurrentQuoteRequest","getQuoteRequest","number","getQuoteRequestItemsCount","addProductToQuoteRequest","removeProductFromQuoteRequest","quoteRequestNumber","quoteItemId","submitQuoteRequest","quoteRequest","quoteForm","rejectQuoteRequest","updateQuoteRequest","getTotals","confirmQuoteRequest","getRecommendedProducts","requestData","getOrder","orderNumber","isInProductCompareList","addProduct","uniq","getProductsIds","ids","i","length","join","getProductsCount","clearCompareList","removeProduct","without","getUserOrganization","updateUserOrganization","organization","searchUserOrganizationContacts","createInvitation","invitation","registerNewUser","user","lockUser","unlockUser","deleteUser","$scope","baseUrl","$on","path","currentPath","replace","event","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","outerRedirect","absUrl","innerRedirect","$$path","stringifyAddress","address","stringifiedAddress","firstName","lastName","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","then","addressId","addresses","isContact","memberType","cartService","catalogService","availabilityService","loader","timer","coupon","reloadCart","wrapLoading","cart","hasValidationErrors","validationErrors","code","appliedSuccessfully","errorCode","getProductsAvailability","pluck","availability","object","setCartForm","form","formCart","lineItem","cartIsUpdating","isLoading","$invalid","initialQuantity","cancel","initialItems","recentCartItemModalVisible","submitCart","$setSubmitted","hasPhysicalProducts","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","keyword","start","pageSize","selectSearchedProduct","selectedSearchedProduct","addProductToCart","applyCoupon","cartItemsCount","$uibModalInstance","close","redirect","url","quoteRequestService","billingAddress","type","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","price","amount","currentQuoteRequestNumber","billingCountry","shippingCountry","itemsCount","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","isNaN","removeTierPrice","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","selectCustomerAddress","a","email","isRegisteredUser","selectTierPrice","totals","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","p","actualQuoteRequest","updated","component","bindings","validationContainer","editMode","onUpdate","require","checkoutStep","transclude","header","footer","populateRegionalDataForAddress","findWhere","ctrl","regions","setAddressRegion","region","undefined","types","$onInit","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","$watch","card","$filter","val","bankCardHolderName","level","message","errors","$ctrl","value","inputClass","placeholder","required","requiredError","autofocus","pattern","disabled","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","label","member","memberComponent","fieldsConfig","getFieldConfig","field","first","configItem","visible","rolesComponent","showField","disableField","requiredField","directive","link","scope","elem","attr","$parsers","unshift","isValid","$$parentForm","Password","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","method","availableRoles","searching","noResults","query","categoriesLabel","productsLabel","submitLabel","categoryLimit","productLimit","hasHint","isOpen","getSuggestions","searchCriteria","all","process","within","suggestion","concat","index","accountManager","confirmService","$translate","corporateApiErrorHelper","getCompanyMember","currentMember","$promise","addNewAddress","last","components","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirm","confirmed","splice","companyMember","handler","clearErrors","accountService","refresh","company","updateCompanyInfo","submitCompanyAddress","$routeConfig","useAsDefault","accountApi","$router","skip","pageSettings","currentPage","itemsPerPageCount","take","sortInfos","entries","totalItems","totalCount","currentMemberId","newMemberComponent","numPages","pageChanged","addNewMemberFieldsConfig","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","pageNumber","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","emails","rawEmails","addNewMember","newMember","companyId","role","changeStatus","action","isActive","securityAccounts","memberId","navigate","inviteForm","valid","showActions","getOrganizationMember","memberNumber","organizations","title","submitMember","roleService","rejection","handleErrors","authService","$event","keyCode","element","document","querySelector","orderHelper","orderApi","order","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","BASE_URL","showPayment","preselectedMaymentMethod","every","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","paymentMethodType","toLowerCase","htmlForm","redirectUrl","cancelPayment","retVal","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","changePassword","$setPristine","getQuotes","corporateRegisterApi","vcRecaptchaService","companyName","getParams","param","window","substring","decodeURIComponent","isOrg","getRegisterInfoByInvite","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","moduleName","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","preferredLanguage","$templateCache","callback","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePasswordData","parent","prev","hide","when","$resource","getCompanyById","updateCompany","getCompanyMembers","deleteCompanyMember","updateUser","getRoles","register","registerMember","registerByInvite","registerPersonal","errorMessage","modelState","available","_roles","realRole","description","accounts","availableRole","chain","account","flatten","assigned","assignedRole","where","listService","dialogService","selectDefault","default","selected","selectList","isEmpty","initialize","selectTab","tabName","selectedList","selectedTab","addToCart","productAdded","removeList","reload","generateLink","sharedLink","substr","lastIndexOf","addToCartAllProducts","createList","listSettings","accountLists","listPreSetting","checkLocation","selectedVariation","compareProductInLists","buttonInvalid","forEach","toListsDialogDataModel","addProductToWishlist","signInToProceed","availableLists","imageUrl","primaryImage","createdDate","inProgress","itemAdded","addProductToList","modifiedBy","setDefault","submitSettings","attrs","toggleVisibilityBasedOnPermission","permissionValue","show","vaPermission"],"mappings":"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","file":"account-scripts.js","sourcesContent":["angular.module('storefrontApp')\r\n    .factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n        function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n\r\n            var authContext = {\r\n                userId: null,\r\n                userLogin: null,\r\n                fullName: null,\r\n                userType: null,\r\n                roles: null,\r\n                permissions: null,\r\n                isAuthenticated: false\r\n            };\r\n\r\n            authContext.login = function (login, password) {\r\n                return $auth.login($httpParamSerializerJQLike({\r\n                    userName: login,\r\n                    password: password,\r\n                    grant_type: \"password\"\r\n                }),\r\n                    {\r\n                        headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n                    });\r\n            };\r\n\r\n            authContext.fillAuthData = function () {\r\n                return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n                    function (result) {\r\n                        changeAuth(result)\r\n                        $rootScope.$broadcast('loginStatusChanged', authContext);\r\n                    },\r\n                    function (error) { });\r\n            };\r\n\r\n            authContext.checkPermission = function (permission, securityScopes) {\r\n                //first check admin permission\r\n                // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n                var hasPermission = authContext.isAdministrator;\r\n                if (!hasPermission && permission) {\r\n                    permission = permission.trim();\r\n                    //first check global permissions\r\n                    hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n                    if (!hasPermission && securityScopes) {\r\n                        if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                            securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                            //Check permissions in scope\r\n                            hasPermission = _.some(securityScopes, function (x) {\r\n                                var permissionWithScope = permission + \":\" + x;\r\n                                var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                                //console.log(permissionWithScope + \"=\" + retVal);\r\n                                return retVal;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                return hasPermission;\r\n            };\r\n\r\n            function changeAuth(results) {\r\n                authContext.userId = results.id;\r\n                authContext.roles = results.roles;\r\n                authContext.permissions = results.permissions;\r\n                authContext.userLogin = results.userName;\r\n                authContext.fullName = results.userLogin;\r\n                authContext.isAuthenticated = results.userName != null;\r\n                authContext.userType = results.userType;\r\n                authContext.isAdministrator = results.isAdministrator;\r\n                //Interpolate permissions to replace some template to real value\r\n                if (authContext.permissions) {\r\n                    authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                        return $interpolate(x)(authContext);\r\n                    });\r\n                }\r\n            };\r\n\r\n            return authContext;\r\n        }])\r\n    .constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n    .config(['$authProvider', '$provide', 'apiBaseUrl', function ($authProvider, $provide, apiBaseUrl) {\r\n        $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n        $authProvider.tokenName = 'access_token';\r\n        $authProvider.tokenPrefix = 'platform';\r\n        $authProvider.oauth2({\r\n            name: 'platform',\r\n            clientId: 'web'\r\n        });\r\n        $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function ($delegate, tokenExpirationName) {\r\n            var service = $delegate;\r\n            var originalSetToken = service.setToken;\r\n            service.setToken = function (response) {\r\n                originalSetToken.apply(service, arguments);\r\n                var expirationTime = Date.parse(response.data['.expires']);\r\n                this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n            };\r\n            return service;\r\n        }]);\r\n    }])\r\n    .run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function ($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n        var logOut = function () {\r\n            $auth.logout();\r\n            $authStorage.remove(tokenExpirationName);\r\n            $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n        };\r\n\r\n        if ($auth.isAuthenticated()) {\r\n            $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n        }\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', products);\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        getProducts: function(productIds) {\r\n            return $http.get('storefrontapi/products?' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        changeLineItemsQuantity: function(items) {\r\n            return $http.put('storefrontapi/cart/items', items);\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('compareProductService', ['$http', '$localStorage', function($http, $localStorage) {\r\n    return {\r\n        isInProductCompareList: function(productId) {\r\n            var containProduct;\r\n            if (!_.some($localStorage['productCompareListIds'], function(id) { return id === productId })) {\r\n                containProduct = false;\r\n            }\r\n            else\r\n                containProduct = true\r\n            return containProduct;\r\n        },\r\n        addProduct: function(productId) {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n            }\r\n            $localStorage['productCompareListIds'].push(productId);\r\n            _.uniq($localStorage['productCompareListIds']);\r\n        },\r\n        getProductsIds: function() {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n                return;\r\n            }\r\n            var ids = [];\r\n            for (i = 0; i < $localStorage['productCompareListIds'].length; i++) {\r\n                ids.push('productIds=' + $localStorage['productCompareListIds'][i]);\r\n            }\r\n            return ids.join(\"&\");\r\n        },\r\n        getProductsCount: function() {\r\n            var count = $localStorage['productCompareListIds'] ? $localStorage['productCompareListIds'].length : 0;\r\n            return count;\r\n        },\r\n        clearCompareList: function() {\r\n            $localStorage['productCompareListIds'] = [];\r\n        },\r\n        removeProduct: function(productId) {\r\n            $localStorage['productCompareListIds'] = _.without($localStorage['productCompareListIds'], productId);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('accountService', ['$http', function ($http) {\r\n    return {\r\n        getUserOrganization: function () {\r\n            return $http.get('storefrontapi/account/organization?t=' + new Date().getTime());\r\n        },\r\n        updateUserOrganization: function (organization) {\r\n            return $http.put('storefrontapi/account/organization', organization);\r\n        },\r\n        searchUserOrganizationContacts: function (criteria) {\r\n            return $http.post('storefrontapi/account/organization/contacts/search', criteria);\r\n        },\r\n        createInvitation: function (invitation) {\r\n            return $http.post('storefrontapi/account/invitation', invitation);\r\n        },\r\n        registerNewUser: function (user) {\r\n            return $http.post('storefrontapi/account/user', user);\r\n        },\r\n        lockUser: function (userName) {\r\n            return $http.post('storefrontapi/account/' + userName + '/lock');\r\n        },\r\n        unlockUser: function (userName) {\r\n            return $http.post('storefrontapi/account/' + userName + '/unlock');\r\n        },\r\n        deleteUser: function (userName) {\r\n            return $http.delete('storefrontapi/account/' + userName);\r\n        },\r\n     \r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $rootScope.$on('$locationChangeSuccess', function () {\r\n            var path = $location.path();\r\n            if (path) {\r\n                $scope.currentPath = path.replace('/', '');\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', 'availabilityService', 'loadingIndicatorService', function ($rootScope, $scope, $timeout, cartService, catalogService, availabilityService, loader) {\r\n    var timer;\r\n\r\n    $scope.loader = loader;\r\n    $scope.coupon = {};\r\n\r\n    var reloadCart = $scope.reloadCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.getCart().then(function(response) {\r\n                var cart = response.data;\r\n                cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function(item) { return _.some(item.validationErrors) });\r\n                $scope.cart = cart;\r\n\r\n                var coupon = cart.coupon || $scope.coupon;\r\n                coupon.loader = $scope.coupon.loader;\r\n                $scope.coupon = coupon;\r\n                if ($scope.coupon.code && !$scope.coupon.appliedSuccessfully) {\r\n                    $scope.coupon.errorCode = 'InvalidCouponCode';\r\n                }\r\n\r\n                return availabilityService.getProductsAvailability(_.pluck(cart.items, 'productId')).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.loader.isLoading || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\treloadCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            reloadCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n\r\n    $scope.clearCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.clearCart().then(function() {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        });\r\n    };\r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            reloadCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n    \r\n    $scope.applyCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.addCoupon(coupon.code).then(function() {\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.removeCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.removeCoupon().then(function() {\r\n                $scope.coupon = { loader: $scope.coupon.loader };\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        reloadCart();\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    transclude: {\r\n        header: '?addressHeader', footer: '?addressFooter'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        pattern: '@',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        availableRoles: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcSearchBar', {\r\n    templateUrl: \"themes/assets/js/common-components/searchBar.tpl.html\",\r\n    bindings: {\r\n        placeholder: '<',\r\n        searching: '<',\r\n        noResults: '<',\r\n        query: '@',\r\n        categoriesLabel: '<',\r\n        productsLabel: '<',\r\n        submitLabel: '<',\r\n        categoryLimit: '@',\r\n        productLimit: '@'\r\n    },\r\n    controller: ['$scope', '$q', 'catalogService', function ($scope, $q, catalogService) {\r\n        var $ctrl = this;\r\n        $ctrl.hasHint = false;\r\n\r\n        $scope.$watch('$ctrl.isOpen', function (isOpen) {\r\n            $ctrl.hasHint = !!$ctrl.query && !isOpen;\r\n        });\r\n\r\n        $scope.$watch('$ctrl.query', function(query) {\r\n            $ctrl.hasHint = !!query && !$ctrl.isOpen;\r\n        });\r\n\r\n        $ctrl.getSuggestions = function () {\r\n            var searchCriteria = { keyword: $ctrl.query, start: 0 };\r\n            return $q.all([\r\n                catalogService.searchCategories(angular.extend({ }, searchCriteria, { pageSize: $ctrl.categoryLimit })),\r\n                catalogService.search(angular.extend({ }, searchCriteria, { pageSize: $ctrl.productLimit }))\r\n            ]).then(function(results) {\r\n                var process = function(within) {\r\n                    return (results[0].data[within] || results[1].data[within]).map(function (suggestion) {\r\n                        suggestion['within'] = within;\r\n                        return suggestion;\r\n                    });\r\n                }\r\n                return process('categories').concat(process('products')).map(function (suggestion, index) {\r\n                    suggestion['index'] = index;\r\n                    return suggestion;\r\n                });\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'accountService', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, accountService, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return accountService.getUserOrganization().then(function (response) {\r\n                    $ctrl.company = response.data;\r\n                });\r\n            });\r\n        };\r\n\r\n      \r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return accountService.updateUserOrganization(company).then(function () { refresh(); });\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'accountService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, accountService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () { refresh(); };\r\n\r\n        function refresh() {\r\n                 loader.wrapLoading(function () {\r\n                 return accountService.searchUserOrganizationContacts({\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }).then(function (response) {\r\n                    $ctrl.entries = response.data.results;\r\n                    $ctrl.pageSettings.totalItems = response.data.totalCount;\r\n                });\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n                return accountService.createInvitation({\r\n                    emails: $ctrl.inviteInfo.emails,\r\n                    message: $ctrl.inviteInfo.message\r\n                }).then(function (response) {\r\n                    $ctrl.cancel();\r\n                    $ctrl.pageSettings.pageChanged();\r\n                });\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return accountService.registerNewUser($ctrl.newMember).then(function (response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (member) {\r\n            loader.wrapLoading(function () {\r\n                var action = member.isActive ? accountService.lockUser : accountService.unlockUser;\r\n                member.isActive = !member.isActive;                \r\n                loader.wrapLoading(function () {\r\n                    return action(member.securityAccounts[0].userName);\r\n                });\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (member) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return accountService.deleteUser(member.securityAccounts[0].userName).then(function (response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                //TODO: errors handling\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'accountService', 'loadingIndicatorService', function ($q, $rootScope, $scope, $window, accountService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return accountService.getOrganizationMember({ id: $ctrl.memberNumber }).then(function (response) {\r\n                    var member = response.data;\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: [member.organization],\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                });\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'storefront.accountApi', 'loadingIndicatorService', 'vcRecaptchaService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, accountApi, loader, vcRecaptchaService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.countries = accountApi.getCountries();\r\n\r\n        $scope.isOrg = function () {\r\n            return $scope.member.type === 'Business';\r\n        };\r\n\r\n        $scope.$watch('member.address.countryCode', function () {\r\n            if ($scope.member.address.countryCode) {\r\n                populateRegionalDataForAddress($scope.member.address);\r\n                $scope.member.address.name = stringifyAddress($scope.member.address);\r\n            }\r\n        });\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere($ctrl.countries, { code3: address.countryCode });\r\n                if (address.country) {\r\n                    address.countryName = address.country.name;\r\n                    address.countryCode = address.country.code3;\r\n\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        //$ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                        accountApi.getCountryRegions(address.country, function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                address.regionId = address.region.code;\r\n                address.regionName = address.region.name;\r\n            }\r\n            else {\r\n                address.regionId = undefined;\r\n                address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            //var type = _.find($ctrl.types, function (i) { return i.id == $ctrl.address.addressType });\r\n            //if (type)\r\n            //    addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.companyName ? address.companyName + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        //$scope.registerMemberFieldsConfig = [\r\n        //    {\r\n        //        field: 'CompanyName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Email',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'UserName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Password',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    }\r\n        //];\r\n\r\n        function getParams() {\r\n            var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n            for (i in params) {\r\n                if (params.hasOwnProperty(i)) {\r\n                    if (params[i] === \"\") continue;\r\n\r\n                    param = params[i].split(\"=\");\r\n                    result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        $scope.init = function (storeId) {\r\n            $scope.member = { storeId: storeId, type: 'Business', address: {} };\r\n\r\n            var invite = getParams().invite;\r\n            if (invite) {\r\n                //$scope.registerMemberFieldsConfig[0] = {\r\n                //    field: 'CompanyName',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n                //$scope.registerMemberFieldsConfig[1] = {\r\n                //    field: 'Email',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n\r\n                $scope.member.invite = invite;\r\n                $ctrl.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                        .then(function (result) {\r\n                            if (result.message) {\r\n                                $scope.error = result.message;\r\n                                return $q.reject(\"Invite is invalid\");\r\n                            }\r\n                            $scope.member.companyName = result.companyName;\r\n                            $scope.member.email = result.email;\r\n                        });\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            //TODO: Find another solution to submit form without this\r\n            angular.element(document.querySelector('#create_customer')).submit();\r\n        }\r\n    }]);\r\n","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'satellizer', 'storefrontApp', 'storefrontApp.consts'])\r\n\r\n    .config(['$translateProvider', 'baseUrl', function ($translateProvider, baseUrl) {\r\n        $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n        $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n        $translateProvider.preferredLanguage('en');\r\n    }])\r\n\r\n    .run(['$templateCache', 'apiBaseUrl', function ($templateCache, apiBaseUrl) {\r\n        // cache application level templates\r\n        $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n    }])\r\n\r\n    .value('$routerRootComponent', 'vcAccountManager')\r\n    .service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n        return {\r\n            showDialog: function (dialogData, controller, templateUrl) {\r\n                var modalInstance = $uibModal.open({\r\n                    controller: controller,\r\n                    templateUrl: templateUrl,\r\n                    resolve: {\r\n                        dialogData: function () {\r\n                            return dialogData;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }])\r\n\r\n    .component('vcAccountManager', {\r\n        templateUrl: \"account-manager.tpl\",\r\n        bindings: {\r\n            baseUrl: '<',\r\n            customer: '<'\r\n        },\r\n        $routeConfig: [\r\n            { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders' },\r\n            { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n            { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n            { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n            { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n            { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n            { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n            { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n            { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n        ],\r\n        controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n\r\n            $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateProfile = function (updateRequest) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateAddresses = function (data) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.availCountries = accountApi.getCountries();\r\n\r\n            $ctrl.getCountryRegions = function (country) {\r\n                return accountApi.getCountryRegions(country).$promise;\r\n            };\r\n\r\n            $ctrl.changePassword = function (changePasswordData) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.changePassword(changePasswordData).$promise;\r\n                });\r\n            };\r\n\r\n            $scope.$watch(function () {\r\n                return mainContext.customer;\r\n            }, function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id, memberType: 'CompanyMember' }, function (member) {\r\n                            customer.companyId = _.first(member.organizations);\r\n                            customer.email = _.first(member.emails);\r\n                        }).$promise;\r\n                    });\r\n                    authService.fillAuthData();\r\n                }\r\n            });\r\n\r\n            $scope.$on('loginStatusChanged', function () {\r\n                $timeout(function () {\r\n                    $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n                });\r\n            });\r\n        }]\r\n    })\r\n\r\n    .service('confirmService', ['$q', function ($q) {\r\n        this.confirm = function (message) {\r\n            return $q.when(window.confirm(message || 'Is it OK?'));\r\n        };\r\n    }])\r\n\r\n","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' },\r\n        registerPersonal: { url: apiBaseUrl + 'api/b2b/registerPersonal', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","angular.module('storefront.account')\r\n.factory('roleService', ['$q', '$http', 'storefront.corporateAccountApi', 'availableRoles', function ($q, $http, corporateAccountApi, availableRoles) {\r\n    var service = {\r\n        available: null,\r\n        get: null,\r\n        set: null\r\n    };\r\n\r\n    // get all available roles from settings\r\n    service._roles = availableRoles;\r\n    corporateAccountApi.getRoles(function (roles) {\r\n        service.available = _.map(service._roles, function(role) {\r\n            var realRole = _.findWhere(roles, { name: role });\r\n            return angular.extend({}, realRole, { description: 'customer.roles.descriptions.' + role.toLowerCase().replace(\" \", \"_\") });\r\n        });\r\n    });\r\n\r\n    service.get = function(accounts){\r\n        var availableRoles = angular.copy(service.available);\r\n        _.each(availableRoles, function(availableRole) {            \r\n            // role is assigned to member if any of member's security accounts has this role assigned\r\n            var roles = _.chain(accounts).map(function(account) { return account.roles; }).flatten().value();\r\n            availableRole.assigned = _.some(roles,\r\n            function(assignedRole) {\r\n                return availableRole.name === assignedRole.name;\r\n            });\r\n        });\r\n        // if multiple roles assigned, return the role with minimal privilidges\r\n        return _.last(_.where(availableRoles, { assigned: true }));\r\n    };\r\n\r\n    service.set = function(accounts, role) {\r\n        // assign current role to all member's security accounts\r\n        return $q.all(_.map(accounts, function(account) {\r\n            account.roles = _.without.apply(_, [account.roles].concat(_.filter(account.roles, function(role) { return _.contains(service._roles, role.name); })));\r\n            account.roles.push(role);\r\n            return corporateAccountApi.updateUser(account).$promise;\r\n        }));\r\n    };\r\n\r\n    return service;\r\n}]);\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);"]}