{"version":3,"sources":["../../../assets/js/auth.js","../../../assets/js/services.js","../../../assets/js/main.js","../../../assets/js/cart.js","../../../assets/js/quote-request.js","../../../assets/js/product-compare.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/searchBar.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/account.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/account/role.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js","../../../assets/js/permission.js"],"names":["angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","x","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","isArray","split","some","permissionWithScope","constant","config","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","name","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","Date","parse","data","this","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","location","href","protocol","host","port","parseFloat","get","now","storefrontApp","$uibModal","showDialog","dialogData","controller","templateUrl","open","resolve","$http","sendProduct","post","postFeedback","model","getCurrentCustomer","getTime","getDynamicContent","placeName","getActualProductPrices","products","getProduct","productIds","search","criteria","searchCategories","getCart","getCartItemsCount","addLineItem","productId","quantity","changeLineItemQuantity","lineItemId","put","changeLineItemsQuantity","items","removeLineItem","delete","changeLineItemPrice","newPrice","clearCart","getCountries","getCountryRegions","countryCode","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","$q","$localStorage","customerService","getOrCreateMyLists","lists","each","list","author","Math","floor","random","toString","extend","reject","getSharedLists","sharedLists","cartId","isDefined","find","push","getWishlist","listName","contains","addItemToList","listId","product","containsInList","copy","currentList","addSharedList","myLists","sharedCartId","searchedList","filter","item","clearList","removeFromFriendsLists","currentId","getCurrentQuoteRequest","getQuoteRequest","number","getQuoteRequestItemsCount","addProductToQuoteRequest","removeProductFromQuoteRequest","quoteRequestNumber","quoteItemId","submitQuoteRequest","quoteRequest","quoteForm","rejectQuoteRequest","updateQuoteRequest","getTotals","confirmQuoteRequest","getRecommendedProducts","requestData","getOrder","orderNumber","$scope","baseUrl","$on","path","currentPath","replace","event","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","outerRedirect","absUrl","innerRedirect","$$path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","then","addressId","addresses","isContact","memberType","cartService","catalogService","availabilityService","loader","timer","coupon","reloadCart","wrapLoading","cart","hasValidationErrors","validationErrors","code","appliedSuccessfully","errorCode","getProductsAvailability","pluck","availability","object","setCartForm","form","formCart","lineItem","i","cartIsUpdating","isLoading","$invalid","initialQuantity","cancel","initialItems","recentCartItemModalVisible","without","submitCart","$setSubmitted","hasPhysicalProducts","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","keyword","start","pageSize","selectSearchedProduct","selectedSearchedProduct","addProductToCart","applyCoupon","cartItemsCount","$uibModalInstance","close","redirect","url","quoteRequestService","billingAddress","length","type","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","price","amount","currentQuoteRequestNumber","billingCountry","shippingCountry","itemsCount","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","isNaN","removeTierPrice","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","selectCustomerAddress","a","email","isRegisteredUser","selectTierPrice","totals","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","p","uniq","actualQuoteRequest","updated","dialogService","formatNumber","float","isInProductCompareList","addProductToCompareList","preventDefault","existingProduct","productCompareListCapacity","capacityExceeded","properties","property","valueType","toLowerCase","value","getProductProperties","grouped","flatten","propertyDisplayNames","displayName","props","where","productProperty","prop","hasValues","onlyDifferences","uniqueValues","clearCompareList","removeProduct","component","bindings","validationContainer","editMode","onUpdate","require","checkoutStep","transclude","header","footer","populateRegionalDataForAddress","findWhere","ctrl","regions","setAddressRegion","region","undefined","types","$onInit","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","$watch","card","$filter","val","bankCardHolderName","level","message","errors","$ctrl","inputClass","placeholder","required","requiredError","autofocus","pattern","disabled","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","label","member","memberComponent","fieldsConfig","getFieldConfig","field","first","configItem","visible","rolesComponent","showField","disableField","requiredField","directive","link","scope","elem","attr","$parsers","unshift","isValid","$$parentForm","Password","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","method","accounts","roleService","available","availableRoles","availableRole","getRole","$onChanges","selectRole","role","assigned","searching","noResults","query","categoriesLabel","productsLabel","submitLabel","categoryLimit","productLimit","hasHint","isOpen","getSuggestions","searchCriteria","all","process","within","suggestion","concat","index","accountManager","confirmService","$translate","corporateApiErrorHelper","getCompanyMember","currentMember","$promise","addNewAddress","last","components","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirm","confirmed","splice","companyMember","handler","clearErrors","companyId","getCompanyById","company","updateCompanyInfo","updateCompany","rejection","handleErrors","submitCompanyAddress","$routeConfig","useAsDefault","accountApi","$router","corporateRegisterApi","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","skip","take","sortInfos","entries","totalItems","totalCount","forEach","securityAccounts","addNewMemberFieldsConfig","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","pageNumber","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","emails","rawEmails","adminName","adminEmail","language","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","ids","inviteForm","valid","showActions","refresh","memberNumber","organizations","title","submitMember","authService","$event","keyCode","element","document","querySelector","orderHelper","orderApi","order","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","BASE_URL","showPayment","preselectedMaymentMethod","every","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","join","paymentMethodType","htmlForm","redirectUrl","cancelPayment","retVal","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","changePassword","$setPristine","getQuotes","vcRecaptchaService","companyName","getParams","param","window","substring","decodeURIComponent","isOrg","getRegisterInfoByInvite","confirmPassword","registerByInvite","register","registerPersonal","$parent","username","reload","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","moduleName","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","preferredLanguage","$templateCache","callback","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePasswordData","parent","prev","hide","when","$resource","updateUser","getRoles","errorMessage","modelState","_roles","realRole","description","chain","account","assignedRole","listService","selectDefault","default","selected","selectList","isEmpty","user","initialize","selectTab","tabName","selectedList","selectedTab","addToCart","productAdded","removeList","generateLink","sharedLink","substr","lastIndexOf","addToCartAllProducts","createList","listSettings","accountLists","listPreSetting","checkLocation","selectedVariation","compareProductInLists","buttonInvalid","toListsDialogDataModel","addProductToWishlist","signInToProceed","availableLists","imageUrl","primaryImage","createdDate","inProgress","itemAdded","addProductToList","modifiedBy","setDefault","submitSettings","attrs","toggleVisibilityBasedOnPermission","permissionValue","show","vaPermission"],"mappings":"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","file":"account-scripts.js","sourcesContent":["angular.module('storefrontApp')\r\n    .factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n        function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n\r\n            var authContext = {\r\n                userId: null,\r\n                userLogin: null,\r\n                fullName: null,\r\n                userType: null,\r\n                roles: null,\r\n                permissions: null,\r\n                isAuthenticated: false\r\n            };\r\n\r\n            authContext.login = function (login, password) {\r\n                return $auth.login($httpParamSerializerJQLike({\r\n                    userName: login,\r\n                    password: password,\r\n                    grant_type: \"password\"\r\n                }),\r\n                    {\r\n                        headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n                    });\r\n            };\r\n\r\n            authContext.fillAuthData = function () {\r\n                return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n                    function (result) {\r\n                        changeAuth(result)\r\n                        $rootScope.$broadcast('loginStatusChanged', authContext);\r\n                    },\r\n                    function (error) { });\r\n            };\r\n\r\n            authContext.checkPermission = function (permission, securityScopes) {\r\n                //first check admin permission\r\n                // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n                var hasPermission = authContext.isAdministrator;\r\n                if (!hasPermission && permission) {\r\n                    permission = permission.trim();\r\n                    //first check global permissions\r\n                    hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n                    if (!hasPermission && securityScopes) {\r\n                        if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                            securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                            //Check permissions in scope\r\n                            hasPermission = _.some(securityScopes, function (x) {\r\n                                var permissionWithScope = permission + \":\" + x;\r\n                                var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                                //console.log(permissionWithScope + \"=\" + retVal);\r\n                                return retVal;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                return hasPermission;\r\n            };\r\n\r\n            function changeAuth(results) {\r\n                authContext.userId = results.id;\r\n                authContext.roles = results.roles;\r\n                authContext.permissions = results.permissions;\r\n                authContext.userLogin = results.userName;\r\n                authContext.fullName = results.userLogin;\r\n                authContext.isAuthenticated = results.userName != null;\r\n                authContext.userType = results.userType;\r\n                authContext.isAdministrator = results.isAdministrator;\r\n                //Interpolate permissions to replace some template to real value\r\n                if (authContext.permissions) {\r\n                    authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                        return $interpolate(x)(authContext);\r\n                    });\r\n                }\r\n            };\r\n\r\n            return authContext;\r\n        }])\r\n    .constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n    .config(['$authProvider', '$provide', 'apiBaseUrl', function ($authProvider, $provide, apiBaseUrl) {\r\n        $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n        $authProvider.tokenName = 'access_token';\r\n        $authProvider.tokenPrefix = 'platform';\r\n        $authProvider.oauth2({\r\n            name: 'platform',\r\n            clientId: 'web'\r\n        });\r\n        $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function ($delegate, tokenExpirationName) {\r\n            var service = $delegate;\r\n            var originalSetToken = service.setToken;\r\n            service.setToken = function (response) {\r\n                originalSetToken.apply(service, arguments);\r\n                var expirationTime = Date.parse(response.data['.expires']);\r\n                this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n            };\r\n            return service;\r\n        }]);\r\n    }])\r\n    .run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function ($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n        var logOut = function () {\r\n            $auth.logout();\r\n            $authStorage.remove(tokenExpirationName);\r\n            $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n        };\r\n\r\n        if ($auth.isAuthenticated()) {\r\n            $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n        }\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', products);\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        changeLineItemsQuantity: function(items) {\r\n            return $http.put('storefrontapi/cart/items', items);\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $rootScope.$on('$locationChangeSuccess', function () {\r\n            var path = $location.path();\r\n            if (path) {\r\n                $scope.currentPath = path.replace('/', '');\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', 'availabilityService', 'loadingIndicatorService', function ($rootScope, $scope, $timeout, cartService, catalogService, availabilityService, loader) {\r\n    var timer;\r\n\r\n    $scope.loader = loader;\r\n    $scope.coupon = {};\r\n\r\n    var reloadCart = $scope.reloadCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.getCart().then(function(response) {\r\n                var cart = response.data;\r\n                cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function(item) { return _.some(item.validationErrors) });\r\n                $scope.cart = cart;\r\n\r\n                var coupon = cart.coupon || $scope.coupon;\r\n                coupon.loader = $scope.coupon.loader;\r\n                $scope.coupon = coupon;\r\n                if ($scope.coupon.code && !$scope.coupon.appliedSuccessfully) {\r\n                    $scope.coupon.errorCode = 'InvalidCouponCode';\r\n                }\r\n\r\n                return availabilityService.getProductsAvailability(_.pluck(cart.items, 'productId')).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.loader.isLoading || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\treloadCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            reloadCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n\r\n    $scope.clearCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.clearCart().then(function() {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        });\r\n    };\r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            reloadCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n    \r\n    $scope.applyCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.addCoupon(coupon.code).then(function() {\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.removeCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.removeCoupon().then(function() {\r\n                $scope.coupon = { loader: $scope.coupon.loader };\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        reloadCart();\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('productCompareListController', ['$rootScope', '$scope', '$localStorage', '$window', 'catalogService', 'dialogService',\r\nfunction ($rootScope, $scope, $localStorage, $window, catalogService, dialogService) {\r\n    if (!$localStorage['productCompareList']) {\r\n        $localStorage['productCompareList'] = [];\r\n    }\r\n\r\n    $scope.products = $localStorage['productCompareList'];\r\n\r\n    $scope.isInProductCompareList = function (productId) {\r\n        return _.some($localStorage['productCompareList'], function (p) { return p.id == productId });\r\n    }\r\n\r\n    $scope.addProductToCompareList = function (productId, event) {\r\n        event.preventDefault();\r\n        var existingProduct = _.find($localStorage['productCompareList'], function (p) { return p.id === productId });\r\n        if (existingProduct) {\r\n            dialogService.showDialog(existingProduct, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        if ($window.productCompareListCapacity <= $localStorage['productCompareList'].length) {\r\n            dialogService.showDialog({ capacityExceeded: true }, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n            return;\r\n        }\r\n        catalogService.getProduct([productId]).then(function (response) {\r\n            if (response.data && response.data.length) {\r\n                var product = response.data[0];\r\n                _.each(product.properties, function (property) {\r\n                    property.productId = product.id;\r\n                    if (property.valueType.toLowerCase() === 'number') {\r\n                        property.value = formatNumber(property.value);\r\n                    }\r\n                });\r\n                $localStorage['productCompareList'].push(product);\r\n                dialogService.showDialog(product, 'productCompareListDialogController', 'storefront.product-compare-list-dialog.tpl');\r\n                $rootScope.$broadcast('productCompareListChanged');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.getProductProperties = function () {\r\n        var grouped = {};\r\n        var properties = _.flatten(_.map($scope.products, function (product) { return product.properties; }));\r\n        var propertyDisplayNames = _.uniq(_.map(properties, function (property) { return property.displayName; }));\r\n        _.each(propertyDisplayNames, function (displayName) {\r\n            grouped[displayName] = [];\r\n            var props = _.where(properties, { displayName: displayName });\r\n            _.each($scope.products, function (product) {\r\n                var productProperty = _.find(props, function (prop) { return prop.productId === product.id });\r\n                if (productProperty) {\r\n                    grouped[displayName].push(productProperty);\r\n                } else {\r\n                    grouped[displayName].push({ valueType: 'ShortText', value: '-' });\r\n                }\r\n            });\r\n        });\r\n        $scope.properties = grouped;\r\n    }\r\n\r\n    $scope.hasValues = function (properties, onlyDifferences) {\r\n        var uniqueValues = _.uniq(_.map(properties, function (p) { return p.value }));\r\n        if (onlyDifferences && properties.length > 1 && uniqueValues.length == 1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    $scope.clearCompareList = function () {\r\n        $localStorage['productCompareList'] = [];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.products = $localStorage['productCompareList'];\r\n    }\r\n\r\n    $scope.removeProduct = function (product) {\r\n        $localStorage['productCompareList'] = _.without($localStorage['productCompareList'], product);\r\n        $scope.products = $localStorage['productCompareList'];\r\n        $rootScope.$broadcast('productCompareListChanged');\r\n        $scope.getProductProperties();\r\n    }\r\n\r\n    function formatNumber(number) {\r\n        var float = parseFloat(number);\r\n        return !isNaN(float) ? float : number;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListDialogController', ['$scope', '$window', 'dialogData', '$uibModalInstance',\r\nfunction ($scope, $window, dialogData, $uibModalInstance) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('productCompareListBarController', ['$scope', '$localStorage',\r\nfunction ($scope, $localStorage) {\r\n    $scope.itemsCount = $localStorage['productCompareList'] ? $localStorage['productCompareList'].length : 0;\r\n    $scope.$on('productCompareListChanged', function (event, data) {\r\n        $scope.itemsCount = $localStorage['productCompareList'].length;\r\n    });\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    transclude: {\r\n        header: '?addressHeader', footer: '?addressFooter'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        pattern: '@',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcSearchBar', {\r\n    templateUrl: \"themes/assets/js/common-components/searchBar.tpl.html\",\r\n    bindings: {\r\n        placeholder: '<',\r\n        searching: '<',\r\n        noResults: '<',\r\n        query: '@',\r\n        categoriesLabel: '<',\r\n        productsLabel: '<',\r\n        submitLabel: '<',\r\n        categoryLimit: '@',\r\n        productLimit: '@'\r\n    },\r\n    controller: ['$scope', '$q', 'catalogService', function ($scope, $q, catalogService) {\r\n        var $ctrl = this;\r\n        $ctrl.hasHint = false;\r\n\r\n        $scope.$watch('$ctrl.isOpen', function (isOpen) {\r\n            $ctrl.hasHint = !!$ctrl.query && !isOpen;\r\n        });\r\n\r\n        $scope.$watch('$ctrl.query', function(query) {\r\n            $ctrl.hasHint = !!query && !$ctrl.isOpen;\r\n        });\r\n\r\n        $ctrl.getSuggestions = function () {\r\n            var searchCriteria = { keyword: $ctrl.query, start: 0 };\r\n            return $q.all([\r\n                catalogService.searchCategories(angular.extend({ }, searchCriteria, { pageSize: $ctrl.categoryLimit })),\r\n                catalogService.search(angular.extend({ }, searchCriteria, { pageSize: $ctrl.productLimit }))\r\n            ]).then(function(results) {\r\n                var process = function(within) {\r\n                    return (results[0].data[within] || results[1].data[within]).map(function (suggestion) {\r\n                        suggestion['within'] = within;\r\n                        return suggestion;\r\n                    });\r\n                }\r\n                return process('categories').concat(process('products')).map(function (suggestion, index) {\r\n                    suggestion['index'] = index;\r\n                    return suggestion;\r\n                });\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'storefront.accountApi', 'loadingIndicatorService', 'vcRecaptchaService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, accountApi, loader, vcRecaptchaService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.countries = accountApi.getCountries();\r\n\r\n        $scope.isOrg = function () {\r\n            return $scope.member.type === 'Business';\r\n        };\r\n\r\n        $scope.$watch('member.address.countryCode', function () {\r\n            if ($scope.member.address.countryCode) {\r\n                populateRegionalDataForAddress($scope.member.address);\r\n                $scope.member.address.name = stringifyAddress($scope.member.address);\r\n            }\r\n        });\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere($ctrl.countries, { code3: address.countryCode });\r\n                if (address.country) {\r\n                    address.countryName = address.country.name;\r\n                    address.countryCode = address.country.code3;\r\n\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        //$ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                        accountApi.getCountryRegions(address.country, function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                address.regionId = address.region.code;\r\n                address.regionName = address.region.name;\r\n            }\r\n            else {\r\n                address.regionId = undefined;\r\n                address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            //var type = _.find($ctrl.types, function (i) { return i.id == $ctrl.address.addressType });\r\n            //if (type)\r\n            //    addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.companyName ? address.companyName + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        //$scope.registerMemberFieldsConfig = [\r\n        //    {\r\n        //        field: 'CompanyName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Email',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'UserName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Password',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    }\r\n        //];\r\n\r\n        function getParams() {\r\n            var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n            for (i in params) {\r\n                if (params.hasOwnProperty(i)) {\r\n                    if (params[i] === \"\") continue;\r\n\r\n                    param = params[i].split(\"=\");\r\n                    result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        $scope.init = function (storeId) {\r\n            $scope.member = { storeId: storeId, type: 'Business', address: {} };\r\n\r\n            var invite = getParams().invite;\r\n            if (invite) {\r\n                //$scope.registerMemberFieldsConfig[0] = {\r\n                //    field: 'CompanyName',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n                //$scope.registerMemberFieldsConfig[1] = {\r\n                //    field: 'Email',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n\r\n                $scope.member.invite = invite;\r\n                $ctrl.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                        .then(function (result) {\r\n                            if (result.message) {\r\n                                $scope.error = result.message;\r\n                                return $q.reject(\"Invite is invalid\");\r\n                            }\r\n                            $scope.member.companyName = result.companyName;\r\n                            $scope.member.email = result.email;\r\n                        });\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            corporateApiErrorHelper.clearErrors($scope);\r\n            $ctrl.error = {};\r\n            var hasError = false;\r\n            var member = $scope.member;\r\n            var errorMsg = member.password.length < 5;\r\n            $ctrl.error.password = errorMsg;\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = member.password !== member.confirmPassword;\r\n                $ctrl.error.confirmPassword = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                if ($scope.member.invite) {\r\n                    $ctrl.loader.wrapLoading(function () {\r\n                        return corporateRegisterApi.registerByInvite({ invite: $scope.member.invite }, $scope.member, function (result) {\r\n                        }, function (rejection) {\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                } else {\r\n                    $ctrl.loader.wrapLoading(function () {\r\n                        var apiMethodToCall = $scope.isOrg() ? corporateRegisterApi.register : corporateRegisterApi.registerPersonal;\r\n                        return apiMethodToCall($scope.member, function (result) {\r\n                            $scope.$parent.userName = $scope.member.username;\r\n                            $scope.$parent.password = $scope.member.password\r\n                            $scope.login();\r\n                        }, function (rejection) {\r\n                            vcRecaptchaService.reload();\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'satellizer', 'storefrontApp', 'storefrontApp.consts'])\r\n\r\n    .config(['$translateProvider', 'baseUrl', function ($translateProvider, baseUrl) {\r\n        $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n        $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n        $translateProvider.preferredLanguage('en');\r\n    }])\r\n\r\n    .run(['$templateCache', 'apiBaseUrl', function ($templateCache, apiBaseUrl) {\r\n        // cache application level templates\r\n        $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n    }])\r\n\r\n    .value('$routerRootComponent', 'vcAccountManager')\r\n    .service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n        return {\r\n            showDialog: function (dialogData, controller, templateUrl) {\r\n                var modalInstance = $uibModal.open({\r\n                    controller: controller,\r\n                    templateUrl: templateUrl,\r\n                    resolve: {\r\n                        dialogData: function () {\r\n                            return dialogData;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }])\r\n\r\n    .component('vcAccountManager', {\r\n        templateUrl: \"account-manager.tpl\",\r\n        bindings: {\r\n            baseUrl: '<',\r\n            customer: '<'\r\n        },\r\n        $routeConfig: [\r\n            { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders' },\r\n            { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n            { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n            { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n            { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n            { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n            { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n            { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n            { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n        ],\r\n        controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n\r\n            $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateProfile = function (updateRequest) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateAddresses = function (data) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.availCountries = accountApi.getCountries();\r\n\r\n            $ctrl.getCountryRegions = function (country) {\r\n                return accountApi.getCountryRegions(country).$promise;\r\n            };\r\n\r\n            $ctrl.changePassword = function (changePasswordData) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.changePassword(changePasswordData).$promise;\r\n                });\r\n            };\r\n\r\n            $scope.$watch(function () {\r\n                return mainContext.customer;\r\n            }, function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id, memberType: 'CompanyMember' }, function (member) {\r\n                            customer.companyId = _.first(member.organizations);\r\n                            customer.email = _.first(member.emails);\r\n                        }).$promise;\r\n                    });\r\n                    authService.fillAuthData();\r\n                }\r\n            });\r\n\r\n            $scope.$on('loginStatusChanged', function () {\r\n                $timeout(function () {\r\n                    $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n                });\r\n            });\r\n        }]\r\n    })\r\n\r\n    .service('confirmService', ['$q', function ($q) {\r\n        this.confirm = function (message) {\r\n            return $q.when(window.confirm(message || 'Is it OK?'));\r\n        };\r\n    }])\r\n\r\n","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' },\r\n        registerPersonal: { url: apiBaseUrl + 'api/b2b/registerPersonal', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","angular.module('storefront.account')\r\n.factory('roleService', ['$q', '$http', 'storefront.corporateAccountApi', 'availableRoles', function ($q, $http, corporateAccountApi, availableRoles) {\r\n    var service = {\r\n        available: null,\r\n        get: null,\r\n        set: null\r\n    };\r\n\r\n    // get all available roles from settings\r\n    service._roles = availableRoles;\r\n    corporateAccountApi.getRoles(function (roles) {\r\n        service.available = _.map(service._roles, function(role) {\r\n            var realRole = _.findWhere(roles, { name: role });\r\n            return angular.extend({}, realRole, { description: 'customer.roles.descriptions.' + role.toLowerCase().replace(\" \", \"_\") });\r\n        });\r\n    });\r\n\r\n    service.get = function(accounts){\r\n        var availableRoles = angular.copy(service.available);\r\n        _.each(availableRoles, function(availableRole) {            \r\n            // role is assigned to member if any of member's security accounts has this role assigned\r\n            var roles = _.chain(accounts).map(function(account) { return account.roles; }).flatten().value();\r\n            availableRole.assigned = _.some(roles,\r\n            function(assignedRole) {\r\n                return availableRole.name === assignedRole.name;\r\n            });\r\n        });\r\n        // if multiple roles assigned, return the role with minimal privilidges\r\n        return _.last(_.where(availableRoles, { assigned: true }));\r\n    };\r\n\r\n    service.set = function(accounts, role) {\r\n        // assign current role to all member's security accounts\r\n        return $q.all(_.map(accounts, function(account) {\r\n            account.roles = _.without.apply(_, [account.roles].concat(_.filter(account.roles, function(role) { return _.contains(service._roles, role.name); })));\r\n            account.roles.push(role);\r\n            return corporateAccountApi.updateUser(account).$promise;\r\n        }));\r\n    };\r\n\r\n    return service;\r\n}]);\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);"]}