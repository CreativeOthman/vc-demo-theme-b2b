{"version":3,"sources":["../../../assets/js/auth.js","../../../assets/js/services.js","../../../assets/js/main.js","../../../assets/js/cart.js","../../../assets/js/quote-request.js","../../../assets/js/common-components/address.js","../../../assets/js/common-components/creditCard.js","../../../assets/js/common-components/errors.js","../../../assets/js/common-components/labeled-input.js","../../../assets/js/common-components/labeled-select.js","../../../assets/js/common-components/labeled-textarea.js","../../../assets/js/common-components/lineItems.js","../../../assets/js/common-components/member.js","../../../assets/js/common-components/memberDetail.js","../../../assets/js/common-components/paymentMethods.js","../../../assets/js/common-components/roles.js","../../../assets/js/common-components/searchBar.js","../../../assets/js/account/account-addresses.js","../../../assets/js/account/account-company-info.js","../../../assets/js/account/account-company-members.js","../../../assets/js/account/account-login.js","../../../assets/js/account/account-orders.js","../../../assets/js/account/account-password-change.js","../../../assets/js/account/account-profile-update.js","../../../assets/js/account/account-quotes.js","../../../assets/js/account/account-register.js","../../../assets/js/account/account-subscriptions.js","../../../assets/js/account/account.js","../../../assets/js/account/accountApi.js","../../../assets/js/account/corporateAccountApi.js","../../../assets/js/account/role.js","../../../assets/js/lists/account-lists.js","../../../assets/js/lists/add-to-list-button.js","../../../assets/js/lists/add-to-list.js","../../../assets/js/lists/list-creation.js","../../../assets/js/permission.js"],"names":["angular","module","factory","mainContext","$auth","$httpParamSerializerJQLike","$interpolate","$rootScope","corporateAccountApi","changeAuth","results","authContext","userId","id","roles","permissions","userLogin","userName","fullName","isAuthenticated","userType","isAdministrator","_","map","x","login","password","grant_type","headers","Accept","Content-Type","fillAuthData","getUser","customer","result","$broadcast","error","checkPermission","permission","securityScopes","hasPermission","trim","$","inArray","isArray","split","some","permissionWithScope","constant","config","$authProvider","$provide","apiBaseUrl","loginUrl","tokenName","tokenPrefix","oauth2","name","clientId","decorator","$delegate","tokenExpirationName","service","originalSetToken","setToken","response","apply","arguments","expirationTime","Date","parse","data","this","SatellizerStorage","set","run","$authStorage","$timeout","$window","$location","logOut","logout","remove","location","href","protocol","host","port","parseFloat","get","now","storefrontApp","$uibModal","showDialog","dialogData","controller","templateUrl","open","resolve","$http","sendProduct","post","postFeedback","model","getCurrentCustomer","getTime","getDynamicContent","placeName","getActualProductPrices","products","getProduct","productIds","getProducts","search","criteria","searchCategories","getCart","getCartItemsCount","addLineItem","productId","quantity","changeLineItemQuantity","lineItemId","put","changeLineItemsQuantity","items","removeLineItem","delete","changeLineItemPrice","newPrice","clearCart","getCountries","getCountryRegions","countryCode","addCoupon","couponCode","removeCoupon","addOrUpdateShipment","shipment","addOrUpdatePayment","payment","getAvailableShippingMethods","shipmentId","getAvailablePaymentMethods","addOrUpdatePaymentPlan","plan","removePaymentPlan","createOrder","bankCardInfo","$q","$localStorage","customerService","getOrCreateMyLists","lists","each","list","author","Math","floor","random","toString","extend","reject","getSharedLists","sharedLists","cartId","isDefined","find","push","getWishlist","listName","contains","addItemToList","listId","product","containsInList","copy","currentList","addSharedList","myLists","sharedCartId","searchedList","filter","item","clearList","removeFromFriendsLists","currentId","getCurrentQuoteRequest","getQuoteRequest","number","getQuoteRequestItemsCount","addProductToQuoteRequest","removeProductFromQuoteRequest","quoteRequestNumber","quoteItemId","submitQuoteRequest","quoteRequest","quoteForm","rejectQuoteRequest","updateQuoteRequest","getTotals","confirmQuoteRequest","getRecommendedProducts","requestData","getOrder","orderNumber","isInProductCompareList","addProduct","uniq","getProductsIds","ids","i","length","join","getProductsCount","clearCompareList","removeProduct","without","$scope","baseUrl","$on","path","currentPath","replace","event","storefrontNotification","detailsVisible","toggleNotificationDetails","closeNotification","outerRedirect","absUrl","innerRedirect","$$path","stringifyAddress","address","stringifiedAddress","firstName","lastName","organization","countryName","regionName","city","line1","line2","postalCode","getObjectSize","obj","key","size","hasOwnProperty","getCustomer","then","addressId","addresses","isContact","memberType","cartService","catalogService","availabilityService","loader","timer","coupon","reloadCart","wrapLoading","cart","hasValidationErrors","validationErrors","code","appliedSuccessfully","errorCode","getProductsAvailability","pluck","availability","object","setCartForm","form","formCart","lineItem","cartIsUpdating","isLoading","$invalid","initialQuantity","cancel","initialItems","recentCartItemModalVisible","submitCart","$setSubmitted","hasPhysicalProducts","searchProduct","productSearchResult","productSkuOrName","productSearchProcessing","keyword","start","pageSize","selectSearchedProduct","selectedSearchedProduct","addProductToCart","applyCoupon","cartItemsCount","$uibModalInstance","close","redirect","url","quoteRequestService","billingAddress","type","quoteItem","proposalPrices","tierPrice","selectedTierPrice","requestShippingQuote","countries","addressType","countryRegions","billingCountryRegions","shippingCountryRegions","toFormModel","quoteRequestFormModel","tag","status","comment","shippingAddress","quoteItemFormModel","price","amount","currentQuoteRequestNumber","billingCountry","shippingCountry","itemsCount","setQuoteRequestForm","formQuoteRequest","displayForStatuses","statuses","addTierPrice","salePrice","changeTierPriceQuantity","isNaN","removeTierPrice","initialQuoteItems","setCountry","country","c","code3","code2","regionId","setCountryRegion","countryRegion","r","selectCustomerAddress","a","email","isRegisteredUser","selectTierPrice","totals","setRequestShippingQuote","setShippingAddressEqualsBilling","shippingAddressEqualsBilling","tierPricesUnique","quantities","p","actualQuoteRequest","updated","component","bindings","validationContainer","editMode","onUpdate","require","checkoutStep","transclude","header","footer","populateRegionalDataForAddress","findWhere","ctrl","regions","setAddressRegion","region","undefined","types","$onInit","addComponent","$onDestroy","removeComponent","setForm","frm","validate","$valid","$watch","card","$filter","val","bankCardHolderName","level","message","errors","$ctrl","value","inputClass","placeholder","required","requiredError","autofocus","pattern","disabled","ngModel","options","select","$setValidity","$render","$viewValue","option","$setViewValue","label","member","memberComponent","fieldsConfig","getFieldConfig","field","first","configItem","visible","rolesComponent","showField","disableField","requiredField","directive","link","scope","elem","attr","$parsers","unshift","isValid","$$parentForm","Password","getAvailPaymentMethods","onSelectMethod","paymentMethod","methods","availPaymentMethods","sortBy","priority","selectMethod","method","accounts","roleService","available","availableRoles","availableRole","getRole","$onChanges","selectRole","role","assigned","searching","noResults","query","categoriesLabel","productsLabel","submitLabel","categoryLimit","productLimit","hasHint","isOpen","getSuggestions","searchCriteria","all","process","within","suggestion","concat","index","accountManager","confirmService","$translate","corporateApiErrorHelper","getCompanyMember","currentMember","$promise","addNewAddress","last","components","newAddress","updateCompanyMember","submit","editIdx","editItem","edit","$index","text","confirm","confirmed","splice","companyMember","handler","clearErrors","companyId","getCompanyById","company","updateCompanyInfo","updateCompany","rejection","handleErrors","submitCompanyAddress","$routeConfig","useAsDefault","accountApi","$router","corporateRegisterApi","currentMemberId","newMemberComponent","pageSettings","currentPage","itemsPerPageCount","numPages","pageChanged","getCompanyMembers","memberId","skip","take","sortInfos","entries","totalItems","totalCount","forEach","securityAccounts","addNewMemberFieldsConfig","init","storeId","cultureName","registrationUrl","$routerOnActivate","next","params","pageNumber","inviteEmailsValidationPattern","RegExp","invite","inviteInfo","emails","rawEmails","adminName","adminEmail","language","callbackUrl","addNewMember","newMember","registerMember","changeStatus","isActive","navigate","deleteCompanyMember","inviteForm","valid","showActions","refresh","memberNumber","organizations","title","submitMember","authService","$event","keyCode","element","document","querySelector","orderHelper","orderApi","order","isShowPayment","lastPayment","inPayments","amountToPay","getNewPayment","sum","billingAddressEqualsShipping","loadPromise","getNewPaymentData","configurePayment","paymentMethods","newPaymentTemplate","purpose","canCancelPayment","selectPaymentMethod","gatewayCode","shipments","getInvoicePdf","BASE_URL","showPayment","preselectedMaymentMethod","every","processPayment","paymentNumber","orderProcessingResult","isSuccess","newPaymentStatus","paymentMethodType","toLowerCase","htmlForm","redirectUrl","cancelPayment","retVal","paidPayments","paidAmount","reduce","memo","num","total","pendingPayments","isCancelled","pendingPayment","found","statusLabels","passwordChangeData","errorMsg","hasError","oldPassword","newPassword","newPassword2","changePassword","$setPristine","getQuotes","vcRecaptchaService","companyName","getParams","param","window","substring","decodeURIComponent","isOrg","getRegisterInfoByInvite","confirmPassword","registerByInvite","register","registerPersonal","$parent","username","reload","subscriptionApi","entryNumber","subscription","cancelReason","isCancelFormVisible","data_intervalCount","interval","moduleName","storefrontAppDependencies","$translateProvider","useSanitizeValueStrategy","useUrlLoader","preferredLanguage","$templateCache","callback","updateProfile","updateRequest","updateAccount","updateAddresses","availCountries","changePasswordData","parent","prev","hide","when","$resource","updateUser","getRoles","errorMessage","modelState","_roles","realRole","description","chain","account","flatten","assignedRole","where","listService","dialogService","selectDefault","default","selected","selectList","isEmpty","user","initialize","selectTab","tabName","selectedList","selectedTab","addToCart","productAdded","removeList","generateLink","sharedLink","substr","lastIndexOf","addToCartAllProducts","createList","listSettings","accountLists","listPreSetting","checkLocation","selectedVariation","compareProductInLists","buttonInvalid","toListsDialogDataModel","addProductToWishlist","signInToProceed","availableLists","imageUrl","primaryImage","createdDate","inProgress","itemAdded","addProductToList","modifiedBy","setDefault","submitSettings","attrs","toggleVisibilityBasedOnPermission","permissionValue","show","vaPermission"],"mappings":"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","file":"account-scripts.js","sourcesContent":["angular.module('storefrontApp')\r\n    .factory('authService', ['storefrontApp.mainContext', '$auth', '$httpParamSerializerJQLike', '$interpolate', '$rootScope', 'storefront.corporateAccountApi',\r\n        function (mainContext, $auth, $httpParamSerializerJQLike, $interpolate, $rootScope, corporateAccountApi) {\r\n\r\n            var authContext = {\r\n                userId: null,\r\n                userLogin: null,\r\n                fullName: null,\r\n                userType: null,\r\n                roles: null,\r\n                permissions: null,\r\n                isAuthenticated: false\r\n            };\r\n\r\n            authContext.login = function (login, password) {\r\n                return $auth.login($httpParamSerializerJQLike({\r\n                    userName: login,\r\n                    password: password,\r\n                    grant_type: \"password\"\r\n                }),\r\n                    {\r\n                        headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded' }\r\n                    });\r\n            };\r\n\r\n            authContext.fillAuthData = function () {\r\n                return corporateAccountApi.getUser({ userName: mainContext.customer.userName },\r\n                    function (result) {\r\n                        changeAuth(result)\r\n                        $rootScope.$broadcast('loginStatusChanged', authContext);\r\n                    },\r\n                    function (error) { });\r\n            };\r\n\r\n            authContext.checkPermission = function (permission, securityScopes) {\r\n                //first check admin permission\r\n                // var hasPermission = $.inArray('admin', authContext.permissions) > -1;\r\n                var hasPermission = authContext.isAdministrator;\r\n                if (!hasPermission && permission) {\r\n                    permission = permission.trim();\r\n                    //first check global permissions\r\n                    hasPermission = $.inArray(permission, authContext.permissions) > -1;\r\n                    if (!hasPermission && securityScopes) {\r\n                        if (typeof securityScopes === 'string' || angular.isArray(securityScopes)) {\r\n                            securityScopes = angular.isArray(securityScopes) ? securityScopes : securityScopes.split(',');\r\n                            //Check permissions in scope\r\n                            hasPermission = _.some(securityScopes, function (x) {\r\n                                var permissionWithScope = permission + \":\" + x;\r\n                                var retVal = $.inArray(permissionWithScope, authContext.permissions) > -1;\r\n                                //console.log(permissionWithScope + \"=\" + retVal);\r\n                                return retVal;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                return hasPermission;\r\n            };\r\n\r\n            function changeAuth(results) {\r\n                authContext.userId = results.id;\r\n                authContext.roles = results.roles;\r\n                authContext.permissions = results.permissions;\r\n                authContext.userLogin = results.userName;\r\n                authContext.fullName = results.userLogin;\r\n                authContext.isAuthenticated = results.userName != null;\r\n                authContext.userType = results.userType;\r\n                authContext.isAdministrator = results.isAdministrator;\r\n                //Interpolate permissions to replace some template to real value\r\n                if (authContext.permissions) {\r\n                    authContext.permissions = _.map(authContext.permissions, function (x) {\r\n                        return $interpolate(x)(authContext);\r\n                    });\r\n                }\r\n            };\r\n\r\n            return authContext;\r\n        }])\r\n    .constant('tokenExpirationName', 'platform_access_token_expiration_time')\r\n    .config(['$authProvider', '$provide', 'apiBaseUrl', function ($authProvider, $provide, apiBaseUrl) {\r\n        $authProvider.loginUrl = apiBaseUrl + 'Token';\r\n        $authProvider.tokenName = 'access_token';\r\n        $authProvider.tokenPrefix = 'platform';\r\n        $authProvider.oauth2({\r\n            name: 'platform',\r\n            clientId: 'web'\r\n        });\r\n        $provide.decorator('SatellizerShared', ['$delegate', 'tokenExpirationName', function ($delegate, tokenExpirationName) {\r\n            var service = $delegate;\r\n            var originalSetToken = service.setToken;\r\n            service.setToken = function (response) {\r\n                originalSetToken.apply(service, arguments);\r\n                var expirationTime = Date.parse(response.data['.expires']);\r\n                this.SatellizerStorage.set(tokenExpirationName, expirationTime);;\r\n            };\r\n            return service;\r\n        }]);\r\n    }])\r\n    .run(['$auth', 'SatellizerConfig', 'SatellizerStorage', 'tokenExpirationName', '$timeout', '$window', '$location', function ($auth, $authProvider, $authStorage, tokenExpirationName, $timeout, $window, $location) {\r\n        var logOut = function () {\r\n            $auth.logout();\r\n            $authStorage.remove(tokenExpirationName);\r\n            $window.location.href = $location.protocol() + \"://\" + $location.host() + \":\" + $location.port() + '/account/logout';\r\n        };\r\n\r\n        if ($auth.isAuthenticated()) {\r\n            $timeout(logOut, parseFloat($authStorage.get(tokenExpirationName)) - Date.now());\r\n        }\r\n    }]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.service('dialogService', ['$uibModal', function ($uibModal) {\r\n    return {\r\n        showDialog: function (dialogData, controller, templateUrl) {\r\n            var modalInstance = $uibModal.open({\r\n                controller: controller,\r\n                templateUrl: templateUrl,\r\n                resolve: {\r\n                    dialogData: function () {\r\n                        return dialogData;\r\n                    }\r\n                }\r\n            });\r\n            return modalInstance;\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('mailingService', ['$http', 'apiBaseUrl', function ($http, apiBaseUrl) {\r\n    return {\r\n        sendProduct: function(id, data) {\r\n            return $http.post(apiBaseUrl + 'api/b2b/send/product/' + id, data);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('feedbackService', ['$http', function ($http) {\r\n    return {\r\n        postFeedback: function (data) {\r\n            return $http.post('storefrontapi/feedback', { model: data });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('customerService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentCustomer: function () {\r\n            return $http.get('storefrontapi/account?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('marketingService', ['$http', function ($http) {\r\n    return {\r\n        getDynamicContent: function (placeName) {\r\n            return $http.get('storefrontapi/marketing/dynamiccontent/' + placeName + '?t=' + new Date().getTime());\r\n        },\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('pricingService', ['$http', function ($http) {\r\n\treturn {\r\n\t\tgetActualProductPrices: function (products) {\r\n\t\t    return $http.post('storefrontapi/pricing/actualprices', products);\r\n\t\t}\r\n\t}\r\n}]);\r\n\r\nstorefrontApp.service('catalogService', ['$http', function ($http) {\r\n    return {\r\n        getProduct: function (productIds) {\r\n            return $http.get('storefrontapi/products?productIds=' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        getProducts: function(productIds) {\r\n            return $http.get('storefrontapi/products?' + productIds + '&t=' + new Date().getTime());\r\n        },\r\n        search: function (criteria) {\r\n            return $http.post('storefrontapi/catalog/search', criteria);\r\n        },\r\n        searchCategories: function (criteria) {\r\n            return $http.post('storefrontapi/categories/search', criteria);\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('cartService', ['$http', function ($http) {\r\n    return {\r\n        getCart: function () {\r\n            return $http.get('storefrontapi/cart?t=' + new Date().getTime());\r\n        },\r\n        getCartItemsCount: function () {\r\n            return $http.get('storefrontapi/cart/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, quantity) {\r\n            return $http.post('storefrontapi/cart/items', { id: productId, quantity: quantity });\r\n        },\r\n        changeLineItemQuantity: function (lineItemId, quantity) {\r\n            return $http.put('storefrontapi/cart/items', { lineItemId: lineItemId, quantity: quantity });\r\n        },\r\n        changeLineItemsQuantity: function(items) {\r\n            return $http.put('storefrontapi/cart/items', items);\r\n        },\r\n        removeLineItem: function (lineItemId) {\r\n            return $http.delete('storefrontapi/cart/items?lineItemId=' + lineItemId);\r\n        },\r\n        changeLineItemPrice: function (lineItemId, newPrice) {\r\n        \treturn $http.put('storefrontapi/cart/items/price', { lineItemId: lineItemId, newPrice: newPrice});\r\n        },\r\n        clearCart: function () {\r\n            return $http.post('storefrontapi/cart/clear');\r\n        },\r\n        getCountries: function () {\r\n            return $http.get('storefrontapi/countries?t=' + new Date().getTime());\r\n        },\r\n        getCountryRegions: function (countryCode) {\r\n        \treturn $http.get('storefrontapi/countries/' + countryCode + '/regions?t=' + new Date().getTime());\r\n        },\r\n        addCoupon: function (couponCode) {\r\n            return $http.post('storefrontapi/cart/coupons/' + couponCode);\r\n        },\r\n        removeCoupon: function () {\r\n            return $http.delete('storefrontapi/cart/coupons');\r\n        },\r\n        addOrUpdateShipment: function (shipment) {\r\n            return $http.post('storefrontapi/cart/shipments', shipment);\r\n        },\r\n        addOrUpdatePayment: function (payment) {\r\n            return $http.post('storefrontapi/cart/payments', payment );\r\n        },\r\n        getAvailableShippingMethods: function (shipmentId) {\r\n            return $http.get('storefrontapi/cart/shipments/' + shipmentId + '/shippingmethods?t=' + new Date().getTime());\r\n        },\r\n        getAvailablePaymentMethods: function () {\r\n            return $http.get('storefrontapi/cart/paymentmethods?t=' + new Date().getTime());\r\n        },\r\n        addOrUpdatePaymentPlan: function (plan) {\r\n            return $http.post('storefrontapi/cart/paymentPlan', plan);\r\n        },\r\n        removePaymentPlan: function () {\r\n            return $http.delete('storefrontapi/cart/paymentPlan');\r\n        },\r\n        createOrder: function (bankCardInfo) {\r\n            return $http.post('storefrontapi/cart/createorder', { bankCardInfo: bankCardInfo });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('listService', ['$q', '$http', '$localStorage', 'customerService', function ($q, $http, $localStorage, customerService) {\r\n    return {\r\n        getOrCreateMyLists: function (userName, lists) {\r\n            if (!$localStorage['lists']) {\r\n                $localStorage['lists'] = {};\r\n                $localStorage['lists'][userName] = [];\r\n                $localStorage['sharedListsIds'] = {};\r\n                $localStorage['sharedListsIds'][userName] = [];\r\n                _.each(lists, function (list) {\r\n                    list.author = userName;\r\n                    list.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n                });\r\n                _.extend($localStorage['lists'][userName], lists);\r\n            }\r\n            return $q(function (resolve, reject) { resolve($localStorage['lists'][userName]) });\r\n        },\r\n\r\n        getSharedLists: function (userName) {\r\n            var lists = $localStorage['lists'];\r\n            var sharedLists = [];\r\n            if ($localStorage['sharedListsIds']) {\r\n                _.each($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                    _.each(lists, function(list) {\r\n                        if (angular.isDefined(_.find(list, { id: cartId.toString() }))) {\r\n                            sharedLists.push(_.find(list, { id: cartId }));\r\n                        }\r\n\r\n                    });\r\n                });\r\n            }\r\n            return $q(function (resolve, reject) { resolve(sharedLists) });\r\n        },\r\n        getWishlist: function (listName, permission, id, userName) {\r\n            if (_.contains($localStorage['lists'][userName], _.find($localStorage['lists'][userName], { name: listName })) && angular.isDefined(userName)) {\r\n                $localStorage['lists'][userName].push({ name: listName + 1, permission: permission, id: id, items: [], author: userName });\r\n            }\r\n            else $localStorage['lists'][userName].push({ name: listName, permission: permission, id: id, items: [], author: userName })\r\n\r\n            return _.find($localStorage['lists'][userName], { name: listName });\r\n        },\r\n\r\n        addItemToList: function (listId, product) {\r\n            _.each($localStorage['lists'], function(list) {\r\n                if (angular.isDefined(_.find(list, { id: listId }))) {\r\n                    var searchedList = _.find(list, { id: listId });\r\n                    searchedList.items.push(product);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        containsInList: function (productId, cartId) {\r\n            var lists = angular.copy($localStorage['lists']);\r\n            var contains;\r\n            _.each(lists, function(list) {\r\n                if (angular.isDefined(_.find(list, { id: cartId }))) {\r\n                    var currentList = _.find(list, { id: cartId });\r\n                    if (angular.isDefined(_.find(currentList.items, { productId: productId })))\r\n                        contains = true;\r\n                    else\r\n                        contains = false;\r\n                }\r\n            });\r\n            return $q(function (resolve, reject) { resolve({ contains: contains }) });\r\n        },\r\n\r\n        addSharedList: function (userName, myLists, sharedCartId) {\r\n            if (!_.some($localStorage['sharedListsIds'][userName], function (x) { return x === sharedCartId }) && (!_.find(myLists, { id: sharedCartId }))) {\r\n                $localStorage['sharedListsIds'][userName].push(sharedCartId);\r\n                return $q(function (resolve, reject) {\r\n                    resolve();\r\n                });\r\n            }\r\n            else return $q(function (resolve, reject) {\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        contains: function (productId, listName) {\r\n            return $http.get('storefrontapi/lists/' + listName + '/items/' + productId + '/contains?t=' + new Date().getTime());\r\n        },\r\n        addLineItem: function (productId, listName) {\r\n            return $http.post('storefrontapi/lists/' + listName + '/items', { productId: productId });\r\n        },\r\n\r\n        removeLineItem: function (lineItemId, listId, userName) {\r\n            var searchedList = _.find($localStorage['lists'][userName], { id: listId });\r\n            searchedList.items = _.filter(searchedList.items, function (item) { return item.id != lineItemId });\r\n            return $q(function (resolve, reject) {\r\n                resolve(searchedList)\r\n            });\r\n            //return $http.delete('storefrontapi/lists/' + listName + '/items/' + lineItemId);\r\n        },\r\n        clearList: function (cartId, userName) {\r\n            $localStorage['lists'][userName] = _.filter($localStorage['lists'][userName], function (x) { return x.id != cartId });\r\n            //return $http.post('storefrontapi/lists/clear', { listName: listName });\r\n        },\r\n        removeFromFriendsLists: function (currentId, userName) {\r\n            $localStorage['sharedListsIds'][userName] = _.filter($localStorage['sharedListsIds'][userName], function(cartId) {\r\n                return $q(function(resolve, reject) {\r\n                    resolve(cartId !== currentId)\r\n                });\r\n            });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('quoteRequestService', ['$http', function ($http) {\r\n    return {\r\n        getCurrentQuoteRequest: function () {\r\n            return $http.get('storefrontapi/quoterequest/current?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequest: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '?t=' + new Date().getTime());\r\n        },\r\n        getQuoteRequestItemsCount: function (number) {\r\n            return $http.get('storefrontapi/quoterequests/' + number + '/itemscount?t=' + new Date().getTime());\r\n        },\r\n        addProductToQuoteRequest: function (productId, quantity) {\r\n            return $http.post('storefrontapi/quoterequests/current/items', { productId: productId, quantity: quantity });\r\n        },\r\n        removeProductFromQuoteRequest: function (quoteRequestNumber, quoteItemId) {\r\n            return $http.delete('storefrontapi/quoterequests/' + quoteRequestNumber + '/items/' + quoteItemId);\r\n        },\r\n        submitQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/submit', { quoteForm: quoteRequest });\r\n        },\r\n        rejectQuoteRequest: function (quoteRequestNumber) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/reject');\r\n        },\r\n        updateQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.put('storefrontapi/quoterequests/' + quoteRequestNumber + '/update', { quoteRequest: quoteRequest });\r\n        },\r\n        getTotals: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/totals', { quoteRequest: quoteRequest });\r\n        },\r\n        confirmQuoteRequest: function (quoteRequestNumber, quoteRequest) {\r\n            return $http.post('storefrontapi/quoterequests/' + quoteRequestNumber + '/confirm', { quoteRequest: quoteRequest });\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('recommendationService', ['$http', function ($http) {\r\n    return {\r\n        getRecommendedProducts: function (requestData) {\r\n            return $http.post('storefrontapi/recommendations', requestData );\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('orderService', ['$http', function ($http) {\r\n    return {\r\n        getOrder: function (orderNumber) {\r\n            return $http.get('storefrontapi/orders/' + orderNumber + '?t=' + new Date().getTime());\r\n        }\r\n    }\r\n}]);\r\n\r\nstorefrontApp.service('compareProductService', ['$http', '$localStorage', function($http, $localStorage) {\r\n    return {\r\n        isInProductCompareList: function(productId) {\r\n            var containProduct;\r\n            if (!_.some($localStorage['productCompareListIds'], function(id) { return id === productId })) {\r\n                containProduct = false;\r\n            }\r\n            else\r\n                containProduct = true\r\n            return containProduct;\r\n        },\r\n        addProduct: function(productId) {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n            }\r\n            $localStorage['productCompareListIds'].push(productId);\r\n            _.uniq($localStorage['productCompareListIds']);\r\n        },\r\n        getProductsIds: function() {\r\n            if (!$localStorage['productCompareListIds']) {\r\n                $localStorage['productCompareListIds'] = [];\r\n                return;\r\n            }\r\n            var ids = [];\r\n            for (i = 0; i < $localStorage['productCompareListIds'].length; i++) {\r\n                ids.push('productIds=' + $localStorage['productCompareListIds'][i]);\r\n            }\r\n            return ids.join(\"&\");\r\n        },\r\n        getProductsCount: function() {\r\n            var count = $localStorage['productCompareListIds'] ? $localStorage['productCompareListIds'].length : 0;\r\n            return count;\r\n        },\r\n        clearCompareList: function() {\r\n            $localStorage['productCompareListIds'] = [];\r\n        },\r\n        removeProduct: function(productId) {\r\n            $localStorage['productCompareListIds'] = _.without($localStorage['productCompareListIds'], productId);\r\n        }\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('mainController', ['$rootScope', '$scope', '$location', '$window', 'customerService', 'storefrontApp.mainContext',\r\n    function ($rootScope, $scope, $location, $window, customerService, mainContext) {\r\n\r\n        //Base store url populated in layout and can be used for construction url inside controller\r\n        $scope.baseUrl = {};\r\n\r\n        $rootScope.$on('$locationChangeSuccess', function () {\r\n            var path = $location.path();\r\n            if (path) {\r\n                $scope.currentPath = path.replace('/', '');\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('storefrontError', function (event, data) {\r\n            $rootScope.storefrontNotification = data;\r\n            $rootScope.storefrontNotification.detailsVisible = false;\r\n        });\r\n\r\n        $rootScope.toggleNotificationDetails = function () {\r\n            $rootScope.storefrontNotification.detailsVisible = !$rootScope.storefrontNotification.detailsVisible;\r\n        }\r\n\r\n        $rootScope.closeNotification = function () {\r\n            $rootScope.storefrontNotification = null;\r\n        }\r\n\r\n        //For outside app redirect (To reload the page after changing the URL, use the lower-level API)\r\n        $scope.outerRedirect = function (absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n\r\n        //change in the current URL or change the current URL in the browser (for app route)\r\n        $scope.innerRedirect = function (path) {\r\n            $location.path(path);\r\n            $scope.currentPath = $location.$$path.replace('/', '');\r\n        };\r\n\r\n        $scope.stringifyAddress = function (address) {\r\n            var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.getObjectSize = function (obj) {\r\n            var size = 0, key;\r\n            for (key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    size++;\r\n                }\r\n            }\r\n            return size;\r\n        }\r\n\r\n        mainContext.getCustomer = $scope.getCustomer = function () {\r\n            customerService.getCurrentCustomer().then(function (response) {\r\n                var addressId = 1;\r\n                _.each(response.data.addresses, function (address) {\r\n                    address.id = addressId;\r\n                    addressId++;\r\n                });\r\n                response.data.isContact = response.data.memberType === 'Contact';\r\n                mainContext.customer = $scope.customer = response.data;\r\n            });\r\n        };\r\n\r\n        $scope.getCustomer();\r\n    }])\r\n\r\n.factory('storefrontApp.mainContext', function () {\r\n    return {};\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('cartController', ['$rootScope', '$scope', '$timeout', 'cartService', 'catalogService', 'availabilityService', 'loadingIndicatorService', function ($rootScope, $scope, $timeout, cartService, catalogService, availabilityService, loader) {\r\n    var timer;\r\n\r\n    $scope.loader = loader;\r\n    $scope.coupon = {};\r\n\r\n    var reloadCart = $scope.reloadCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.getCart().then(function(response) {\r\n                var cart = response.data;\r\n                cart.hasValidationErrors = _.some(cart.validationErrors) || _.some(cart.items, function(item) { return _.some(item.validationErrors) });\r\n                $scope.cart = cart;\r\n\r\n                var coupon = cart.coupon || $scope.coupon;\r\n                coupon.loader = $scope.coupon.loader;\r\n                $scope.coupon = coupon;\r\n                if ($scope.coupon.code && !$scope.coupon.appliedSuccessfully) {\r\n                    $scope.coupon.errorCode = 'InvalidCouponCode';\r\n                }\r\n\r\n                return availabilityService.getProductsAvailability(_.pluck(cart.items, 'productId')).then(function(response) {\r\n                    $scope.availability = _.object(_.pluck(response.data, 'productId'), response.data);\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    initialize();\r\n\r\n    $scope.setCartForm = function (form) {\r\n        $scope.formCart = form;\r\n    }\r\n\r\n    $scope.changeLineItemQuantity = function (lineItemId, quantity) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || quantity < 1 || $scope.cartIsUpdating || $scope.loader.isLoading || $scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        var initialQuantity = lineItem.quantity;\r\n        lineItem.quantity = quantity;\r\n        $timeout.cancel(timer);\r\n        timer = $timeout(function () {\r\n            $scope.cartIsUpdating = true;\r\n            cartService.changeLineItemQuantity(lineItemId, quantity).then(function (response) {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            }, function (response) {\r\n                lineItem.quantity = initialQuantity;\r\n                $scope.cartIsUpdating = false;\r\n            });\r\n        }, 300);\r\n    }\r\n\r\n    $scope.changeLineItemPrice = function (lineItemId, newPrice) {\r\n    \tvar lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n    \t\treturn;\r\n    \t}\r\n    \t$scope.cartIsUpdating = true;\r\n    \tcartService.changeLineItemPrice(lineItemId, newPrice).then(function (response) {\r\n    \t\treloadCart();\r\n    \t\t$rootScope.$broadcast('cartItemsChanged');\r\n    \t}, function (response) {\r\n    \t\t$scope.cart.items = initialItems;\r\n    \t\t$scope.cartIsUpdating = false;\r\n    \t});\r\n    };\r\n    $scope.removeLineItem = function (lineItemId) {\r\n        var lineItem = _.find($scope.cart.items, function (i) { return i.id == lineItemId });\r\n        if (!lineItem || $scope.cartIsUpdating || $scope.loader.isLoading) {\r\n            return;\r\n        }\r\n        $scope.cartIsUpdating = true;\r\n        var initialItems = angular.copy($scope.cart.items);\r\n        $scope.recentCartItemModalVisible = false;\r\n        $scope.cart.items = _.without($scope.cart.items, lineItem);\r\n        cartService.removeLineItem(lineItemId).then(function (response) {\r\n            reloadCart();\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        }, function (response) {\r\n            $scope.cart.items = initialItems;\r\n            $scope.cartIsUpdating = false;\r\n        });\r\n    }\r\n\r\n    $scope.clearCart = function() {\r\n        loader.wrapLoading(function() {\r\n            return cartService.clearCart().then(function() {\r\n                reloadCart();\r\n                $rootScope.$broadcast('cartItemsChanged');\r\n            });\r\n        });\r\n    };\r\n\r\n    $scope.submitCart = function () {\r\n        $scope.formCart.$setSubmitted();\r\n        if ($scope.formCart.$invalid) {\r\n            return;\r\n        }\r\n        if ($scope.cart.hasPhysicalProducts) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        } else {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout');\r\n        }\r\n    }\r\n\r\n    $scope.searchProduct = function () {\r\n        $scope.productSearchResult = null;\r\n        if ($scope.productSkuOrName) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(function () {\r\n                $scope.productSearchProcessing = true;\r\n                var criteria = {\r\n                    keyword: $scope.productSkuOrName,\r\n                    start: 0,\r\n                    pageSize: 5\r\n                }\r\n                catalogService.search(criteria).then(function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                    $scope.productSearchResult = response.data.products;\r\n                }, function (response) {\r\n                    $scope.productSearchProcessing = false;\r\n                });\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    $scope.selectSearchedProduct = function (product) {\r\n        $scope.productSearchResult = null;\r\n        $scope.selectedSearchedProduct = product;\r\n        $scope.productSkuOrName = product.name;\r\n    }\r\n\r\n    $scope.addProductToCart = function (product, quantity) {\r\n        $scope.cartIsUpdating = true;\r\n        cartService.addLineItem(product.id, quantity).then(function (response) {\r\n            reloadCart();\r\n            $scope.productSkuOrName = null;\r\n            $scope.selectedSearchedProduct = null;\r\n            $rootScope.$broadcast('cartItemsChanged');\r\n        });\r\n    }\r\n    \r\n    $scope.applyCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.addCoupon(coupon.code).then(function() {\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.removeCoupon = function (coupon) {\r\n        coupon.loader.wrapLoading(function() {\r\n            return cartService.removeCoupon().then(function() {\r\n                $scope.coupon = { loader: $scope.coupon.loader };\r\n                reloadCart();\r\n            });\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n        reloadCart();\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('cartBarController', ['$scope', 'cartService', function ($scope, cartService) {\r\n    getCartItemsCount();\r\n\r\n    $scope.$on('cartItemsChanged', function (event, data) {\r\n        getCartItemsCount();\r\n    });\r\n\r\n    function getCartItemsCount() {\r\n        cartService.getCartItemsCount().then(function (response) {\r\n            $scope.cartItemsCount = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedCartItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', function ($scope, $window, $uibModalInstance, dialogData) {\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('quoteRequestController', ['$rootScope', '$scope', '$window', '$location', 'quoteRequestService', 'cartService',\r\n    function ($rootScope, $scope, $window, $location, quoteRequestService, cartService) {\r\n    initialize();\r\n\r\n    $scope.setQuoteRequestForm = function (form) {\r\n        $scope.formQuoteRequest = form;\r\n    }\r\n\r\n    $scope.displayForStatuses = function (statuses) {\r\n        return _.contains(statuses, $scope.quoteRequest.status);\r\n    }\r\n\r\n    $scope.addTierPrice = function (quoteItem) {\r\n        quoteItem.proposalPrices.push({\r\n            id: quoteItem.proposalPrices.length + 1,\r\n            price: quoteItem.salePrice,\r\n            quantity: 1\r\n        });\r\n    }\r\n\r\n    $scope.changeTierPriceQuantity = function (tierPrice, quantity) {\r\n        if (quantity < 1 || quantity.isNaN) {\r\n            return;\r\n        }\r\n        tierPrice.quantity = quantity;\r\n    }\r\n\r\n    $scope.removeTierPrice = function (quoteItem, tierPrice) {\r\n        quoteItem.proposalPrices = _.without(quoteItem.proposalPrices, tierPrice);\r\n    }\r\n\r\n    $scope.removeProductFromQuoteRequest = function (quoteItem) {\r\n        var initialQuoteItems = angular.copy($scope.quoteRequest.items);\r\n        $scope.quoteRequest.items = _.without($scope.quoteRequest.items, quoteItem);\r\n        quoteRequestService.removeProductFromQuoteRequest($scope.quoteRequest.id, quoteItem.id).then(function (response) {\r\n            getQuoteRequest($scope.quoteRequest.id);\r\n            $rootScope.$broadcast('actualQuoteRequestItemsChanged');\r\n        }, function (response) {\r\n            $scope.quoteRequest.items = initialQuoteItems;\r\n        });\r\n    }\r\n\r\n    $scope.setCountry = function (addressType, countryName) {\r\n        var country = _.find($scope.countries, function (c) { return c.name == countryName });\r\n        if (!country) {\r\n            return;\r\n        }\r\n        if (addressType == 'Billing') {\r\n            $scope.billingCountry = country;\r\n            $scope.billingCountryRegions = [];\r\n            $scope.quoteRequest.billingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.billingAddress.regionId = null;\r\n            $scope.quoteRequest.billingAddress.regionName = null;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            $scope.shippingCountry = country;\r\n            $scope.shippingCountryRegions = [];\r\n            $scope.quoteRequest.shippingAddress.countryCode = country.code3 || country.code2;\r\n            $scope.quoteRequest.shippingAddress.regionId = null;\r\n            $scope.quoteRequest.shippingAddress.regionName = null;\r\n        }\r\n        if (country.code3) {\r\n            getCountryRegions(addressType, country.code3);\r\n        }\r\n    }\r\n\r\n    $scope.setCountryRegion = function (addressType) {\r\n        if (addressType == 'Billing') {\r\n            var countryRegion = _.find($scope.billingCountryRegions, function (r) { return r.name == $scope.quoteRequest.billingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.billingAddress.regionId = countryRegion.code;\r\n        }\r\n        if (addressType == 'Shipping') {\r\n            var countryRegion = _.find($scope.shippingCountryRegions, function (r) { return r.name == $scope.quoteRequest.shippingAddress.regionName });\r\n            if (!countryRegion) {\r\n                return;\r\n            }\r\n            $scope.quoteRequest.shippingAddress.regionId = countryRegion.code;\r\n        }\r\n    }\r\n\r\n    $scope.selectCustomerAddress = function (addressType) {\r\n        if (addressType === 'Billing') {\r\n            var billingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.billingAddress.id });\r\n            if (billingAddress) {\r\n                billingAddress.type = 'Billing';\r\n                if (billingAddress.countryCode) {\r\n                    getCountryRegions('Billing', billingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.billingAddress = angular.copy(billingAddress);\r\n            }\r\n        }\r\n        if (addressType === 'Shipping') {\r\n            var shippingAddress = _.find($scope.customer.addresses, function (a) { return a.id === $scope.quoteRequest.shippingAddress.id });\r\n            if (shippingAddress) {\r\n                shippingAddress.type = 'Shipping';\r\n                if (shippingAddress.countryCode) {\r\n                    getCountryRegions('Shipping', shippingAddress.countryCode);\r\n                }\r\n                $scope.quoteRequest.shippingAddress = angular.copy(shippingAddress);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.stringifyAddress = function (address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        var stringifiedAddress = address.firstName + ' ' + address.lastName + ', ';\r\n        stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n        stringifiedAddress += address.countryName + ', ';\r\n        stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n        stringifiedAddress += address.city + ' ';\r\n        stringifiedAddress += address.line1 + ', ';\r\n        stringifiedAddress += address.line2 ? address.line2 : '';\r\n        stringifiedAddress += address.postalCode;\r\n        return stringifiedAddress;\r\n    }\r\n\r\n    $scope.submitQuoteRequest = function () {\r\n        $scope.formQuoteRequest.$setSubmitted();\r\n        if ($scope.formQuoteRequest.$invalid) {\r\n            return;\r\n        }\r\n        $scope.quoteRequest.billingAddress.email = $scope.quoteRequest.email;\r\n        if ($scope.quoteRequest.shippingAddress) {\r\n            $scope.quoteRequest.shippingAddress.email = $scope.quoteRequest.email;\r\n        }\r\n        quoteRequestService.submitQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            if ($scope.customer.isRegisteredUser) {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/quoterequests');\r\n            } else {\r\n                $scope.outerRedirect($scope.baseUrl + 'account/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.rejectQuoteRequest = function () {\r\n        quoteRequestService.rejectQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n            quoteRequestService.getQuoteRequest($scope.quoteRequest.id).then(function (response) {\r\n                $scope.quoteRequest = response.data;\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.selectTierPrice = function () {\r\n        quoteRequestService.getTotals($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.quoteRequest.totals = response.data;\r\n        });\r\n    }\r\n\r\n    $scope.confirmQuoteRequest = function () {\r\n        quoteRequestService.confirmQuoteRequest($scope.quoteRequest.id, toFormModel($scope.quoteRequest)).then(function (response) {\r\n            $scope.outerRedirect($scope.baseUrl + 'cart/checkout/#/shipping-address');\r\n        });\r\n    }\r\n\r\n    $scope.setRequestShippingQuote = function () {\r\n        if (!$scope.quoteRequest.requestShippingQuote) {\r\n            $scope.quoteRequest.shippingAddress = null;\r\n        }\r\n    }\r\n\r\n    $scope.setShippingAddressEqualsBilling = function () {\r\n        if ($scope.quoteRequest.shippingAddressEqualsBilling) {\r\n            $scope.quoteRequest.shippingAddress = angular.copy($scope.quoteRequest.billingAddress);\r\n            $scope.quoteRequest.shippingAddress.type = 'Shipping';\r\n            if ($scope.quoteRequest.shippingAddress.countryCode) {\r\n                $scope.shippingCountry = $scope.billingCountry;\r\n                getCountryRegions('Shipping', $scope.quoteRequest.shippingAddress.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.tierPricesUnique = function (quoteItem) {\r\n        var quantities = _.map(quoteItem.proposalPrices, function (p) { return p.quantity });\r\n        return _.uniq(quantities).length == quoteItem.proposalPrices.length;\r\n    }\r\n\r\n    function initialize() {\r\n        var quoteRequestNumber = $location.url().replace('/', '') || $window.currentQuoteRequestNumber;\r\n        $scope.billingCountry = null;\r\n        $scope.shippingCountry = null;\r\n        getCountries();\r\n        if (quoteRequestNumber) {\r\n            getQuoteRequest(quoteRequestNumber);\r\n        } else {\r\n            $scope.quoteRequest = { itemsCount: 0 };\r\n        }\r\n    }\r\n\r\n    function getQuoteRequest(number) {\r\n        quoteRequestService.getQuoteRequest(number).then(function (response) {\r\n            var quoteRequest = response.data;\r\n            if (!quoteRequest.billingAddress) {\r\n                if ($scope.customer.addresses.length) {\r\n                    quoteRequest.billingAddress = angular.copy($scope.customer.addresses[0]);\r\n                    quoteRequest.billingAddress.type = 'Billing';\r\n                    if (quoteRequest.billingAddress.countryCode) {\r\n                        getCountryRegions('Billing', quoteRequest.billingAddress.countryCode);\r\n                    }\r\n                } else {\r\n                    quoteRequest.billingAddress = {\r\n                        firstName: $scope.customer.firstName,\r\n                        lastName: $scope.customer.lastName\r\n                    };\r\n                }\r\n            }\r\n            _.each(quoteRequest.items, function (quoteItem) {\r\n                var i = 1;\r\n                _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                    tierPrice.id = i;\r\n                    if (quoteItem.selectedTierPrice.quantity == tierPrice.quantity) {\r\n                        quoteItem.selectedTierPrice = tierPrice;\r\n                    }\r\n                    i++;\r\n                });\r\n            });\r\n            quoteRequest.requestShippingQuote = true;\r\n            $scope.quoteRequest = quoteRequest;\r\n        });\r\n    }\r\n\r\n    function getCountries() {\r\n        cartService.getCountries().then(function (response) {\r\n            $scope.countries = response.data;\r\n        });\r\n    }\r\n\r\n    function getCountryRegions(addressType, countryCode) {\r\n        cartService.getCountryRegions(countryCode).then(function (response) {\r\n            var countryRegions = response.data;\r\n            if (addressType == 'Billing') {\r\n                $scope.billingCountryRegions = countryRegions || [];\r\n            }\r\n            if (addressType == 'Shipping') {\r\n                $scope.shippingCountryRegions = countryRegions || [];\r\n            }\r\n        });\r\n    }\r\n\r\n    function toFormModel(quoteRequest) {\r\n        var quoteRequestFormModel = {\r\n            id: quoteRequest.id,\r\n            tag: quoteRequest.tag,\r\n            status: quoteRequest.status,\r\n            comment: quoteRequest.comment,\r\n            billingAddress: quoteRequest.billingAddress,\r\n            shippingAddress: quoteRequest.shippingAddress,\r\n            items: []\r\n        };\r\n        _.each(quoteRequest.items, function (quoteItem) {\r\n            var quoteItemFormModel = {\r\n                id: quoteItem.id,\r\n                comment: quoteItem.comment,\r\n                selectedTierPrice: {\r\n                    price: quoteItem.selectedTierPrice.price.amount,\r\n                    quantity: quoteItem.selectedTierPrice.quantity\r\n                },\r\n                proposalPrices: []\r\n            };\r\n            _.each(quoteItem.proposalPrices, function (tierPrice) {\r\n                quoteItemFormModel.proposalPrices.push({\r\n                    price: tierPrice.price.amount,\r\n                    quantity: tierPrice.quantity\r\n                });\r\n            });\r\n            quoteRequestFormModel.items.push(quoteItemFormModel);\r\n        });\r\n\r\n        return quoteRequestFormModel;\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('actualQuoteRequestBarController', ['$scope', 'quoteRequestService', function ($scope, quoteRequestService) {\r\n    getCurrentQuoteRequest();\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        getCurrentQuoteRequest();\r\n    });\r\n\r\n    function getCurrentQuoteRequest() {\r\n        quoteRequestService.getCurrentQuoteRequest().then(function (response) {\r\n            $scope.actualQuoteRequest = response.data;\r\n        });\r\n    }\r\n}]);\r\n\r\nstorefrontApp.controller('recentlyAddedActualQuoteRequestItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData',\r\n    function ($scope, $window, $uibModalInstance, dialogData) {\r\n\r\n    $scope.$on('actualQuoteRequestItemsChanged', function (event, data) {\r\n        dialogData.updated = true;\r\n    });\r\n\r\n    $scope.dialogData = dialogData;\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    }\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n}]);","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcAddress', {\r\n    templateUrl: \"themes/assets/address.tpl.html\",\r\n    bindings: {\r\n        address: '=',\r\n        addresses: '<',\r\n        countries: '=',\r\n        validationContainer: '=',\r\n        getCountryRegions: '&',\r\n        editMode: '<',\r\n        onUpdate: '&'\r\n    },\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    transclude: {\r\n        header: '?addressHeader', footer: '?addressFooter'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n        ctrl.types = [{ id: 'Billing', name: 'Billing' }, { id: 'Shipping', name: 'Shipping' }, { id: 'BillingAndShipping', name: 'Billing and Shipping' }];\r\n        \r\n        this.$onInit = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere(ctrl.countries, { code3: address.countryCode });\r\n                if (address.country != null) {\r\n                    ctrl.address.countryName = ctrl.address.country.name;\r\n                    ctrl.address.countryCode = ctrl.address.country.code3;\r\n                }\r\n\r\n                if (address.country) {\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                ctrl.address.regionId = ctrl.address.region.code;\r\n                ctrl.address.regionName = ctrl.address.region.name;\r\n            }\r\n            else {\r\n                ctrl.address.regionId = undefined;\r\n                ctrl.address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n\r\n        ctrl.validate = function () {\r\n            if (ctrl.form) {\r\n                ctrl.form.$setSubmitted();\r\n                return ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            var type = _.find(ctrl.types, function (i) { return i.id == ctrl.address.addressType });\r\n            if (type)\r\n                addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.organization ? address.organization + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        $scope.$watch('$ctrl.address', function () {\r\n            if (ctrl.address) {\r\n                populateRegionalDataForAddress(ctrl.address);\r\n                ctrl.address.name = stringifyAddress(ctrl.address);\r\n            }\r\n            ctrl.onUpdate({ address: ctrl.address });\r\n        }, true);\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcCreditCard', {\r\n    templateUrl: \"themes/assets/js/common-components/creditCard.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        card: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', '$filter', function ($scope, $filter) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            if(ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        $scope.$watch('$ctrl.card.bankCardHolderName', function (val) {\r\n            if (ctrl.card) {\r\n                ctrl.card.bankCardHolderName = $filter('uppercase')(val);\r\n            }\r\n        }, true);\r\n\r\n        ctrl.validate = function () {\r\n            ctrl.form.$setSubmitted();\r\n            return !ctrl.form.$invalid;\r\n        }\r\n\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcErrors', {\r\n    templateUrl: \"themes/assets/errors.tpl.html\",\r\n    bindings: {\r\n        level: '<',\r\n        message: '<',\r\n        errors: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        $ctrl.level = $ctrl.level || 'danger';\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledInput', {\r\n    templateUrl: \"themes/assets/labeled-input.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        inputClass: '<',\r\n        placeholder: '@',\r\n        type: '@?',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        pattern: '@',\r\n        disabled: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});\r\n","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledSelect', {\r\n    templateUrl: \"themes/assets/labeled-select.tpl.html\",\r\n    require: {\r\n        ngModel: \"?ngModel\"\r\n    },\r\n    bindings: {\r\n        options: '<',\r\n        select: '&',\r\n        form: '=',\r\n        name: '@',\r\n        placeholder: '<',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        autofocus: '<',\r\n        disabled: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.$onInit = function() {\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$render = function() {\r\n                $ctrl.value = $ctrl.ngModel.$viewValue;\r\n            };\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n        var select = $ctrl.select;\r\n        $ctrl.select = function(option) {\r\n            select(option);\r\n            $ctrl.value = option;\r\n            if ($ctrl.required)\r\n                $ctrl.ngModel.$setValidity('required', false);\r\n            $ctrl.ngModel.$setViewValue($ctrl.value);\r\n        };        \r\n    }]\r\n});","angular.module('storefrontApp')\r\n\r\n.component('vcLabeledTextArea', {\r\n    templateUrl: \"themes/assets/labeled-textarea.tpl.html\",\r\n    bindings: {\r\n        value: '=',\r\n        form: '=',\r\n        name: '@',\r\n        label: '@',\r\n        required: '<',\r\n        requiredError: '@?',\r\n        pattern: '<?',\r\n        autofocus: '<'\r\n    },\r\n    controller: [function () {\r\n        var $ctrl = this;\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.form.$setSubmitted();\r\n            return $ctrl.form.$valid;\r\n        };\r\n\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcLineItems', {\r\n    templateUrl: \"themes/assets/js/common-components/lineItems.tpl.liquid\",\r\n    bindings: {\r\n        items: '='\r\n    }\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMember', {\r\n    templateUrl: \"themes/assets/member.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) { $ctrl.form = frm; };\r\n\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcMemberDetail', {\r\n    templateUrl: \"themes/assets/memberDetail.tpl.html\",\r\n    bindings: {\r\n        member: '=',\r\n        memberComponent: '=',\r\n        fieldsConfig: '<'\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var $ctrl = this;\r\n        \r\n        $ctrl.config = [\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  false\r\n            }\r\n        ];\r\n\r\n        if ($ctrl.fieldsConfig)\r\n            angular.extend($ctrl.config, $ctrl.fieldsConfig);\r\n\r\n        $ctrl.rolesComponent = null;\r\n\r\n        this.$onInit = function () {\r\n            $ctrl.memberComponent = this;\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            $ctrl.memberComponent = null;\r\n        };\r\n\r\n        $ctrl.setForm = function (frm) {\r\n            $ctrl.form = frm;\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            if ($ctrl.form) {\r\n                $ctrl.form.$setSubmitted();\r\n                return $ctrl.form.$valid;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $ctrl.showField = function (field) {\r\n            return getFieldConfig(field).visible == true;\r\n        }\r\n\r\n        $ctrl.disableField = function (field) {\r\n            return getFieldConfig(field).disabled == true;\r\n        }\r\n\r\n        $ctrl.requiredField = function (field) {\r\n            return getFieldConfig(field).required == true;\r\n        }\r\n\r\n        function getFieldConfig(field) {\r\n            var configItem = _.first(_.filter($ctrl.config, function (configItem) { return configItem.field === field; }));\r\n            return configItem;\r\n        }\r\n    }]\r\n});\r\n\r\nstorefrontApp.directive('confirmPasswordValidation', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elem, attr, ngModel) {\r\n            ngModel.$parsers.unshift(function (value, scope) {\r\n                var isValid = true;\r\n                var password = ngModel.$$parentForm.Password.$viewValue;\r\n\r\n                if (password) {\r\n                    isValid = password === value;\r\n                }\r\n\r\n                ngModel.$setValidity('confirmPasswordValidation', isValid);\r\n                return value;\r\n            });\r\n        }\r\n    };\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.component('vcPaymentMethods', {\r\n    templateUrl: \"themes/assets/js/common-components/paymentMethods.tpl.html\",\r\n    require: {\r\n        checkoutStep: '?^vcCheckoutWizardStep'\r\n    },\r\n    bindings: {\r\n        getAvailPaymentMethods: '&',\r\n        onSelectMethod: '&',\r\n        paymentMethod: '=',\r\n        validationContainer: '='\r\n    },\r\n    controller: ['$scope', function ($scope) {\r\n        var ctrl = this;\r\n\r\n        this.$onInit = function () {\r\n            ctrl.getAvailPaymentMethods().then(function (methods) {\r\n                ctrl.availPaymentMethods = _.sortBy(methods, function (x) { return x.priority; });\r\n                if (ctrl.paymentMethod) {\r\n                    ctrl.paymentMethod = _.findWhere(ctrl.availPaymentMethods, { code: ctrl.paymentMethod.code });\r\n                }\r\n                if (!ctrl.paymentMethod && ctrl.availPaymentMethods.length > 0) {\r\n                    ctrl.selectMethod(ctrl.availPaymentMethods[0]);\r\n                }\r\n            })\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.addComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.addComponent(this);\r\n        };\r\n\r\n        this.$onDestroy = function () {\r\n            if (ctrl.validationContainer)\r\n                ctrl.validationContainer.removeComponent(this);\r\n            if (ctrl.checkoutStep)\r\n                ctrl.checkoutStep.removeComponent(this);\r\n        };\r\n\r\n        ctrl.validate = function () {\r\n            return ctrl.paymentMethod;\r\n        }\r\n\r\n        ctrl.selectMethod = function (method) {\r\n            ctrl.paymentMethod = method;\r\n            ctrl.onSelectMethod({ paymentMethod: method });\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcRoles', {\r\n    templateUrl: \"themes/assets/roles.tpl.html.liquid\",\r\n    bindings: {\r\n        value: '=',\r\n        accounts: \"<\",\r\n        form: '=',\r\n        name: \"@\",\r\n        required: \"<\",\r\n        disabled: \"<\"\r\n    },\r\n    controller: ['$scope', 'roleService', 'loadingIndicatorService', function ($scope, roleService, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(function(){\r\n            return roleService.available;\r\n        }, function(){\r\n            $ctrl.availableRoles = _.map(roleService.available, function(availableRole) {\r\n                return availableRole;\r\n            });\r\n            $ctrl.getRole();\r\n        });\r\n\r\n        $ctrl.$onChanges = function() {\r\n            $ctrl.getRole();\r\n        };\r\n        \r\n        $ctrl.getRole = function() {\r\n            if ($ctrl.accounts) {\r\n                $ctrl.value = roleService.get($ctrl.accounts);\r\n            }\r\n        };\r\n\r\n        $ctrl.selectRole = function(role){\r\n            if ($ctrl.value)\r\n                $ctrl.value.assigned = false;\r\n            role.assigned = true;\r\n        };\r\n    }]\r\n});","var storefrontApp = angular.module('storefrontApp');\r\nstorefrontApp.component('vcSearchBar', {\r\n    templateUrl: \"themes/assets/js/common-components/searchBar.tpl.html\",\r\n    bindings: {\r\n        placeholder: '<',\r\n        searching: '<',\r\n        noResults: '<',\r\n        query: '@',\r\n        categoriesLabel: '<',\r\n        productsLabel: '<',\r\n        submitLabel: '<',\r\n        categoryLimit: '@',\r\n        productLimit: '@'\r\n    },\r\n    controller: ['$scope', '$q', 'catalogService', function ($scope, $q, catalogService) {\r\n        var $ctrl = this;\r\n        $ctrl.hasHint = false;\r\n\r\n        $scope.$watch('$ctrl.isOpen', function (isOpen) {\r\n            $ctrl.hasHint = !!$ctrl.query && !isOpen;\r\n        });\r\n\r\n        $scope.$watch('$ctrl.query', function(query) {\r\n            $ctrl.hasHint = !!query && !$ctrl.isOpen;\r\n        });\r\n\r\n        $ctrl.getSuggestions = function () {\r\n            var searchCriteria = { keyword: $ctrl.query, start: 0 };\r\n            return $q.all([\r\n                catalogService.searchCategories(angular.extend({ }, searchCriteria, { pageSize: $ctrl.categoryLimit })),\r\n                catalogService.search(angular.extend({ }, searchCriteria, { pageSize: $ctrl.productLimit }))\r\n            ]).then(function(results) {\r\n                var process = function(within) {\r\n                    return (results[0].data[within] || results[1].data[within]).map(function (suggestion) {\r\n                        suggestion['within'] = within;\r\n                        return suggestion;\r\n                    });\r\n                }\r\n                return process('categories').concat(process('products')).map(function (suggestion, index) {\r\n                    suggestion['index'] = index;\r\n                    return suggestion;\r\n                });\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountAddresses', {\r\n    templateUrl: \"themes/assets/account-addresses.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', 'confirmService', '$translate', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function (mainContext, confirmService, $translate, $scope, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        \r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function (member) {\r\n                            $ctrl.currentMember = member;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.currentMember.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyMember($ctrl.currentMember);\r\n            }\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyMember($ctrl.currentMember, $ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.currentMember.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.currentMember.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyMember($ctrl.currentMember);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.updateCompanyMember = function (companyMember, handler) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember(companyMember, handler, function (response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyInfo', {\r\n    templateUrl: \"themes/assets/account-company-info.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefrontApp.mainContext', '$scope', '$translate', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function (mainContext, $scope, $translate, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyById({ id: companyId }, function (company) {\r\n                            $ctrl.company = company;\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.updateCompanyInfo = function (company) {\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompany(company, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewAddress = function () {\r\n            if (_.last(components).validate()) {\r\n                $ctrl.company.addresses.push($ctrl.newAddress);\r\n                $ctrl.newAddress = null;\r\n                $ctrl.updateCompanyInfo($ctrl.company);\r\n            }\r\n        };\r\n\r\n        $ctrl.submitCompanyAddress = function () {\r\n            if (components[$ctrl.editIdx].validate()) {\r\n                angular.copy($ctrl.editItem, $ctrl.company.addresses[$ctrl.editIdx]);\r\n                $ctrl.updateCompanyInfo($ctrl.company).then($ctrl.cancel);\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.editIdx = -1;\r\n            $ctrl.editItem = null;\r\n        };\r\n\r\n        $ctrl.edit = function ($index) {\r\n            $ctrl.editIdx = $index;\r\n            $ctrl.editItem = angular.copy($ctrl.company.addresses[$ctrl.editIdx]);\r\n        };\r\n\r\n        $ctrl.delete = function ($index) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        $ctrl.company.addresses.splice($index, 1);\r\n                        $ctrl.updateCompanyInfo($ctrl.company);\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.addresses.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountCompanyMembers', {\r\n    templateUrl: \"themes/assets/account-company-members.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'MemberList', component: 'vcAccountCompanyMembersList', useAsDefault: true },\r\n     { path: '/:member', name: 'MemberDetail', component: 'vcAccountCompanyMemberDetail' }\r\n    ],\r\n    controller: ['storefront.accountApi', function (accountApi) {\r\n        var $ctrl = this;\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMembersList', {\r\n    templateUrl: \"account-company-members-list.tpl\",\r\n    bindings: { $router: '<' },\r\n    controller: ['storefrontApp.mainContext', '$scope', 'storefront.corporateAccountApi', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'roleService', 'loadingIndicatorService', 'confirmService', '$location', '$translate', function (mainContext, $scope, corporateAccountApi, corporateRegisterApi, corporateApiErrorHelper, roleService, loader, confirmService, $location, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.currentMemberId = mainContext.customer.id;\r\n        $ctrl.newMemberComponent = null;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMembers({\r\n                    memberId: mainContext.customer.companyId,\r\n                    skip: ($ctrl.pageSettings.currentPage - 1) * $ctrl.pageSettings.itemsPerPageCount,\r\n                    take: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n\r\n                    $scope.$watch(function(){\r\n                        return roleService.available;\r\n                    }, function() {\r\n                        angular.forEach($ctrl.entries, function(member){\r\n                            var role = roleService.get(member.securityAccounts);\r\n                            member.role = role ? role.name : null;\r\n                        });\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n        \r\n        $ctrl.addNewMemberFieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: false,\r\n                visible: true\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: false,\r\n                visible:  true\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true,\r\n                required: true\r\n            }\r\n        ];\r\n        \r\n        $scope.init = function(storeId, cultureName, registrationUrl){\r\n            $ctrl.storeId = storeId;\r\n            $ctrl.cultureName = cultureName;\r\n            $ctrl.registrationUrl = registrationUrl;\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n        };\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer.companyId; },\r\n            function (companyId) {\r\n                if (companyId) {\r\n                    $ctrl.pageSettings.pageChanged();\r\n                }\r\n            }\r\n        );\r\n\r\n        $ctrl.inviteEmailsValidationPattern = new RegExp(/((^|((?!^)([,;]|\\r|\\r\\n|\\n)))([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*))+$/);\r\n        $ctrl.invite = function () {\r\n            $ctrl.inviteInfo.emails = $ctrl.inviteInfo.rawEmails.split(/[,;]|\\r|\\r\\n|\\n/g);\r\n            loader.wrapLoading(function(){\r\n              return corporateAccountApi.invite({\r\n                storeId: $ctrl.storeId,\r\n                companyId: mainContext.customer.companyId,\r\n                emails: $ctrl.inviteInfo.emails,\r\n                adminName: mainContext.customer.fullName,\r\n                adminEmail: mainContext.customer.email,\r\n                message: $ctrl.inviteInfo.message,\r\n                language: $ctrl.cultureName,\r\n                callbackUrl: $ctrl.registrationUrl\r\n              }, function(response) {\r\n                  $ctrl.cancel();\r\n                  $ctrl.pageSettings.pageChanged();\r\n                  corporateApiErrorHelper.clearErrors($scope);\r\n              }, function (rejection) {\r\n                  corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.addNewMember = function () {\r\n            if ($ctrl.newMemberComponent.validate()) {\r\n                $ctrl.newMember.companyId = mainContext.customer.companyId;\r\n                $ctrl.newMember.role = $ctrl.newMember.role.name;\r\n                $ctrl.newMember.storeId = $ctrl.storeId;\r\n\r\n                loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.registerMember($ctrl.newMember, function(response) {\r\n                        $ctrl.cancel();\r\n                        $ctrl.pageSettings.currentPage = 1;\r\n                        $ctrl.pageSettings.pageChanged();\r\n                        corporateApiErrorHelper.clearErrors($scope);\r\n                    }, function (rejection){\r\n                        corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            $ctrl.inviteInfo = null;\r\n            $ctrl.newMember = null;\r\n        };\r\n\r\n        $ctrl.changeStatus = function (memberId) {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: memberId }, function (member) {\r\n                    member.isActive = !member.isActive;\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.updateCompanyMember(companyMember, function(response) {\r\n                            $ctrl.pageSettings.pageChanged();\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        $ctrl.edit = function (memberId) {\r\n            this.$router.navigate(['MemberDetail', {member: memberId, pageNumber: $ctrl.pageSettings.currentPage}]);\r\n        }\r\n\r\n        $ctrl.delete = function (memberId) {\r\n            var showDialog = function (text) {\r\n                confirmService.confirm(text).then(function (confirmed) {\r\n                    if (confirmed) {\r\n                        loader.wrapLoading(function () {\r\n                            return corporateAccountApi.deleteCompanyMember({ ids: memberId }, function(response) {\r\n                                $ctrl.pageSettings.pageChanged();\r\n                                corporateApiErrorHelper.clearErrors($scope);\r\n                            }, function (rejection){\r\n                                corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                            }).$promise;\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            $translate('customer.edit_company_members.delete_confirm').then(showDialog, showDialog);\r\n        };\r\n\r\n        $ctrl.validate = function (){\r\n            $ctrl.inviteForm.$setSubmitted();\r\n            return $ctrl.inviteForm.valid;\r\n        };\r\n\r\n        $ctrl.showActions = function (member) {\r\n            return member.id != mainContext.customer.id;\r\n        }\r\n    }]\r\n})\r\n\r\n.component('vcAccountCompanyMemberDetail', {\r\n    templateUrl: \"account-company-members-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$rootScope', '$scope', '$window', 'roleService', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', 'confirmService', function ($q, $rootScope, $scope, $window, roleService, corporateAccountApi, corporateApiErrorHelper, loader, confirmService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.fieldsConfig =[\r\n            {\r\n                field: 'CompanyName',\r\n                disabled: true,\r\n                visible: false,\r\n                required: false\r\n            },\r\n            {\r\n                field: 'Email',\r\n                disabled: false,\r\n                visible: true,\r\n                required: true\r\n            },\r\n            {\r\n                field: 'UserName',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Password',\r\n                disabled: true,\r\n                visible: false\r\n            },\r\n            {\r\n                field: 'Roles',\r\n                disabled: false,\r\n                visible:  true\r\n            }\r\n        ];\r\n\r\n        $ctrl.memberComponent = null;\r\n        \r\n        $scope.init = function(storeId){\r\n            $ctrl.storeId = storeId;\r\n        };\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return corporateAccountApi.getCompanyMember({ id: $ctrl.memberNumber }, function (member) {\r\n                    $ctrl.member = {\r\n                        id: member.id,\r\n                        firstName: member.firstName,\r\n                        lastName: member.lastName,\r\n                        email: _.first(member.emails),\r\n                        organizations: member.organizations,\r\n                        title: member.title,\r\n                        securityAccounts: member.securityAccounts\r\n                    };\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.memberNumber = next.params.member;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.submitMember = function () {\r\n            if ($ctrl.memberComponent.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n                    $ctrl.member.emails = [ $ctrl.member.email ];\r\n                    return $q.all([\r\n                        roleService.set($ctrl.member.securityAccounts, $ctrl.member.role),\r\n                        corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                            corporateApiErrorHelper.clearErrors($scope);\r\n                        }, function (rejection){\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise\r\n                    ]);\r\n                });\r\n            };\r\n        };\r\n    }]\r\n});\r\n"," var storefrontApp = angular.module('storefrontApp');\r\n\r\n storefrontApp\r\n .controller('accountLoginController', ['$scope', 'authService', function ($scope, authService) {\r\n     $scope.login = function ($event) {\r\n         if (!$event || $event.keyCode === 13){\r\n             var submit = function(){\r\n                angular.element(document.querySelector('#customer_login')).submit();\r\n            };\r\n            // submit form even when error occurs\r\n            authService.login($scope.userName, $scope.password).then(submit, submit);\r\n         }\r\n     };\r\n }]);","angular.module('storefront.account')\r\n.component('vcAccountOrders', {\r\n    templateUrl: \"themes/assets/js/account/account-orders.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'OrderList', component: 'vcAccountOrdersList', useAsDefault: true },\r\n     { path: '/:number', name: 'OrderDetail', component: 'vcAccountOrderDetail' }\r\n    ],\r\n    controller: ['orderHelper', function (orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.orderHelper = orderHelper;\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrdersList', {\r\n    templateUrl: \"account-orders-list.tpl\",\r\n    controller: ['storefront.orderApi', 'loadingIndicatorService', function (orderApi, loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return orderApi.search({\r\n                    pageNumber: ctrl.pageSettings.currentPage,\r\n                    pageSize: ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: ctrl.sortInfos\r\n                }, function (data) {\r\n                    ctrl.entries = data.results;\r\n                    ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountOrderDetail', {\r\n    templateUrl: \"account-order-detail.tpl\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['storefront.orderApi', '$rootScope', '$window', 'loadingIndicatorService', 'confirmService', 'orderHelper', function (orderApi, $rootScope, $window, loader, confirmService, orderHelper) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.hasPhysicalProducts = true;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                $ctrl.order = orderApi.get({ number: $ctrl.orderNumber }, function (result) {\r\n                    $ctrl.isShowPayment = false;\r\n                    var lastPayment = _.last(_.sortBy($ctrl.order.inPayments, 'createdDate'));\r\n                    $ctrl.billingAddress = (lastPayment && lastPayment.billingAddress) ||\r\n                            _.findWhere($ctrl.order.addresses, { type: 'billing' }) ||\r\n                            _.first($ctrl.order.addresses);\r\n                    $ctrl.amountToPay = orderHelper.getNewPayment($ctrl.order).sum.amount;\r\n\r\n                    if ($ctrl.amountToPay > 0) {\r\n                        $ctrl.billingAddressEqualsShipping = true;\r\n                        loadPromise = orderApi.getNewPaymentData({ number: $ctrl.orderNumber }, function (result) {\r\n                            //$ctrl.order = result.order;\r\n                            configurePayment(result.paymentMethods, result.payment);\r\n                        }).$promise;\r\n                    }\r\n                });\r\n                return $ctrl.order.$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.orderNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.getInvoicePdf = function () {\r\n            var url = $window.BASE_URL + 'storefrontapi/orders/' + $ctrl.orderNumber + '/invoice';\r\n            $window.open(url, '_blank');\r\n        }\r\n\r\n        $ctrl.showPayment = function () {\r\n            loadPromise.then(function (result) {\r\n                $ctrl.isShowPayment = true;\r\n            });\r\n        };\r\n\r\n        var loadPromise;\r\n        $ctrl.getAvailPaymentMethods = function () {\r\n            return loadPromise.then(function (result) {\r\n                var preselectedMaymentMethod;\r\n                if ($ctrl.payment.gatewayCode) {\r\n                    preselectedMaymentMethod = _.findWhere(result.paymentMethods, { code: $ctrl.payment.gatewayCode });\r\n                }\r\n\r\n                return preselectedMaymentMethod ? [preselectedMaymentMethod] : result.paymentMethods;\r\n            });\r\n        };\r\n\r\n        $ctrl.selectPaymentMethod = function (paymentMethod) {\r\n            angular.extend($ctrl.payment, paymentMethod);\r\n            $ctrl.payment.gatewayCode = paymentMethod.code;\r\n            // $ctrl.payment.sum = angular.copy($ctrl.order.total);\r\n            // $ctrl.payment.sum.amount += paymentMethod.totalWithTax.amount;\r\n\r\n            $ctrl.validate();\r\n        };\r\n\r\n        $ctrl.validate = function () {\r\n            $ctrl.isValid = $ctrl.payment &&\r\n                $ctrl.payment.gatewayCode &&\r\n                $ctrl.payment.sum && $ctrl.payment.sum.amount > 0 &&\r\n                _.every(components, function (x) {\r\n                    return typeof x.validate !== \"function\" || x.validate();\r\n                });\r\n\r\n            return $ctrl.isValid;\r\n        };\r\n\r\n        $ctrl.submit = function () {\r\n            if ($ctrl.validate()) {\r\n                loader.wrapLoading(function () {\r\n                    $ctrl.payment.bankCardInfo = $ctrl.paymentMethod.card;\r\n                    return orderApi.addOrUpdatePayment({ number: $ctrl.orderNumber }, $ctrl.payment, function (payment) {\r\n                        orderApi.processPayment({ number: $ctrl.orderNumber, paymentNumber: payment.number }, $ctrl.paymentMethod.card, function (result) {\r\n                            var orderProcessingResult = result.orderProcessingResult;\r\n                            var paymentMethod = result.paymentMethod;\r\n\r\n                            if (!orderProcessingResult.isSuccess) {\r\n                                $rootScope.$broadcast('storefrontError', {\r\n                                    type: 'error',\r\n                                    title: ['Error in new payment processing: ', orderProcessingResult.error, 'New Payment status: ' + orderProcessingResult.newPaymentStatus].join(' '),\r\n                                    message: orderProcessingResult.error,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'preparedform' && orderProcessingResult.htmlForm) {\r\n                                outerRedirect($ctrl.accountManager.baseUrl + 'cart/checkout/paymentform?orderNumber=' + $ctrl.orderNumber);\r\n                            } else if (paymentMethod.paymentMethodType && paymentMethod.paymentMethodType.toLowerCase() === 'redirection' && orderProcessingResult.redirectUrl) {\r\n                                outerRedirect(orderProcessingResult.redirectUrl);\r\n                            } else {\r\n                                if ($ctrl.accountManager.customer.isRegisteredUser) {\r\n                                    refresh();\r\n                                } else {\r\n                                    outerRedirect($ctrl.accountManager.baseUrl + 'cart/thanks/' + $ctrl.orderNumber);\r\n                                }\r\n                            }\r\n                        })\r\n                    }).$promise;\r\n                });\r\n            }\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            confirmService.confirm('Cancel this payment?').then(function (confirmed) {\r\n                if (confirmed) {\r\n                    loader.wrapLoading(function () {\r\n                        return orderApi.cancelPayment({ number: $ctrl.orderNumber, paymentNumber: $ctrl.payment.number }, null, refresh).$promise;\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        var components = [];\r\n        $ctrl.addComponent = function (component) {\r\n            components.push(component);\r\n        };\r\n        $ctrl.removeComponent = function (component) {\r\n            components = _.without(components, component);\r\n        };\r\n\r\n        function configurePayment(paymentMethods, newPaymentTemplate) {\r\n            $ctrl.payment = orderHelper.getNewPayment($ctrl.order, paymentMethods, newPaymentTemplate);\r\n            $ctrl.payment.purpose = $ctrl.payment.purpose || 'Repeated payment';\r\n            $ctrl.amountToPay = $ctrl.payment.sum.amount;\r\n\r\n            $ctrl.canCancelPayment = $ctrl.payment.id !== newPaymentTemplate.id;\r\n            if ($ctrl.canCancelPayment) {\r\n                $ctrl.selectPaymentMethod(_.findWhere(paymentMethods, { code: $ctrl.payment.gatewayCode }));\r\n            }\r\n\r\n            if (!_.some($ctrl.order.shipments)) {\r\n                $ctrl.hasPhysicalProducts = false;\r\n                $ctrl.billingAddressEqualsShipping = false;\r\n            }\r\n        }\r\n\r\n        function outerRedirect(absUrl) {\r\n            $window.location.href = absUrl;\r\n        };\r\n    }]\r\n})\r\n\r\n.factory('orderHelper', function () {\r\n    var retVal = {\r\n        getNewPayment: function (order, paymentMethods, newPaymentTemplate) {\r\n            var retVal;\r\n            var paidPayments = _.filter(order.inPayments, function (x) {\r\n                return x.status === 'Paid';\r\n            });\r\n            var paidAmount = _.reduce(paidPayments, function (memo, num) { return memo + num.sum.amount; }, 0);\r\n            var amountToPay = order.total.amount - paidAmount;\r\n\r\n            var pendingPayments = _.filter(order.inPayments, function (x) {\r\n                return !x.isCancelled &&\r\n                        (x.status === 'New' || x.status === 'Pending') &&\r\n                        x.sum.amount > 0; // && x.sum.amount === amountToPay;\r\n            });\r\n            var pendingPayment = _.last(_.sortBy(pendingPayments, 'createdDate'));\r\n            if (pendingPayment && (!paymentMethods || _.findWhere(paymentMethods, { code: pendingPayment.gatewayCode }))) {\r\n                retVal = pendingPayment;\r\n            } else {\r\n                newPaymentTemplate = newPaymentTemplate || { sum: {} };\r\n                newPaymentTemplate.sum.amount = amountToPay;\r\n                retVal = newPaymentTemplate;\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n    };\r\n\r\n    return retVal;\r\n})\r\n\r\n.filter('orderToSummarizedStatusLabel', ['orderHelper', function (orderHelper) {\r\n    return function (order) {\r\n        var retVal = order.status || 'New';\r\n\r\n        var found = _.findWhere(orderHelper.statusLabels, { status: retVal.toLowerCase() });\r\n        if (found) {\r\n            retVal = found.label;\r\n        }\r\n\r\n        return retVal;\r\n    };\r\n}])\r\n;\r\n","angular.module('storefront.account')\r\n.component('vcAccountPasswordChange', {\r\n    templateUrl: \"themes/assets/js/account/account-password-change.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['loadingIndicatorService', function (loader) {\r\n        var ctrl = this;\r\n        ctrl.loader = loader;\r\n        ctrl.passwordChangeData = {};\r\n\r\n        ctrl.submit = function () {\r\n            // validation\r\n            ctrl.errors = null;\r\n            ctrl.error = {};\r\n            var hasError = false;\r\n            var errorMsg;\r\n\r\n            errorMsg = ctrl.passwordChangeData.oldPassword === ctrl.passwordChangeData.newPassword;\r\n            ctrl.error.newPassword = errorMsg\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = ctrl.passwordChangeData.newPassword !== ctrl.passwordChangeData.newPassword2;\r\n                ctrl.error.newPassword2 = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                ctrl.accountManager.changePassword(ctrl.passwordChangeData).then(function (result) {\r\n                    angular.extend(ctrl, result);\r\n                    ctrl.passwordChangeData = {};\r\n                    ctrl.form.$setPristine();\r\n                });\r\n            }\r\n        };\r\n\r\n        ctrl.setForm = function (frm) { ctrl.form = frm; };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountProfileUpdate', {\r\n    templateUrl: \"themes/assets/account-profile-update.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateAccountApi', 'storefront.corporateApiErrorHelper', 'loadingIndicatorService', function ($q, $scope, mainContext, corporateAccountApi, corporateApiErrorHelper, loader) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        $scope.$watch(\r\n            function () { return mainContext.customer; },\r\n            function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function() {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id }, function(member) {\r\n                            $ctrl.member = {\r\n                                id: member.id,\r\n                                firstName: member.firstName,\r\n                                lastName: member.lastName,\r\n                                email: _.first(member.emails),\r\n                                organizations: member.organizations,\r\n                                title: member.title,\r\n                                addresses: member.addresses,\r\n                                securityAccounts: member.securityAccounts\r\n                            };\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            });\r\n\r\n        $ctrl.submit = function () {\r\n            $ctrl.member.fullName = $ctrl.member.firstName + ' ' + $ctrl.member.lastName;\r\n            $ctrl.member.emails = [$ctrl.member.email];\r\n\r\n            return loader.wrapLoading(function () {\r\n                return corporateAccountApi.updateCompanyMember($ctrl.member, function(response) {\r\n                    corporateApiErrorHelper.clearErrors($scope);\r\n                }, function (rejection){\r\n                    corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                }).$promise;\r\n            });\r\n        };\r\n    }]\r\n});\r\n","angular.module('storefront.account')\r\n.component('vcAccountQuotes', {\r\n    templateUrl: \"themes/assets/js/account/account-quotes.tpl.liquid\",\r\n    require: {\r\n        accountManager: '^vcAccountManager'\r\n    },\r\n    controller: [function () {\r\n        var ctrl = this;\r\n        ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        ctrl.pageSettings.pageChanged = function () {\r\n            ctrl.accountManager.getQuotes(ctrl.pageSettings.currentPage, ctrl.pageSettings.itemsPerPageCount, ctrl.sortInfos, function (data) {\r\n                ctrl.entries = data.results;\r\n                ctrl.pageSettings.totalItems = data.totalCount;\r\n            });\r\n        };\r\n        \r\n        this.$routerOnActivate = function (next) {\r\n            ctrl.pageSettings.currentPage = next.params.pageNumber || ctrl.pageSettings.currentPage;\r\n            ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n});\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('accountRegisterController', ['$q', '$scope', 'storefrontApp.mainContext', 'storefront.corporateRegisterApi', 'storefront.corporateApiErrorHelper', 'storefront.accountApi', 'loadingIndicatorService', 'vcRecaptchaService',\r\n    function ($q, $scope, mainContext, corporateRegisterApi, corporateApiErrorHelper, accountApi, loader, vcRecaptchaService) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.countries = accountApi.getCountries();\r\n\r\n        $scope.isOrg = function () {\r\n            return $scope.member.type === 'Business';\r\n        };\r\n\r\n        $scope.$watch('member.address.countryCode', function () {\r\n            if ($scope.member.address.countryCode) {\r\n                populateRegionalDataForAddress($scope.member.address);\r\n                $scope.member.address.name = stringifyAddress($scope.member.address);\r\n            }\r\n        });\r\n\r\n        function populateRegionalDataForAddress(address) {\r\n            if (address) {\r\n                //Set country object for address\r\n                address.country = _.findWhere($ctrl.countries, { code3: address.countryCode });\r\n                if (address.country) {\r\n                    address.countryName = address.country.name;\r\n                    address.countryCode = address.country.code3;\r\n\r\n                    if (address.country.regions) {\r\n                        setAddressRegion(address, address.country.regions);\r\n                    }\r\n                    else {\r\n                        //$ctrl.getCountryRegions({ country: address.country }).then(function (regions) {\r\n                        accountApi.getCountryRegions(address.country, function (regions) {\r\n                            address.country.regions = regions;\r\n                            setAddressRegion(address, regions);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setAddressRegion(address, regions) {\r\n            address.region = _.findWhere(regions, { code: address.regionId });\r\n            if (address.region) {\r\n                address.regionId = address.region.code;\r\n                address.regionName = address.region.name;\r\n            }\r\n            else {\r\n                address.regionId = undefined;\r\n                address.regionName = undefined;\r\n            }\r\n        }\r\n\r\n        function stringifyAddress(address) {\r\n            var addressType = '';\r\n\r\n            //var type = _.find($ctrl.types, function (i) { return i.id == $ctrl.address.addressType });\r\n            //if (type)\r\n            //    addressType = '[' + type.name + '] ';\r\n\r\n            var stringifiedAddress = addressType;\r\n            stringifiedAddress += address.firstName + ' ' + address.lastName + ', ';\r\n            stringifiedAddress += address.companyName ? address.companyName + ', ' : '';\r\n            stringifiedAddress += address.countryName + ', ';\r\n            stringifiedAddress += address.regionName ? address.regionName + ', ' : '';\r\n            stringifiedAddress += address.city + ' ';\r\n            stringifiedAddress += address.line1 + ', ';\r\n            stringifiedAddress += address.line2 ? address.line2 : '';\r\n            stringifiedAddress += address.postalCode;\r\n            return stringifiedAddress;\r\n        }\r\n\r\n        //$scope.registerMemberFieldsConfig = [\r\n        //    {\r\n        //        field: 'CompanyName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Email',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'UserName',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    },\r\n        //    {\r\n        //        field: 'Password',\r\n        //        disabled: false,\r\n        //        visible: true,\r\n        //        required: true\r\n        //    }\r\n        //];\r\n\r\n        function getParams() {\r\n            var params = window.location.search.substring(1).split(\"&\"), result = {}, param, i;\r\n            for (i in params) {\r\n                if (params.hasOwnProperty(i)) {\r\n                    if (params[i] === \"\") continue;\r\n\r\n                    param = params[i].split(\"=\");\r\n                    result[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        $scope.init = function (storeId) {\r\n            $scope.member = { storeId: storeId, type: 'Business', address: {} };\r\n\r\n            var invite = getParams().invite;\r\n            if (invite) {\r\n                //$scope.registerMemberFieldsConfig[0] = {\r\n                //    field: 'CompanyName',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n                //$scope.registerMemberFieldsConfig[1] = {\r\n                //    field: 'Email',\r\n                //    disabled: true,\r\n                //    visible: true,\r\n                //    required: true\r\n                //};\r\n\r\n                $scope.member.invite = invite;\r\n                $ctrl.loader.wrapLoading(function () {\r\n                    return corporateRegisterApi.getRegisterInfoByInvite({ invite: invite }).$promise\r\n                        .then(function (result) {\r\n                            if (result.message) {\r\n                                $scope.error = result.message;\r\n                                return $q.reject(\"Invite is invalid\");\r\n                            }\r\n                            $scope.member.companyName = result.companyName;\r\n                            $scope.member.email = result.email;\r\n                        });\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            corporateApiErrorHelper.clearErrors($scope);\r\n            $ctrl.error = {};\r\n            var hasError = false;\r\n            var member = $scope.member;\r\n            var errorMsg = member.password.length < 5;\r\n            $ctrl.error.password = errorMsg;\r\n            hasError = hasError || errorMsg;\r\n\r\n            if (!hasError) {\r\n                errorMsg = member.password !== member.confirmPassword;\r\n                $ctrl.error.confirmPassword = errorMsg;\r\n                hasError = hasError || errorMsg;\r\n            }\r\n\r\n            if (!hasError) {\r\n                if ($scope.member.invite) {\r\n                    $ctrl.loader.wrapLoading(function () {\r\n                        return corporateRegisterApi.registerByInvite({ invite: $scope.member.invite }, $scope.member, function (result) {\r\n                        }, function (rejection) {\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                } else {\r\n                    $ctrl.loader.wrapLoading(function () {\r\n                        var apiMethodToCall = $scope.isOrg() ? corporateRegisterApi.register : corporateRegisterApi.registerPersonal;\r\n                        return apiMethodToCall($scope.member, function (result) {\r\n                            $scope.$parent.userName = $scope.member.username;\r\n                            $scope.$parent.password = $scope.member.password\r\n                            $scope.login();\r\n                        }, function (rejection) {\r\n                            vcRecaptchaService.reload();\r\n                            corporateApiErrorHelper.handleErrors($scope, rejection);\r\n                        }).$promise;\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n","angular.module('storefront.account')\r\n.component('vcAccountSubscriptions', {\r\n    templateUrl: \"themes/assets/js/account/account-subscriptions.tpl.liquid\",\r\n    $routeConfig: [\r\n     { path: '/', name: 'SubscriptionList', component: 'vcAccountSubscriptionsList', useAsDefault: true },\r\n     { path: '/:number', name: 'SubscriptionDetail', component: 'vcAccountSubscriptionDetail' }\r\n    ]\r\n})\r\n\r\n.component('vcAccountSubscriptionsList', {\r\n    templateUrl: \"account-subscriptions-list.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n        $ctrl.pageSettings = { currentPage: 1, itemsPerPageCount: 5, numPages: 10 };\r\n        $ctrl.pageSettings.pageChanged = function () {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.search({\r\n                    pageNumber: $ctrl.pageSettings.currentPage,\r\n                    pageSize: $ctrl.pageSettings.itemsPerPageCount,\r\n                    sortInfos: $ctrl.sortInfos\r\n                }, function (data) {\r\n                    $ctrl.entries = data.results;\r\n                    $ctrl.pageSettings.totalItems = data.totalCount;\r\n                }).$promise;\r\n            });\r\n        };\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageSettings.currentPage = next.params.pageNumber || $ctrl.pageSettings.currentPage;\r\n            $ctrl.pageSettings.pageChanged();\r\n        };\r\n    }]\r\n})\r\n\r\n.component('vcAccountSubscriptionDetail', {\r\n    templateUrl: \"account-subscription-detail.tpl\",\r\n    controller: ['storefront.subscriptionApi', 'confirmService', 'loadingIndicatorService', '$translate', function (subscriptionApi, confirmService, loader, $translate) {\r\n        var $ctrl = this;\r\n        $ctrl.loader = loader;\r\n\r\n        function refresh() {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.get({ number: $ctrl.entryNumber }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                }).$promise;\r\n            });\r\n        }\r\n\r\n        this.$routerOnActivate = function (next) {\r\n            $ctrl.pageNumber = next.params.pageNumber || 1;\r\n            $ctrl.entryNumber = next.params.number;\r\n\r\n            refresh();\r\n        };\r\n\r\n        $ctrl.cancel = function () {\r\n            //var showDialog = function (text) {\r\n            //    confirmService.confirm(text).then(function (confirmed) {\r\n            //        if (confirmed) {\r\n            loader.wrapLoading(function () {\r\n                return subscriptionApi.cancel({ number: $ctrl.entryNumber }, { number: $ctrl.entryNumber, cancelReason: $ctrl.cancelReason }, function (result) {\r\n                    $ctrl.subscription = angular.copy(result);\r\n                    $ctrl.isCancelFormVisible = false;\r\n                }).$promise;\r\n            });\r\n            //        }\r\n            //    });\r\n            //};\r\n            //$translate('customer.subscription.cancel_confirmation').then(showDialog, showDialog);\r\n        };\r\n    }]\r\n})\r\n\r\n.filter('toIntervalKey', function () {\r\n    return function (data, data_intervalCount) {\r\n        var retVal = 'customer.subscriptions.intervals.' + data.interval.toLowerCase() + '_' + (data_intervalCount === 1 ? 1 : 'plural');\r\n        //var everyKey = 'customer.subscriptions.intervals.every';\r\n\r\n        //$translate([intervalKey, everyKey]).then(function (translations) {\r\n        //var intervalVal = translations[intervalKey];\r\n        //  var everyVal = translations[everyKey];\r\n\r\n        //if (data_intervalCount === 1) {\r\n        //    retVal = intervalKey;\r\n        //} else {\r\n        //    retVal = data_intervalCount + intervalVal;\r\n        //}\r\n        //});\r\n\r\n        return retVal;\r\n    };\r\n})\r\n;","//Call this to register our module to main application\r\nvar moduleName = \"storefront.account\";\r\n\r\nif (storefrontAppDependencies !== undefined) {\r\n    storefrontAppDependencies.push(moduleName);\r\n}\r\nangular.module(moduleName, ['ngResource', 'ngComponentRouter', /*'credit-cards', */'pascalprecht.translate', 'ngSanitize', 'satellizer', 'storefrontApp', 'storefrontApp.consts'])\r\n\r\n    .config(['$translateProvider', 'baseUrl', function ($translateProvider, baseUrl) {\r\n        $translateProvider.useSanitizeValueStrategy('sanitizeParameters');\r\n        $translateProvider.useUrlLoader(baseUrl + 'themes/localization.json');\r\n        $translateProvider.preferredLanguage('en');\r\n    }])\r\n\r\n    .run(['$templateCache', 'apiBaseUrl', function ($templateCache, apiBaseUrl) {\r\n        // cache application level templates\r\n        $templateCache.put('pagerTemplate.html', '<uib-pagination boundary-links=\"true\" max-size=\"$ctrl.pageSettings.numPages\" items-per-page=\"$ctrl.pageSettings.itemsPerPageCount\" total-items=\"$ctrl.pageSettings.totalItems\" ng-model=\"$ctrl.pageSettings.currentPage\" ng-change=\"$ctrl.pageSettings.pageChanged()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></uib-pagination>');\r\n    }])\r\n\r\n    .value('$routerRootComponent', 'vcAccountManager')\r\n    .service('accountDialogService', ['$uibModal', function ($uibModal) {\r\n        return {\r\n            showDialog: function (dialogData, controller, templateUrl) {\r\n                var modalInstance = $uibModal.open({\r\n                    controller: controller,\r\n                    templateUrl: templateUrl,\r\n                    resolve: {\r\n                        dialogData: function () {\r\n                            return dialogData;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }])\r\n\r\n    .component('vcAccountManager', {\r\n        templateUrl: \"account-manager.tpl\",\r\n        bindings: {\r\n            baseUrl: '<',\r\n            customer: '<'\r\n        },\r\n        $routeConfig: [\r\n            { path: '/orders/...', name: 'Orders', component: 'vcAccountOrders' },\r\n            { path: '/subscriptions/...', name: 'Subscriptions', component: 'vcAccountSubscriptions' },\r\n            { path: '/quotes', name: 'Quotes', component: 'vcAccountQuotes' },\r\n            { path: '/profile', name: 'Profile', component: 'vcAccountProfileUpdate', useAsDefault: true },\r\n            { path: '/addresses', name: 'Addresses', component: 'vcAccountAddresses' },\r\n            { path: '/changePassword', name: 'PasswordChange', component: 'vcAccountPasswordChange' },\r\n            { path: '/companyInfo', name: 'CompanyInfo', component: 'vcAccountCompanyInfo' },\r\n            { path: '/companyMembers/...', name: 'CompanyMembers', component: 'vcAccountCompanyMembers' },\r\n            { path: '/lists/...', name: 'Lists', component: 'vcAccountLists' }\r\n        ],\r\n        controller: ['$scope', '$timeout', 'storefront.accountApi', 'storefrontApp.mainContext', 'authService', 'storefront.corporateAccountApi', 'loadingIndicatorService', function ($scope, $timeout, accountApi, mainContext, authService, corporateAccountApi, loader) {\r\n            var $ctrl = this;\r\n            $ctrl.loader = loader;\r\n\r\n            $ctrl.getQuotes = function (pageNumber, pageSize, sortInfos, callback) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.getQuotes({ pageNumber: pageNumber, pageSize: pageSize, sortInfos: sortInfos }, callback).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateProfile = function (updateRequest) {\r\n                loader.wrapLoading(function () {\r\n                    return accountApi.updateAccount(updateRequest, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.updateAddresses = function (data) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.updateAddresses(data, mainContext.getCustomer).$promise;\r\n                });\r\n            };\r\n\r\n            $ctrl.availCountries = accountApi.getCountries();\r\n\r\n            $ctrl.getCountryRegions = function (country) {\r\n                return accountApi.getCountryRegions(country).$promise;\r\n            };\r\n\r\n            $ctrl.changePassword = function (changePasswordData) {\r\n                return loader.wrapLoading(function () {\r\n                    return accountApi.changePassword(changePasswordData).$promise;\r\n                });\r\n            };\r\n\r\n            $scope.$watch(function () {\r\n                return mainContext.customer;\r\n            }, function (customer) {\r\n                if (customer) {\r\n                    loader.wrapLoading(function () {\r\n                        return corporateAccountApi.getCompanyMember({ id: customer.id, memberType: 'CompanyMember' }, function (member) {\r\n                            customer.companyId = _.first(member.organizations);\r\n                            customer.email = _.first(member.emails);\r\n                        }).$promise;\r\n                    });\r\n                    authService.fillAuthData();\r\n                }\r\n            });\r\n\r\n            $scope.$on('loginStatusChanged', function () {\r\n                $timeout(function () {\r\n                    $(\".nav *:hidden\").parent().prev().find(\".nav-title\").hide();\r\n                });\r\n            });\r\n        }]\r\n    })\r\n\r\n    .service('confirmService', ['$q', function ($q) {\r\n        this.confirm = function (message) {\r\n            return $q.when(window.confirm(message || 'Is it OK?'));\r\n        };\r\n    }])\r\n\r\n","angular.module('storefront.account')\r\n    .factory('storefront.accountApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/account', null, {\r\n            updateAccount: { url: 'storefrontapi/account', method: 'POST' },\r\n            changePassword: { url: 'storefrontapi/account/password', method: 'POST' },\r\n            getQuotes: { url: 'storefrontapi/account/quotes' },\r\n            updateAddresses: { url: 'storefrontapi/account/addresses', method: 'POST' },\r\n            getCountries: { url: 'storefrontapi/countries', isArray: true },\r\n            getCountryRegions: { url: 'storefrontapi/countries/:code3/regions', isArray: true }\r\n        });\r\n    }])\r\n    .factory('storefront.orderApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/orders/:number', null, {\r\n            search: { url: 'storefrontapi/orders/search', method: 'POST' },\r\n            getNewPaymentData: { url: 'storefrontapi/orders/:number/newpaymentdata' },\r\n            addOrUpdatePayment: { url: 'storefrontapi/orders/:number/payments', method: 'POST' },\r\n            processPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/process', method: 'POST' },\r\n            cancelPayment: { url: 'storefrontapi/orders/:number/payments/:paymentNumber/cancel', method: 'POST' }\r\n        });\r\n    }])\r\n    .factory('storefront.subscriptionApi', ['$resource', function ($resource) {\r\n        return $resource('storefrontapi/subscriptions/:number', null, {\r\n            search: { url: 'storefrontapi/subscriptions/search', method: 'POST' },\r\n            cancel: { url: 'storefrontapi/subscriptions/:number/cancel', method: 'POST' }\r\n        });\r\n    }]);","angular.module('storefront.account')\r\n.factory('storefront.corporateAccountApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/companyMembers', {}, {\r\n        getCompanyById: { url: apiBaseUrl + 'api/b2b/company/:id' },\r\n        updateCompany: { url: apiBaseUrl + 'api/b2b/company', method: 'POST' },\r\n\r\n        getCompanyMembers: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'POST' },\r\n        getCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember/:id' },\r\n        updateCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMember', method: 'POST' },\r\n        deleteCompanyMember: { url: apiBaseUrl + 'api/b2b/companyMembers', method: 'DELETE' },\r\n\r\n        invite: { url: apiBaseUrl + 'api/b2b/invite', method: 'POST' },\r\n\r\n        getUser: { url: apiBaseUrl + 'api/b2b/users/:userName' },\r\n        updateUser: { url: apiBaseUrl + 'api/b2b/users', method: 'PUT' },\r\n        getRoles: { url: apiBaseUrl + 'api/b2b/roles', isArray: true }\r\n    });\r\n}])\r\n.factory('storefront.corporateRegisterApi', ['$resource', 'apiBaseUrl', function ($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + 'api/b2b/register', {}, {\r\n        register: { method: 'POST' },\r\n        registerMember: { url: apiBaseUrl + 'api/b2b/registerMember', method: 'POST' },\r\n        getRegisterInfoByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite' },\r\n        registerByInvite: { url: apiBaseUrl + 'api/b2b/registerMember/:invite', method: 'POST' },\r\n        registerPersonal: { url: apiBaseUrl + 'api/b2b/registerPersonal', method: 'POST' }\r\n    });\r\n}])\r\n.factory('storefront.corporateApiErrorHelper', ['$rootScope', function ($rootScope) {\r\n    return {\r\n        clearErrors: function($scope) {\r\n            $scope.errorMessage = null;\r\n            $scope.errors = null;\r\n        },\r\n        handleErrors: function ($scope, rejection) {\r\n            if (rejection.status == 400) {\r\n                $scope.errorMessage = rejection.data.message;\r\n                $scope.errors = rejection.data.modelState;\r\n                $rootScope.closeNotification();\r\n            }\r\n        }\r\n    };\r\n}]);\r\n","angular.module('storefront.account')\r\n.factory('roleService', ['$q', '$http', 'storefront.corporateAccountApi', 'availableRoles', function ($q, $http, corporateAccountApi, availableRoles) {\r\n    var service = {\r\n        available: null,\r\n        get: null,\r\n        set: null\r\n    };\r\n\r\n    // get all available roles from settings\r\n    service._roles = availableRoles;\r\n    corporateAccountApi.getRoles(function (roles) {\r\n        service.available = _.map(service._roles, function(role) {\r\n            var realRole = _.findWhere(roles, { name: role });\r\n            return angular.extend({}, realRole, { description: 'customer.roles.descriptions.' + role.toLowerCase().replace(\" \", \"_\") });\r\n        });\r\n    });\r\n\r\n    service.get = function(accounts){\r\n        var availableRoles = angular.copy(service.available);\r\n        _.each(availableRoles, function(availableRole) {            \r\n            // role is assigned to member if any of member's security accounts has this role assigned\r\n            var roles = _.chain(accounts).map(function(account) { return account.roles; }).flatten().value();\r\n            availableRole.assigned = _.some(roles,\r\n            function(assignedRole) {\r\n                return availableRole.name === assignedRole.name;\r\n            });\r\n        });\r\n        // if multiple roles assigned, return the role with minimal privilidges\r\n        return _.last(_.where(availableRoles, { assigned: true }));\r\n    };\r\n\r\n    service.set = function(accounts, role) {\r\n        // assign current role to all member's security accounts\r\n        return $q.all(_.map(accounts, function(account) {\r\n            account.roles = _.without.apply(_, [account.roles].concat(_.filter(account.roles, function(role) { return _.contains(service._roles, role.name); })));\r\n            account.roles.push(role);\r\n            return corporateAccountApi.updateUser(account).$promise;\r\n        }));\r\n    };\r\n\r\n    return service;\r\n}]);\r\n","angular.module('storefrontApp')\r\n    .component('vcAccountLists', {\r\n        templateUrl: \"lists-manager.tpl\",\r\n        $routeConfig: [\r\n            { path: '/', name: 'Lists', component: 'vcAccountLists' },\r\n            { path: '/friendsLists', name: 'FriendsLists', component: 'vcAccountFriendsLists' },\r\n            { path: '/myLists', name: 'MyLists', component: 'vcAccountMyLists', useAsDefault: true }\r\n        ],\r\n        controller: ['listService', '$rootScope', '$location', 'customerService', 'cartService', '$translate', 'loadingIndicatorService', '$timeout', 'dialogService', '$localStorage', function (listService, $rootScope, $location, customerService, cartService, $translate, loader, $timeout, dialogService, $localStorage) {\r\n        \tvar $ctrl = this;\r\n\r\n            $ctrl.getCustomer = function () {\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    $ctrl.userName = user.data.userName;\r\n                    $ctrl.initialize();\r\n                })\r\n            };\r\n\r\n            $ctrl.selectTab = function (tabName) {\r\n                $ctrl.selectedList = [];\r\n                $ctrl.selectedTab = tabName;\r\n                $ctrl.getCustomer();\r\n            };\r\n\r\n            $ctrl.initialize = function (lists) {     \r\n\t\t\t\tif ($ctrl.selectedTab === 'myLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($ctrl.selectedTab === 'friendsLists') {\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getSharedLists($ctrl.userName).then(function (result) {\r\n\t\t\t\t\t\t\t$ctrl.lists = result;\r\n\t\t\t\t\t\t\tselectDefault($ctrl.lists);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n            };\r\n\r\n\t\t\tfunction selectDefault(lists) {\r\n\t\t\t\tif (_.find(lists, { default: true })) {\r\n\t\t\t\t\tvar selected = _.find(lists, { default: true });\r\n\t\t\t\t\t$ctrl.selectList(selected);\r\n\t\t\t\t}\r\n\t\t\t\telse if (!_.isEmpty(lists)) {\r\n\t\t\t\t\t_.first(lists).default = true;\r\n\t\t\t\t\t$ctrl.selectList(_.first(lists));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            $ctrl.selectList = function (list) {\r\n                $ctrl.selectedList = list;\r\n            };\r\n\r\n            $ctrl.addToCart = function (lineItem) {\r\n                loader.wrapLoading(function () {\r\n                    return cartService.addLineItem(lineItem.productId, 1).then(function (response) {\r\n                        $ctrl.productAdded = true;\r\n                        $timeout(function () {\r\n                            $ctrl.productAdded = false;\r\n                        }, 2000);\r\n                    });\r\n                });\r\n            };\r\n\r\n            $ctrl.removeList = function (listName) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.clearList(listName, $ctrl.userName).then(function (response) {\r\n\t\t\t\t\t\tdocument.location.reload();\r\n\t\t\t\t\t});\r\n                });\r\n            };\r\n\r\n            $ctrl.removeLineItem = function (lineItem) {\r\n\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\treturn listService.removeLineItem(lineItem.id, $ctrl.selectedList.id, $ctrl.userName).then(function (result) {\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n            };\r\n\r\n            $ctrl.generateLink = function () {\r\n                $ctrl.sharedLink = $location.absUrl().substr(0, _.lastIndexOf($location.absUrl(), '/')) + '/friendsLists?id=' + $ctrl.selectedList.id;\r\n                $ctrl.selectedList.permission = 'public';\r\n                var dialogData = {sharedLink:$ctrl.sharedLink};\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-shared-link-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.addToCartAllProducts = function () {\r\n                _.each($ctrl.selectedList.items, function (item) {\r\n                    loader.wrapLoading(function () {\r\n                        return cartService.addLineItem(item.productId, 1).then(function (response) {\r\n                            $ctrl.productAdded = true;\r\n                            $timeout(function () {\r\n                                $ctrl.productAdded = false;\r\n                            }, 6000);\r\n                        });\r\n                    });\r\n                })\r\n            }\r\n\r\n            $ctrl.createList = function () {\r\n                var dialogData = $ctrl.lists;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.recently-create-new-list-dialog.tpl');\r\n            };\r\n\r\n            $ctrl.listSettings = function () {\r\n                var dialogData = {};\r\n                dialogData.lists = $ctrl.lists;\r\n                dialogData.userName = $ctrl.userName;\r\n                dialogData.selectedTab = $ctrl.selectedTab;\r\n                dialogService.showDialog(dialogData, 'recentlyCreateNewListDialogController', 'storefront.list-settings-dialog.tpl');\r\n            };\r\n\r\n        }]\r\n    })\r\n    .component('vcAccountMyLists', {\r\n        templateUrl: 'themes/assets/js/lists/account-lists.tpl.liquid',\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, customerService, loader, $timeout, dialogService, $localStorage) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.listPreSetting = function (lists) {\r\n\t\t\t\tcustomerService.getCurrentCustomer().then(function (user) {\r\n\t\t\t\t\tvar userName = user.data.userName;\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\t\t\treturn listService.getOrCreateMyLists(userName, lists).then(function (result) {\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t};\r\n\r\n            $ctrl.$onInit = function (lists) {\r\n                $ctrl.accountLists.selectTab('myLists');\r\n            }\r\n        }]\r\n    })\r\n    .component('vcAccountFriendsLists', {\r\n        templateUrl: \"themes/assets/js/lists/account-lists.tpl.liquid\",\r\n        require: {\r\n            accountLists: '^^vcAccountLists'\r\n        },\r\n        controller: ['$rootScope', 'listService', '$location', 'customerService', 'loadingIndicatorService', '$timeout', 'accountDialogService', '$localStorage', function ($rootScope, listService, $location, customerService, loader, $timeout, dialogService, $localStorage) {\r\n            var $ctrl = this;\r\n\r\n            function checkLocation() {\r\n                var sharedCartId = $location.search().id.toString();\r\n                customerService.getCurrentCustomer().then(function (user) {\r\n                    var userName = user.data.userName;\r\n\t\t\t\t    var myLists = listService.getOrCreateMyLists(userName);\r\n\t\t\t\t\tloader.wrapLoading(function () {\r\n                        return listService.addSharedList(userName, myLists, sharedCartId).then(function (result) {\r\n                            $ctrl.accountLists.selectTab('friendsLists');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n                })\r\n            }\r\n\r\n            $ctrl.$onInit = function () {\r\n                if ($location.search().id)\r\n                    checkLocation();               \r\n                $ctrl.accountLists.selectTab('friendsLists');\r\n            }\r\n        }]\r\n    });\r\n","angular.module('storefrontApp')\r\n\t.component('addToListButton', {\r\n\t\ttemplateUrl: 'themes/assets/js/lists/add-to-list-button.tpl.html',\r\n\t\tbindings: {\r\n\t\t\tselectedVariation: '<'\r\n\t\t},\r\n\t\tcontroller: ['customerService', 'listService', 'dialogService', function (customerService, listService, dialogService) {\r\n\t\t\tvar $ctrl = this;\r\n\t\t\t$ctrl.$onInit = function () {\r\n\t\t\t\tcompareProductInLists();\r\n\t\t\t}\r\n\r\n\t\t\tfunction compareProductInLists() {\r\n\t\t\t\t$ctrl.buttonInvalid = true;\r\n\t\t\t    customerService.getCurrentCustomer().then(function(user) {\r\n\t\t\t        listService.getOrCreateMyLists(user.data.userName, $ctrl.lists).then(function(result) {\r\n\t\t\t            $ctrl.lists = result;\r\n\t\t\t            angular.forEach($ctrl.lists, function(list) {\r\n\t\t\t                listService.containsInList($ctrl.selectedVariation.id, list.id).then(function(result) {\r\n\t\t\t                    if (result.contains === false) {\r\n\t\t\t                        $ctrl.buttonInvalid = false;\r\n\t\t\t                    }\r\n\t\t\t                });\r\n\t\t\t            });\r\n\t\t\t        });\r\n\t\t\t    });\r\n\t\t\t}\r\n\r\n\t\t\tfunction toListsDialogDataModel(product, quantity) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tproduct: product,\r\n\t\t\t\t\tquantity: quantity,\r\n\t\t\t\t\tupdated: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$ctrl.addProductToWishlist = function () {\r\n\t\t\t\tvar dialogData = toListsDialogDataModel($ctrl.selectedVariation, 1);\r\n\t\t\t\tdialogService.showDialog(dialogData, 'recentlyAddedListItemDialogController', 'storefront.recently-added-list-item-dialog.tpl');\r\n            }\r\n\r\n            $ctrl.signInToProceed = function() {\r\n                dialogService.showDialog({ title: 'Add product to list...' }, 'universalDialogController', 'storefront.sign-in-to-proceed.tpl');\r\n            }\r\n\r\n\t\t}]\r\n\t})\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyAddedListItemDialogController', ['$scope', '$window', '$uibModalInstance', 'dialogData', 'listService', '$translate', '$localStorage', 'customerService', function ($scope, $window, $uibModalInstance, dialogData, listService, $translate, $localStorage, customerService) {\r\n    $scope.availableLists = [];\r\n    $scope.selectedList = {};\r\n    dialogData.product.imageUrl = dialogData.product.primaryImage.url;\r\n    dialogData.product.createdDate = new Date;\r\n    dialogData.product.productId = dialogData.product.price.productId;\r\n    _.extend(dialogData.product, dialogData.product.price);\r\n    _.extend(dialogData.product, dialogData.product.salePrice);\r\n\r\n    $scope.dialogData = dialogData.product;\r\n    $scope.dialogData.quantity = dialogData.quantity;\r\n    $scope.inProgress = false;\r\n    $scope.itemAdded = false;\r\n\r\n    $scope.addProductToList = function () {\r\n        $scope.inProgress = true;\r\n        var customer = { userName: $scope.userName, id: $scope.userId, isRegisteredUser: true };\r\n\r\n        if ($scope.userName !== $scope.selectedList.author) {\r\n            dialogData.product.modifiedBy = $scope.userName;\r\n\t\t}\r\n        listService.addItemToList($scope.selectedList.id, dialogData.product);\r\n\r\n        $scope.inProgress = false;\r\n        $scope.itemAdded = true;\r\n    }\r\n    $scope.selectList = function (list) {\r\n        $scope.selectedList = list;\r\n    };\r\n\r\n    $scope.close = function () {\r\n        $uibModalInstance.close();\r\n    };\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    }\r\n\r\n    $scope.initialize = function (lists) {\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n\t\t\tlistService.getOrCreateMyLists($scope.userName, lists).then(function (result) {\r\n                $scope.lists = result;\r\n                angular.forEach($scope.lists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlistService.getSharedLists($scope.userName).then(function (result) {\r\n                $scope.sharedLists = result;\r\n                angular.forEach($scope.sharedLists, function (list) {\r\n                    list.title = list.name;\r\n                    list.description = list.name;\r\n                    listService.containsInList(dialogData.product.id, list.id).then(function (result) {\r\n                        list.contains = result.contains;\r\n                    })\r\n                });\r\n\t\t\t})\r\n        })\r\n    };\r\n}]);\r\n","var storefrontApp = angular.module('storefrontApp');\r\n\r\nstorefrontApp.controller('recentlyCreateNewListDialogController', ['$rootScope', '$scope', '$window', '$uibModalInstance', 'customerService', 'dialogData', 'listService', '$localStorage', 'loadingIndicatorService', '$translate', function($rootScope, $scope, $window, $uibModalInstance, customerService, dialogData, listService, $localStorage, loader, $translate) {\r\n\r\n    if (dialogData.sharedLink)\r\n        $scope.sharedLink = dialogData.sharedLink;\r\n    else {\r\n        $scope.dialogData = dialogData.lists;\r\n        $scope.userName = dialogData.userName;\r\n        $scope.inProgress = false;\r\n        $scope.data = $scope.listName;\r\n        $scope.selectedTab = dialogData.selectedTab;\r\n    }\r\n\r\n    $scope.createList = function () {   \r\n        if ($scope.dialogData.permission != 'public')\r\n            $scope.dialogData.permission = 'private';\r\n\r\n        $scope.dialogData.id = Math.floor(Math.random() * 230910443210623294 + 1).toString();\r\n        customerService.getCurrentCustomer().then(function (user) {\r\n            $scope.userName = user.data.userName;\r\n            listService.getWishlist($scope.dialogData.listName, $scope.dialogData.permission, $scope.dialogData.id, user.data.userName);\r\n            $uibModalInstance.close();\r\n        })\r\n\r\n    };\r\n\r\n    $scope.setDefault = function (list) {\r\n        _.each($scope.dialogData, function (x) {\r\n            x.default = list === x;\r\n        })\r\n    };\r\n\r\n    $scope.removeList = function (list) {\r\n        if ($scope.selectedTab === 'friendsLists') {\r\n\t\t\tloader.wrapLoading(function () {\r\n\t\t\t\treturn listService.removeFromFriendsLists(list.id, $scope.userName).then(function () {\r\n\t\t\t\t});\r\n\t\t\t})\r\n        }\r\n        else\r\n            listService.clearList(list.id, $scope.userName);\r\n\r\n        $uibModalInstance.close();\r\n        document.location.reload();\r\n    };\r\n\r\n    $scope.selectedList = function (listName) {\r\n        var items = listService.getWishlist(listName, '', '', $scope.userName).items;\r\n        $scope.selectedList.items = items;\r\n    };\r\n\r\n    $scope.submitSettings = function () {\r\n        angular.forEach(dialogData.lists, function (list) {\r\n            if (list.delete)\r\n                $scope.removeList(list);\r\n        })\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.close = function() {\r\n        $uibModalInstance.close();\r\n    };\r\n\r\n    $scope.redirect = function (url) {\r\n        $window.location = url;\r\n    };\r\n}]);\r\n","angular.module('storefrontApp')\r\n.directive('vaPermission', ['authService', function (authService) {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.vaPermission) {\r\n                var permissionValue = attrs.vaPermission.trim();\r\n\r\n                //modelObject is a scope property of the parent/current scope\r\n                scope.$watch(attrs.securityScopes, function (value) {\r\n                    if (value) {\r\n                        toggleVisibilityBasedOnPermission(value);\r\n                    }\r\n                });\r\n\r\n                function toggleVisibilityBasedOnPermission(securityScopes) {\r\n                    var hasPermission = authService.checkPermission(permissionValue, securityScopes);\r\n                    if (hasPermission)\r\n                        angular.element(element).show();\r\n                    else\r\n                        angular.element(element).hide();\r\n                }\r\n\r\n                toggleVisibilityBasedOnPermission();\r\n                scope.$on('loginStatusChanged', toggleVisibilityBasedOnPermission);\r\n            }\r\n        }\r\n    };\r\n}]);"]}