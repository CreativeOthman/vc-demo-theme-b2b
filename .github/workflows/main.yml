# v1.1.1
name: Theme CI
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
    branches:
      [master, dev]
  pull_request:
    branches:
      [master, dev]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      blobUrl: ${{ steps.publish.outputs.blobUrl }}
      artifactVersion: ${{ steps.image.outputs.fullVersion }}
    env: 
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      VERSION_SUFFIX: ""

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v3

    - name: Get Image Version
      uses: VirtoCommerce/vc-github-actions/get-image-version@VP-6093
      id: image

    - name: Set release variables
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.suffix }}" >> $GITHUB_ENV

    - name: Set release-alpha variables
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.fullSuffix }}" >> $GITHUB_ENV

    - name: Get changelog
      id: changelog
      uses: VirtoCommerce/vc-github-actions/changelog-generator@master

    - name: SonarCloud Scan
      uses: VirtoCommerce/vc-github-actions/sonar-theme@master

    - name: Build
      if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch' }}
      uses: VirtoCommerce/vc-github-actions/build-theme@master
      with:
        versionSuffix:  ${{ env.VERSION_SUFFIX }}

    - name: Publish
      if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')}}
      id: publish
      uses: VirtoCommerce/vc-github-actions/publish-theme@VP-6093

    - name: Create Release
      if: ${{ github.ref == 'refs/heads/master' }}
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.image.outputs.prefix }}
        release_name: ${{ steps.image.outputs.prefix }}
        draft: false
        prerelease: false
        body: ${{ steps.changelog.outputs.changelog }}

    - name: Upload Release Asset
      if: ${{ github.ref == 'refs/heads/master' }}
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.publish.outputs.artifactPath }}
        asset_name: ${{ steps.publish.outputs.artifactName }}
        asset_content_type: application/zip
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps: 
    
    - run: |
        echo "${{ needs.ci.outputs.blobUrl }}"
        echo "${{ needs.ci.outputs.artifactVersion }}"

#    - name: Start deployment
#      uses: bobheadxi/deployments@master
#      id: deployment
#      with:
#        step: start
#        token: ${{ secrets.GITHUB_TOKEN }}
#        env: Development
#        no_override: false

    - name: Checkout VirtoCommerce/vc-deploy-apps
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: "VirtoCommerce/vc-deploy-apps"
        ref: "master"

    - name: Update deployment-cm
      shell: pwsh
      run: |

        cd ${{ github.workspace }}
        cd ./webstore-app/overlays/dev
        $fileName = './deployment-cm.yaml'
        $content = Get-Content $fileName
        $regex = '  B2B_THEME_URL:'
        $artifactPath = '"${{ needs.ci.outputs.blobUrl }}"'
        $newContent = ''
        foreach($line in $content)
        {
            if($line -match $regex)
            {
                $line = $regex + ' ' + $artifactPath
            }
            $newContent += $line + "`r`n"
        }
        Set-Content -Path $fileName -Value $newContent

    - name: Commit deployment-cm change
      run: |
         git config --global user.name "GitHub Actions"
         git config user.email --global  "github.actions@virtoway.com"
         git commit -am "Automated update ${{ github.repository }} to ${{ needs.ci.outputs.artifactVersion }}"
         git push

    # - name: Wait for environment is up
    #   shell: pwsh
    #   timeout-minutes: 5
    #   run: | 
    #     do {
    #       Start-Sleep -s 15
    #       $statusBage = (Invoke-WebRequest -Uri "https://cd.govirto.com/api/badge?name=webstore-dev-app").Content
          
    #       $syncedAndHealthy = $statusBage.Contains('>Healthy<') -and $statusBage.Contains('>Synced<')
    #       if (-not $syncedAndHealthy) {
    #         Write-Host "Sync pending..."
    #       }
    #     }
    #     while (-not $syncedAndHealthy)
    # - name: BUILD_STATE::successful
    #   if: success()
    #   run: echo "::set-env name=BUILD_STATE::successful"

    # - name: BUILD_STATE::failed
    #   if: failure()
    #   run: echo "::set-env name=BUILD_STATE::failed"

    # - name: Update GitHub deployment status
    #   uses: bobheadxi/deployments@master
    #   if: always()
    #   with:
    #     step: finish
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     status: ${{ job.status }}
    #     deployment_id: ${{ steps.deployment.outputs.deployment_id }}

